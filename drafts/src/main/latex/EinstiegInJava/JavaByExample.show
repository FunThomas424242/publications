{Copyright: Geschützt durch die GNU Free Documentation License v2.0 und folgende}
=Java by Example=
Autor: Thomas Schubert

''Kopieren und verteilen ausdrücklich erwünscht.''


==Programmiersprachen==
* Dienen der Beschreibung von Lösungen zu realen Problemen in computerverständlicher Form
* Besitzen ein Paradigma, die bekanntesten sind:
** Funktional (Lisp, Haskel, ...)
** Objektorientiert (Smalltalk, Java, ...)
** Logisch (Prolog, PR1, ...)
** Imperativ (Basic, Pascal, Modula II, ...)

== Die Sprache Java ==
* Grundkonzepte
** einfach gehalten, objektorientiert, verteilt (verteilte Objekte/Systeme)
** robust und sicher
** architekturneutral und portable
** leistungsfähig
** interpretierbar, parallelisierbar, dynamisch

Details siehe Quelle:
[http://de.wikipedia.org/wiki/Java_(Programmiersprache)]

== Objektorientierte Weltanschauung ==
* Im objektorientierten Paradigma betrachten wir alle Dinge im Lösungsraum als Objekte
* Wir legen fest, dass Objekte Eigenschaften besitzen und Operationen mit denen diese Eigenschaften verändert werden können
* Weiterhin gruppieren wir Objekte nach bestimmten Kriterien und nennen eine solche Gruppe eine Klasse von Objekten
* Der Begriff Klasse kommt von Klassenbildung oder Klassifizierung und bezeichnet eine Menge bestimmter Objekte die von uns festgelegten Kriterien genügen.

== Beispiele von Objekten ==
Angenommen einige Dinge der uns umgebenden realen Welt müssten bei unserer Problemlösung beschrieben werden. Dann würden wir alle Dinge als Objekte ansehen und sie in Klassen einteilen.

So könnten wir beispielweise folgende Objekte identifizieren: 
* ein gelber Stein, ein roter Stein, ein schwarzer Stein (Klasse der Steine)
* eine Rose, eine Nelke, eine Tulpe (Klasse der Blumen)
* ein Reh, ein Hirsch, ein Schwein (Klasse der Tiere)
* ein Schrank, ein Tisch, ein Stuhl (Klasse der Gegenstände)

Die Namen der Klassen und die Zuordnung der einzelnen Objekte zu den Klassen ist rein willkürlich. Hier sinnvolle Namen und Zuordnungen zu finden um letztlich damit eine Lösung beschreiben zu können ist die eigentliche Kunst beim Entwickeln.

Namen, Begriffe und deren assozierte Bedeutung spielen eine sehr große Rolle in der objektorientierten Programmierung.

== Modelle und Metamodelle ==
Wie bereits erläutert, lassen sich zur Beschreibung einer Problemlösung Objekte und Klassen bestimmen.

* Alle identifizierten Klassen und Objekte zusammen ergeben dann ein Modell unserer Lösung. 

* Wenn wir nun nur die Klassen betrachten, so könnten wir diese evtl. wieder gruppieren. Jede Gruppe wäre dann eine Klasse von Klassen. Um hier nicht in ein Begriffskauderwelsch abzudriften bezeichnet man Klassen von Klassen als Metaklassen.

* Auch Metaklassen lassen sich wieder gruppieren. So entstehen letztlich MetaMetaklassen und MetaMetaMetaklassen usw.

* Modelle die aus Metaklassen bestehen werden Metamodelle genannt. Analog dazu gibt es dann auch MetaMetamodelle usw.
 

== Das Konzept Abstraktion ==
* Jede Gruppierung von Dingen entspricht letztlich einer Abstraktion.Beim Bilden von Klassen werden einzelne Objekte auf Grund festgelegter Kriterien zu Klassen abstrahiert. Die unterschiedlichen Eigenschaften der einzelnen Objekte spielen keine Rolle mehr - sie entfallen. Es zählen nur noch die Eigenschaften welche den festgelegten Kriterien der Klasse entsprechen.

* Ein Modell ist eine Abstraktion der Lösung, denn wir haben bereits alle Dinge weggelassen die nicht zur Lösung benötigt werden.
* Ein Metamodell wiederum ist eine Abstraktion des Modelles usw.

== 2 Beispiele für Objektorientierte Modelle ==
Legende[[Image:figures/OOModellBeispiele.jpg]]
* Kreise stellen einzelne Objekte dar
* Rechtecke stellen Klassen dar
* Gestrichelte Linien ordnen die Objekte einer Klasse zu
* Linien mit Dreiecken zeigen eine Spezialisierung vom Dreieck aus an.

== Beispiel für ein mögliches Metamodell ==
Zu den eben gezeigten Modellen könnte so ein mögliches Metamodell aussehen. Die Modellelemente des Metamodelles beschreiben die Elemente aus welchen die beschriebenen Modelle bestehen dürfen.

[[Image:figures/OOMetaModellEinfach.jpg]]  

(Empfohlene Quelle: http://www.voelter.de/data/presentations/metamodelling-paper.pdf)

== Die Instanz ==

Das einzelne Element einer Klasse wird im objektorientierten Paradigma auch Instanz genannt. Das heißt:
* Ein Objekt ist eine Instanz einer Klasse, da es eine konkrete Ausprägung bzw. ein konkretes Element der Klasse darstellt
* Eine Klasse ist eine Instanz einer Metaklasse, da es ein einzelnes Element einer Metaklasse darstellt
* Ein Modell ist eine Instanz eines Metamodells, da es ein einzelnes Element von einer ganzen Menge möglicher Modelle die durch das Metamodell beschrieben werden darstellt.

== Programmierung, Modellierung ==
* In objektorientierten Programmiersprachen werden zur Beschreibung in der Regel nur Objekte und Klassen verwendet.
* Das Bilden von Metamodellen und damit die Bestimmung von Metaklassen obliegt dem Gebiet der Modellierung.

== Was wissen wir jetzt? ==
Wir haben bis jetzt folgende Dinge geklärt und sollten zukünftig sicher verstehen was damit gemeint ist:
* Objekt, Instanz und Klasse
* Modell, Metamodell, Metaklasse
* Abstraktion
* Abgrenzung zwischen Modellierung und Programmierung

= Und wann geht's los mit Java ? =
Zum Verstehen eines HalloWelt Programmes fehlen jetzt noch folgende Grundlagen:
* Vererbung und Spezialisierung
* Klassenmethoden und Instanzmethoden
* Schlüsselwörter und Syntax der Programmiersprache

== Vererbung als Spezialisierung ==
Es gibt mindestens 3 Arten von Vererbung - wir betrachten zunächst nur die Vererbung im Sinne einer Spezialisierung
[[Image:figures/VererbungEinfach.jpg]]

Das obige Klassendiagram geht davon aus, dass jedes Lebewesen eine Eigenschaft Hauptfarbe besitzt, also jene welche man bereits aus der Entfernung wahrnimmt.
Da Pflanzen und Tiere jeweils spezielle Lebewesen sind, müssen auch diese eine Hauptfarbe aufweisen.
Welche Farbe die Hauptfarbe ist, hängt von der konkreten Instanz einer Klasse ab. Verschiedene Instanzen einer Klasse können unterschiedliche Hauptfarben besitzen (Elephant und Känguru).
Grünpflanzen hingegen sind eine spezielle Klasse von Pflanzen, denn alle ihre Instanzen oder Subklassen besitzen Grün als Hauptfarbe.

Wir sehen also, dass die Eigenschaft Hauptfarbe der Klasse Lebewesen an alle Subklassen vererbt wird. Der konkrete Wert für die Hauptfarbe, kann jedoch erst bei der Erzeugung einer konkreten Instanz festgelegt werden. Möglicherweise ändert er sich im Laufe des Lebens auch noch.
Bei den Grünpflanzen hingegen ist bereits vor der Erzeugung einer konkreten Instanz klar, dass die Hauptfarbe grün sein wird. Sie muss also nicht erst bei der Erzeugung der Instanz mit einem konkreten Wert belegt werden, sondern ist für alle Objekte der Klasse bzw. der Subklassen fest.
  

== Vererbung in Java ==
* Eigenschaften der Objekte einer Klasse lassen sich in Java definieren, indem die Klasse deklariert wird mit der gewünschten Eigenschaft.
* Um den Wertebereich einer Eigenschaft festlegen zu können, muss auch für diesen eine Klasse existieren beispielweise die Klasse Farbe. Eine konkrete Instanz dieser Klasse könnte ein Objekt namens Grau sein. Wenn man bei der Erzeugung einer Instanz der Klasse Elephant die Hauptfarbe mit der Instanz Grau der Klasse Farbe belegt, hat man einen konkreten Elephanten mit grauer Farbe erzeugt.
(Für Vergleiche muss sichergestellt sein, dass keine verschiedenen Grau Objekte existieren)
* Soll der Wert einer Eigenschaft für alle Instanzen einer Klasse der selbe sein, so spricht man von einer Klasseneigenschaft. Wird der konkrete Wert dieser Eigenschaft geändert, so wird er nicht nur für eine konkrete Instanz der Klasse sondern für alle zeitgleich geändert. Klasseneigenschaften lassen sich in Java durch den Bezeichner static ausdrücken.
* Die Eigenschaften der Objekte repräsentieren deren inneren Zustand, hierzu zählen auch Werte von Klasseneigenschaften.

== Vererbung von Operationen in Java ==
* Die Vererbung der Operationen (in Java Methoden genannt) funktioniert vom Konzept her genau wie wir es bisher von den Eigenschaften kennen.
* Genau wie es bei den Eigenschaften Klasseneigenschaften gibt, so gibt es bei den Operationen auch Klassenmethoden.
* Die Operationen der Objekte repräsentieren deren Verhalten. Ändert sich die Implementierung einer Methode, so ändert sich das damit realisierte Verhalten des Objektes wenn diese Methode ausgeführt wird.
* Bestimmte Verhaltensweisen sind für alle Objekte einer Klasse gleich. Diese können dann in Klassenmethoden realisiert werden. 
(In Wirklichkeit benötigt Java keine Unterscheidung zwischen Klassen- und Objektmethoden, da die Realisierung der Methoden zur Laufzeit nicht verändert werden kann. Dennoch macht eine Unterscheidung aus anderen Gründen Sinn. Diese Details können aber später diskutiert werden. Für andere Objektorientierte Sprachen ist eine solche Unterscheidung evtl. viel wichtiger.)
 


== Zum Einstieg ein "Hallo Welt" ==
{Code:java://javaexamples/test.HalloWelt}






