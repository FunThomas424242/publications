% This file was created with JabRef 2.8.1.
% Encoding: UTF8

@ARTICLE{Klein2006,
  author = {Kleinz, Torsten},
  title = {Freie Netze auf eigene Gefahr},
  journal = {c't},
  year = {2006},
  volume = {23},
  pages = {164 - 165},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Vorstellung verschiedener Initiativen unter dem Aspekt der Rechtssicherheit
	für die Person welche ihren Router für andere Nutzer öffnen. Der
	normale Problemfall ist, dass rechtlich geschütztes Material über
	den Router ausgetauscht wurde. Da die IP vom Router beim Fahnder
	erscheint ist immer der dran der den Router bereitstellt. Diverse
	Bürgerinitiativen schützen den Verein nicht aber die Person die den
	Router bereitstellt. Mögliche praktische Lösungen: + Zugang per Router
	ins Internet nur für registrierte Nutzer + Datenverkehr - Protokolle
	speichern (Hinweis in AGB oder Startseite) + VPN Verbindungen für
	Internet nutzen + feste IPs für Mitglieder (schützt nur den Verein)
	Aktuelle Initiativen: + Freifunk (am gefährlichsten) + Sofanet (sicher
	aber nicht weit verbreitet) + Fon (spanische Initiative) + IN-ULM
	+ Bürgernetzverein Main-Spessart (www.wavelink.de) Hardware meist
	Linksys Router mit Software nionet als Firmware. Rechtsgrundlage:
	Urteil des LG Hamburg, Geschäfts-Nr. 308 O 407 / 06},
  crossref = {Lampm2006},
  groups = {public},
  howpublished = {Internet Link},
  interhash = {7f8079b92c574f95712bc8d9e5f8ecf4},
  intrahash = {4f114412589a68006c59134bc7b705b9},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:37},
  url = {http://www.lampmannbehn.de/wlan.html}
}

@INPROCEEDINGS{conf/testen/Liggesmeyer92,
  author = {Liggesmeyer, Peter},
  title = {Testen, Analysieren und Verifizieren von Software - eine klassifizierende
	Übersicht der Verfahren.},
  booktitle = {Testen, Analysieren und Verifizieren von Software},
  year = {1992},
  editor = {Liggesmeyer, Peter and Sneed, Harry M. and 0002, Andreas Spillner},
  series = {Informatik Aktuell},
  pages = {1-25},
  publisher = {Springer},
  __markedentry = {[FunThomas424242:6]},
  comment = {dblp},
  crossref = {conf/testen/1992},
  groups = {public},
  interhash = {7cc5ad5d42bc1b9ee11cdb281c44740c},
  intrahash = {2f70fd490750b995da30b50d05f88cbf},
  isbn = {3-540-55860-8},
  keywords = {klassifizerung, liggesmeyer, softwaretest},
  owner = {funthomas424242},
  timestamp = {2012-10-14 12:56:50},
  url = {http://dblp.uni-trier.de/db/conf/testen/testen1992.html#Liggesmeyer92}
}

@ARTICLE{Muelle1999,
  author = {Müller, Oliver},
  title = {Good IDEA},
  journal = {c't},
  year = {1999},
  volume = {21},
  pages = {314 - 321},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der IDEA (International Data Encryption Algorithm) basiert auf dem
	PES Standard (Proposed Encryption Standard). Die dort endeckten Schwachpunkte
	wurden in IPES (Improved Proposed Encryption Standard) beseitigt.
	Seit 1992 wird IPES als IDEA bezeichnet. Der Artikel erläutert sehr
	gut anhand eines Beispieles in C++ die Grundlagen des IDEA Algorithmus
	und seiner Implementation. Grundlagen IDEA: IDEA ist eine symmetrische
	Blockchiffre. Der zu verschlüsselnde Klartext wird zunächst in Blöcke
	zu 8 Byte zerlegt. Jeder dieser Blöcke durchläuft anschließend IDEA,
	woraus ein Block der verschlüsselten Nachricht (Chiffretext) entsteht.
	Das Entschlüsseln funktioniert genau anders herum: IDEA entschlüsselt
	Stück für Stück den in Blöcke aufgeteilten Chiffretext. Zur Ver-
	und Entschlüsselung dient derselbe 128 Bit Schlüssel; solche Algorithmen
	heißen daher symmetrisch. Das gesamte Design basiert auf dem Prinzip
	'Mischen verschiedener algebraischer Gruppen'. Es werden Bitweises
	Exklusiv-Oder (XOR), Addition modulo 2^16 und Multiplikation 2^16
	+1 in 8 Runden (iterativ) gemischt. Insgesamt generiert IDEA für
	einen Durchlauf aus dem ursprünglichen 128 Bit Schlüssel also 52
	Teilschlüssel mit 16 Bit Breite (8 mal 6 Rundenschlüssel plus 4 für
	die Ausgabetransformation) Die ersten 8 Teilschlüssel entsprechen
	einfach den 16 Bit Worten des 128 Bit Schlüssels. Für weitere Teilschlüsselsätze
	wird der Hauptschlüssel jeweils um 25 Bit nach links rotiert und
	wiederum in 8 gleiche Teile gespalten. Die 1. IDEA Runde verwendet
	dann die Teilschlüssel 1-6, die Zweite 7-12 und so weiter. Zum Entschlüsseln
	dient zwar derselbe Algorithmus, er verwendet aber andere Dechifrierteilschlüssel,
	die sich aus den Chiffrierteilschlüsseln in umgekehrter Reihenfolge
	mit einigen zusätzlichen Vertauschungen ergeben. Schwachstellen:
	Brute Force Attack laut [Schne1996] nicht möglich. Differentielle
	Kryptoanalyse (wirksam gegen PES) wurde durch Benutzung einer Markov-Verschlüsselung
	eingedämmt (gilt nach 4 Runden als dagegen gesichert). Gelegentlich
	werden schwache Schlüssel [Springer1994, Seite 224] generiert, das
	kann wie folgt[Lai1992] verhindert werden: Verknüpft man alle 16
	Bit Teilschlüssel per XOR mit dem hexadezimalen Wert 0x0DAE, so löst
	sich das Problem in Wohlgefallen auf. Fazit: IDEA gilt in der Fachwelt
	als die derzeit sicherste Blockchiffre. Der Algorithmus ist als amerikanisches
	und europäisches Patent von der Schweizer Firma Ascom Systec angemeldet.
	Die Benutzung (Nachbau oder so) ist dementsprechend Gebührenpflichtig,
	Details über: http://www.ascom.ch/infosec/idea.html},
  crossref = {Schne1996, Springer1994},
  groups = {public},
  interhash = {4b8c635d09e41f160ebac58281cbf210},
  intrahash = {d7276b2ee1c965f5c09b7b14de27976e},
  keywords = {C++, IDEA, algorithmus, beispiel, kryptographie, quelltext},
  owner = {funthomas424242},
  privnote = {Sehr gute Einführung in die Implementierung des IDEA Algorithmus am
	Beispiel von C++},
  timestamp = {2010-09-12 18:14:29},
  url = {http://www.heise.de/ct/ftp/99/21/314}
}

@ARTICLE{ADAC2007,
  author = {ADAC},
  title = {Ab wann darf ein Kind allein zur Schule radeln?},
  journal = {ADACmotorwelt},
  year = {2007},
  volume = {6},
  number = {6},
  month = {Juni},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {9978d5116d99d87e822b20e97a0715ac},
  intrahash = {bbaac1a5d88730516e75b811e35b6922},
  keywords = {recht},
  owner = {funthomas424242},
  privnote = {Kinder dürfen erst nach erfolgreicher Radfahrprüfung alleine zur Schule
	fahren. Die Prüfung wird in der Schule in der Regel in der 3. bzw.
	4. Klasse durchgeführt. Für die Benutzung von Gehwegen gelten folgende
	Regelungen: 1) Bis zum 8. Lebensjahr müssen Kinder den Gehweg benutzen.
	2) Von 9 bis 10 Jahren dürfen Kinder zwischen Gehweg und Straße wählen
	3) ab 11 Jahre dürfen sie nur noch auf der Straße fahren},
  timestamp = {2010-09-12 18:14:25}
}

@ARTICLE{Aders2006,
  author = {Adersberger, Josef},
  title = {Java 6.0 alias Mustang eingefangen und genauer betrachtet},
  journal = {Java Magazin},
  year = {2006},
  volume = {7},
  pages = {56 - 60},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel bietet einen kurzen Überblick über die Neuerungen im Java
	6.0. 1) Weiterhin Abwärtskompatible 2) Diagnostic und Monitoring
	Management: Erweiterung der JMX Fähigkeiten aus Java 5.0 3) XML -
	Neue APIs aufgenommen: XML Signaturen, StAX, XML Binding, ... 4)
	Webservices Support für Webservice jetzt auch im SDK (JAX-WS, JSR-181
	Webservice Metadata,...) 5) Development - Annotationen Allgemeines
	Set an Annotationen um Abhängigkeiten zu Herstellern zu verringern
	(Import von Annotationen bindet an Hersteller z.B. an Oracle für
	JDBC Annotationen) 6) Development - Scriptsprachen Java verfügt jetzt
	über ein API zur Einbindung von Skriptsprachen wie Ruby, Groovy,...
	Es wird eine Engine erzeugt und dann Skripts in Form von Zeichenketten
	eingespeist und ausgeführt. Variablen Zugriff und Übergabe werden
	unterstützt. Es können Java Objekte mit dem Skript ausgetauscht werden.
	7) Development - Services ServiceProvider werden jetzt per Lookup
	ala Jini/CORBA gefunden. Wichtig der Service muss als JAR im Classpath
	hängen und im JAR muss eine Servicedefinition per META-INF/services
	vorliegen. 8) Desktop - Diverse Neuerungen Zugriff auf SystemTray,
	Splash Screen, Verbesserung modaler Dialoge, Console Support (z.B.
	Passworteingabe im DOS Fenster per java.io.Console) Zugriff auf andere
	Desktop Anwendungen möglich 9) weiteres},
  groups = {public},
  interhash = {76a1030e384cdcd7c2c22644412791e6},
  intrahash = {29ce823946eee7b06aea4bc69f43be83},
  keywords = {6.0, Mustang, SDK6.0, java},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:23}
}

@ARTICLE{Aders2005,
  author = {Adersberger, Josef},
  title = {Mit dem Tiger in der Falle - Java 5 Pitfalls: Fallstricke und Best
	Practices bei der Entwicklung mit Java 5},
  journal = {Java Magazin},
  year = {2005},
  volume = {8},
  pages = {28 - 32},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {d702743034686b1ecedb3789474f7f4f},
  intrahash = {2c2a8d360799a18415aa8f17a39bc95d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Ahler2007,
  author = {Ahlers, Ernst},
  title = {Spionageabwehr},
  journal = {c't},
  year = {2007},
  volume = {14},
  pages = {204 - 207},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Öffentliche Hotspots arbeiten prinzipiell unverschlüsselt, daher empfiehlt
	sich die Verwendung von VPN um den Datenverkehr zu tunneln. Ab Windows
	XP und Vista ist das PPTP (Protokoll für VPN) im System eingebaut.
	Bei anderen OS Versionen muss openVPN mit GUI installiert werden.
	Das grundlegende Prinzip besteht darin vom Laptop einen Tunnel zu
	einem Server im Internet zu legen. Dadurch geht der gesamte Netzverkehr
	durch den Hotspot verschlüsselt und in der Nähe sitzende Lauscher
	können nicht mithören. Das ganze macht sogar Sinn ohne sich ins Firmennetz
	oder den eigenen PC einzuwählen, da es tatsächlich Firmen gibt welche
	einen VPN Server nur für diese Zwecke bereit halten. Sinnvollerweise
	sollten diese Firmen der Internetprovider wie t-online, 1&1 oder
	alice sein - sind es in Deutschland aber nicht. Dafür haben sich
	weltweit ein paar Firmen gefunden welche diese Funktion teilweise
	gratis, teilweise gegen geringen Beitrag anbieten: + Hotsplots VPN,
	Safesurf, Personal VPN, pure sofaLINK, SwissVPN Was mir durch den
	Artikel nicht klar wurde ist: + Was nützt mir der entfernte Rechner
	auf dem der Tunnel endet? Er müsste ja die identische Konfiguration
	meines Laptops haben damit ich alles tun kann. z.B. http muss freigeschalten
	sein, Mailports müssen so funktionieren wie vom Laptop aus, spezielle
	Ports für lokale Software müssen ja auch irgendwie über den Tunnel
	laufen -> reicht da die Anpassung der Routen? Der Endpunktrechner
	muss doch die gleichen Ports bereitstellen damit man meine ans Netz
	gebrachten Dienste erreicht. -> Bestimmt interessant aber momentan
	nicht notwendig? Oder doch? Wie sieht es bei der Vodafone DataCard
	aus (kein Hotspot)?},
  groups = {public},
  interhash = {747536b04784a4c2b438b4f36d771614},
  intrahash = {64a5443e751d482807cac934f74686cc},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:20}
}

@BOOK{AhoSU1988,
  title = {Compilerbau Teil 1 und Teil 2},
  publisher = {Addison-Wesley Publishing Company},
  year = {1988},
  author = {Aho, A. V. and Sethi, R. and Ullmann, J. D.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4530ae3fa87807370c764d2fe44c087e},
  intrahash = {9c6201192057d9e4b5540d9ef5a723d5},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Alukhanov2009,
  author = {Alukhanov, Rodion},
  title = {Der richtige Umgang},
  journal = {Java Magazin},
  year = {2009},
  volume = {7},
  pages = {32 - 37},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es wird die richtige bzw. vernünftige Benutzung von Exceptions erklärt.
	Im Artikel werden auch anschauliche Beispiele gebracht.},
  groups = {public},
  interhash = {d92866f62fbc764bda363aa39105f339},
  intrahash = {7d1290fdb3c9b796886bd1ade1591a89},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:16}
}

@BOOK{AlurCM2001,
  title = {J2EE Core Patterns},
  publisher = {PH PTR},
  year = {2001},
  editor = {Press, Sun Microsystems},
  author = {Alur, Deepak and Crupi, John and Malks, Dan},
  series = {Java 2 Platform, Enterprise Edition},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {310f13f644036b4078aa4a0fa0437fe2},
  intrahash = {827f51d9956701c6dce1234f63b1b379},
  isbn = {0-13-064884-1},
  keywords = {JavaEE, designpattern},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bablo2005,
  author = {Bablok, Bernhard},
  title = {Erstkontakt mit dem User - Eclipse Richt Client Platform als Basis
	für eigene Anwendungen - Teil 2},
  journal = {Linux Magazin},
  year = {2005},
  volume = {10},
  pages = {117 - 119},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in die Eclipse Rich Client Platform.},
  groups = {public},
  interhash = {1f28679ac3805bc47fefaf57a91e7b39},
  intrahash = {ef4ebaa7316582e346a74d219ada0bda},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bablo2001,
  author = {Bablok, Bernhard},
  title = {80 Prozent Java},
  journal = {Linux Magazin},
  year = {2001},
  volume = {06},
  pages = {110 - 113},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung zur Motivation der Benutzung des JNI APIs: + Performance
	+ Legacy Code anbinden + Plattformspezifische Funktionen nutzen z.B.
	Dateiberechtigungen unter Unix Hinweis, dass sich stets ein Vergleich
	mit alternativen Java-Bordmitteln lohnt - z.B. Runtime.exec Der Artikel
	stellt Paket vor welche das JNI API verwenden. Folgende auf JNI basierende
	Pakete werden vorgestellt: + JavaUnix (Zugriff auf Unix Dateifunktionen)
	+ JavaSignals (Beenden per TERM, neu laden der Konfiguration bei
	anderen Signalen) Vorsicht bei Verwendung der SIGUSR Signale -> Probleme
	mit RMI + JavaReadline (Wrapper Bibliothek um die GNU Readline Bibo)
	+ Syslog Paket (Syslog Dämon nicht nur für Unix) + Java Communication
	API und JCL/RXTX},
  groups = {public},
  interhash = {c9dba4551744dda7c65cb8a65da592a8},
  intrahash = {5df43fec9368fa09a08aebf295959bd7},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:11}
}

@ARTICLE{Bablo2001a,
  author = {Bablok, Bernhard},
  title = {Coffe-Shop - Auskunft, wo ist mein Objekt?},
  journal = {Linux Magazin},
  year = {2001},
  volume = {1},
  pages = {156 - 162},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {ea13453da0ae1bc963ee8e196bb6e014},
  intrahash = {ef92603c19f2468368823d5a016f261f},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bablo2000,
  author = {Bablok, Bernhard},
  title = {Coffee-Shop - Objekte im Kasten},
  journal = {Linux Magazin},
  year = {2000},
  volume = {02},
  pages = {144 - 150},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Erfahrungen in einem Kurztest der Objektorientierten Datenbank Poet.
	Verwendet wurde die Linux Version. RPM Pakete mit Kompatibilität
	zu Red Hat - aber es gehen in der Praxis auch andere Versionen. 3
	Nutzungsarten von Poet: + Lokale Datenbank (Embeded Mode) -> lokale
	Dateien im Bundle mit selbstgeschriebenen Anwendungen + Client Server
	Kombination + 3 Tier Anwendungen im Applikation Server (Konnektor)
	Getestet wurde nur der Embeded Mode. Kodeschnipsel für JDBC Zugriff:
	txn=new Transactio(); txn.begin(); query.execute(); txmn.commit();
	Im Laufe der Zeit ändern sich Klassen, aber eventuell sind Objekte
	noch in einer alten Version in der Datenbank vorhanden. Beim Lesen
	werden die alten Objekte korrekt an die aktuelle Klassendefinition
	angepasst und beim Zurückschreiben werden sie dann mit der neuen
	Version ersetzt. Grundlegende Philosophie von POET bzgl. persistenter
	Objekte ist persistence-by-reachability. Dies bedeutet, dass die
	Speicherung eines Objektes immer kaskadierend (alle Referenzen auf
	andere Objekte) erfolgt. Durch intelligente Proxies erfolgt Lacy
	Loading der Objekte erst beim Zugriff auf Referenzen. Performance
	scheint kritisch zu sein. Transaktionen erlauben auch, den Lock Level
	der Objekte zu spezifizieren. Über ein Event Framework kann man sich
	benachrichtigen lassen, wenn Objekte in der Datenbank geändert werden.},
  groups = {public},
  interhash = {b3cf93bc0e1cf7abadc29081eae0aa4f},
  intrahash = {7e4357c425b9febb733a733102a4cc07},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:07}
}

@ARTICLE{Bablo2000a,
  author = {Bablok, Bernhard},
  title = {Von Sandkästen, Schlüsseln und Signaturen},
  journal = {Linux Magazin},
  year = {2000},
  volume = {07},
  pages = {106 - 113},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {944881118a0a5b8de8433dea0372a29f},
  intrahash = {d5c4bbd8cc9d43df99256e27540dafe8},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bablo1999,
  author = {Bablok, Bernhard},
  title = {Coffee-Shop - Servlets als Middleware},
  journal = {Linux Magazin},
  year = {1999},
  volume = {8},
  pages = {102 - 112},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute aber kurze Einführung in das Servlet API am Anfang. Anschliessend
	erfolgt eine detaillierte Einführung in die Apache Webserver Konfiguration.
	Über Middleware fällt ausser im Titel kein Wort - allerdings werden
	die Vorteile dargestellt wenn man vom Servlet aus direkt auf die
	Datenbank zugreift. Für mich sind diese nicht direkt nachvollziehbar.
	Hier ein paar Auzüge aus den Grundlagen des Servlet APIs: Servletmethoden
	sind 3 (init, service, destroy). Die init Methode wird nur einmal
	aufgerufen, wenn das Servlet erzeugt wird. Hier werden die Konfigurationsparameter
	und der ServletContext mit übergeben. Die Service Methode wird bei
	jedem Request aufgerufen und parallel von mehreren Threads (parallele
	Requests) durchlaufen. Ergo - Threadsicher programmieren! Dem Container
	kann befohlen werden keine parallelen Threads zuzulassen - durch
	Implementierung des SingleThreadModel -> J2EE Tutorial Chapter 11
	Seite 58 oder im Java EE Tutorial Chapter 3 Seite 68. Die destroy
	Methode wird nur aufgerufen wenn das Servlet zerstört wird. Klasse
	von der alle Servlets abgeleitet werden sollten ist javax.servlet.GenericServlet.
	Für das HTTP Protokoll existiert bereits eine speziell abgeleitete
	Klasse javax.servlet.http.HttpServlet. Bei dieser Klasse wird in
	der Service Methode der Header automatisch geparst und je nach Anfrageart
	(GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT bzw. OPTIONS) in eine
	spezialisierte Methode verzweigt.},
  groups = {public},
  interhash = {e39aad7eb40c696c13f2bbff960368cd},
  intrahash = {24c9d3970954a1bd80e5e109b49f957a},
  keywords = {JavaEE, Konfiguration, java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:05}
}

@ARTICLE{Bablo1999a,
  author = {Bablok, Bernhard},
  title = {Coffee-Shop - Mit Corba über den Kaffeetassenrand schauen},
  journal = {Linux Magazin},
  year = {1999},
  volume = {9},
  pages = {95 - 98},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Verwendung der CORBA Schnittstelle. Zum
	ersten Mal die Zeichenkette IIOP als Abkürzung für das Internet Inter-ORB
	Protocol gesehen (sonst immer als Internet-Internet Object Protocol
	- aber als Internet Inter-ORB Protocol macht es aus meiner Sicht
	deutlich mehr Sinn. Weitere Definitionen: GIOP (General Inter-ORB
	Protocol) - wird fast ausschliesslich in Form des IIOP verwendet.},
  groups = {public},
  interhash = {ba9dc0cd23246b46cb7a0d21f1c1457d},
  intrahash = {1e421ff729292b0b5e2848f218e417f0},
  keywords = {CORBA, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:59},
  url = {http://members.tripod.de/bablokb/LinMag/ablage.html}
}

@ARTICLE{Bablo1999b,
  author = {Bablok, Bernhard},
  title = {SAX und DOM - Die APIs zu XML},
  journal = {Linux Magazin},
  year = {1999},
  volume = {11},
  pages = {140 - 144},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {d6ee823269279983f714bbe185b287d5},
  intrahash = {f4b82fd6d4880f8af0da04c9d44efb31},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{bachmann2010,
  author = {Bachmann, Florian},
  title = {KML-Geodaten in Java},
  journal = {Java Magazin},
  year = {2010},
  volume = {10},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel führt in das Open-Source Java API for KML (JAK) ein. Einer
	kurzen Einleitung über die Entstehung des API folgt direkt die Erläuterung
	der Arbeitsweise. Der zweite Teil des Artikel führt in die Benutzung
	des APIs ein. Der Artikel orientiert sich durchweg an einem praktischen
	Beispiel und listet auch die benötigten Quellkodes auf.},
  comment = {Das API besteht aus 2 Schichten. Die erste Schicht wird mittels JAXB
	vollständig automatisch generiert. Die 2. Schicht liegt darüber und
	stellt das eigentliche API dar. Sie müsste eigentlich händisch erstellt
	werden. Durch ein JAXB Plugin ist jedoch auch das nicht notwendig.
	Durch diesen genialen Trick werden beide Schichten generiert.Das
	API stellt für den nutzenden Entwickler ein Fluent-Interface zur
	Verfügung wie es von Eric Evans und Martin Fowler unter [6] verstanden
	wird.},
  groups = {public},
  interhash = {ef8c34dc9260ab76179b055f2fb16b8e},
  intrahash = {446ae672e2cbdc4d1dab1d5984096e4f},
  keywords = {geodaten, google-earth, java, kml},
  owner = {funthomas424242},
  privnote = {Inwieweit steht das Konzept eines Fluent-Interface eigentlich OO Design
	und Entwurfstechniken entgegen?},
  timestamp = {2010-10-10 17:33:57}
}

@ARTICLE{BagerB2007,
  author = {Bager, Jo and Bleich, Holger},
  title = {Stabilitätspakt - Shared Hosting Angebote für fortgeschrittene Webanwendungen},
  journal = {c't},
  year = {2007},
  volume = {7},
  pages = {196 - 203},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Verglichen werden: + 1&1 + 1blu + All.inkl + domainFactory + Goneo
	+ Greatnet + HostEurope + Lycos + Server4You + Stato + T-Online Viele
	unterstützen Programminstallationen wie CMS, Calendar, Wiki oder
	ähnliches. Application Server standen in keinem Angebot zur Verfügung
	- allerdings wurden auch nur Angebote der Mittelklasse untersucht.
	Ähnliche Artikel in: + c't 19/05 S.188 + c't 07/05 S. 88 + c't 03/05
	S. 160},
  groups = {public},
  interhash = {8726c88d1a2bcfc389fb747b8ec2bf84},
  intrahash = {52010b8551da56c862575441ddd29f67},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:56}
}

@BOOK{Bagna2001,
  title = {Java 2 - Sun Certified Programmer},
  publisher = {Osborne McGraw-Hill and Syngress Media, Inc.},
  year = {2001},
  author = {Bagnall, Brian},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {06b02a4f5253a609eb507c8bb9e3a269},
  intrahash = {be1f796af21b0846772b48b42765bf7f},
  isbn = {0-07-213208-6},
  keywords = {Weiterbildung, java},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{BallCEHJ2006,
  author = {Ball, Jennifer and Carson, Debbie Bode and Evans, Ian and Haase,
	Kim and Jendrock, Eric},
  title = {The Java™ EE 5 Tutorial},
  institution = {Sun Microsystems, Inc.},
  year = {2006},
  month = {May},
  __markedentry = {[FunThomas424242:6]},
  file = {JavaEETutorial.pdf:j2ee\\JavaEETutorial.pdf:PDF},
  groups = {public},
  interhash = {8369dd3fc00639975aaabec869076542},
  intrahash = {8f7c75ed6a9a51d99aec415f9dd6a1c2},
  keywords = {JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{balzert1998a,
  title = {Lehrbuch der Softwaretechnik, Teil 2: Softwaremanagement, Software-Qualitaetssicherung,
	Unternehmensmodellierung},
  publisher = {Spektrum Akademischer Verlag},
  year = {1998},
  author = {Balzert, Helmut},
  address = {Heidelberg, Berlin},
  __markedentry = {[FunThomas424242:6]},
  annote = {Dieses Buch ist der zweite Band des zweibaendigen {"}Lehrbuchs der
	                      Softwaretechnik{"}. In diesem Band werden die
	methodischen Aspekte der                       Softwaretechnik behandelt.
	Hierzu gehoeren Software-Management und },
  comment = {Lehrbuch der Softwaretechnik, Teil 2: Softwaremanagement, Software-Qualitaetssicherung,
	Unternehmensmodellierung},
  descriptor = {Unternehmensmodell, Softwaretechnik, Software-Qualitaetssicherung,
	                      Qualitaetssicherung, Software Management, Software},
  groups = {public},
  interhash = {2b1ae14332709174614719ffe540e63c},
  intrahash = {6a0bebb89981c08499270bd26566c3d4},
  isbn = {3-8274-0065-1},
  keywords = {balzert, softwaretest},
  owner = {funthomas424242},
  timestamp = {2012-10-14 12:55:04}
}

@BOOK{balzert1996a,
  title = {Lehrbuch der Software-Technik: Teil 1: Software-Entwicklung},
  publisher = {Spektrum Akademischer Verlag},
  year = {1996},
  author = {Balzert, Helmut},
  address = {Heidelberg, Germany},
  __markedentry = {[FunThomas424242:6]},
  annote = {Dieser Titel ist der erste Band des zweibaendigen {"}Lehrbuchs der
	                      Softwaretechnik{"}. In diesem Band wird Software-Entwicklung
	                      behandelt. Dabei werden die einzelnen Abschnitte
	bzw. Phasen der             },
  comment = {Lehrbuch der Software-Technik: Teil 1: Software-Entwicklung},
  descriptor = {Software-Entwicklung},
  groups = {public},
  interhash = {19dfa7b4af1e1875638df768f6416616},
  intrahash = {26ea55aa158a295970ba012e93d093bf},
  isbn = {3-8274-0042-2},
  keywords = {balzert, softwaretest},
  owner = {funthomas424242},
  timestamp = {2012-10-14 12:55:41}
}

@ARTICLE{Baron2009,
  author = {Baron, Pavlo and Eriksson, Kristofer},
  title = {Sind Annotationen die erhoffte Rettung?},
  journal = {Java Magazin},
  year = {2009},
  volume = {8},
  pages = {37 - 41},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Die Autoren setzen sich sehr kritisch mit Annotationen auseinander.
	Sie beleuchten die verschiedenen Verwendungsgebiete und kommen zu
	dem Schluss das die Verwendung von Annotationen zu inflationär betrieben
	wurde. Allerdings gibt es auch Gebiete in denen diese durchaus sehr
	sinnvoll sind. Der Einsatz zur Konfiguration wird aber für sehr bedenklich
	gehalten. Private Notizen: Es werden abschreckende Beispiele von
	Ant Files (Verwendung von XML als Programmiersprache) sowie von Annotationen
	zur Beschreibung des OO Mappings von Java Typen auf Datenbanktabellen
	gezeigt. Es wird aber auch gezeigt wie Annotationen sinnvoll in Frameworks
	wie Spring eingesetzt werden können. Es wird aber auch gezeigt, dass
	es in Spring Zeiten gab wo das nicht so war. Zitate aus dem Text:
	"Dadurch, dass die gesamte Konfiguration sich im schlimmsten Fall
	direkt im Code befindet, ist jede Änderung dieser mit dem Reload
	der Klasse verbunden, je nach Architektur auch mit einem Redeployment
	der Anwendung. Zumindest muss die Klasse kompiliert werden, damit
	eine Konfigurationänderung überhaupt in Kraft treten kann." "Was
	mit Properties anfing und dann zu XML mutierte, wechselte prompt
	zu den Annotationen über, sobald diese in Erscheinung getreten waren."
	"Properties und Präferenzen ... ist der klassische Weg zur Konfiguration
	von Java Applikationen" "JMX ist ideal für verteilte Umgebungen,
	es spricht jedoch absolut nichts dagegen, die MBeans auch lokal zu
	nutzen." "Im Fall von OSGi empfiehlt sich z.B. flächendeckender Einsatz
	von Annotationen, da die Komponenten in sich konfigurierbar bzw.
	autonom sind und das Redeployment keine Schwierigkeiten bereitet.
	Wenn aber der ausgelagerte Betrieb z.B. 4 - 5 Tage Vorlauf für die
	kleinste Produktionsänderung benötigt, ist es absolut sinnvoll, auf
	XML als Konfigurationsmedium umzuschwenken und somit keine echten
	Releases hervorzurufen."},
  groups = {public},
  interhash = {05a1540664f59864c34ba53a5d5907f9},
  intrahash = {b1d48a500bfafd198dcae939e48f0e8d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:51}
}

@ARTICLE{Barte2005,
  author = {Bartels, Oliver},
  title = {Standard-Streit - Zwei Lager ringen um das nächstschnellere WLAN},
  journal = {c't},
  year = {2005},
  volume = {21},
  pages = {164 - 165},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein weiterer Artikel zu den Problemen bei der Einführung der WLAN
	Technologie in Deutschland und warum kaum Verschlüsselung genutzt
	wird.},
  groups = {public},
  interhash = {820f0138f20c6171358e8d09481dca3f},
  intrahash = {6ff166abb9a386f952480c5d7c964664},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007,
  title = {BEA WebLogic Server 9/10: System Administration Book 1 of 2},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  volume = {1},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4e32cd8351e720949865c3f03b410a4c},
  intrahash = {60f1d8f24ff42998558af73644306957},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007a,
  title = {BEA WebLogic Server 9/10: System Administration Book 2 of 2},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  volume = {2},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {ec1fb512224a0a9fc56267200b7226fd},
  intrahash = {810305e40839fa4e3d374570ccc96222},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007b,
  title = {BEA WebLogic Server 9.0: Developing EJBs in Eclipse Book 1 of 2},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  volume = {1},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {54096cabb6dd886a6ea7c592943fe546},
  intrahash = {2df92808571afa471a5ec2f9951c38f2},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007c,
  title = {BEA WebLogic Server 9.0: Developing EJBs in Eclipse Book 2 of 2},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  volume = {2},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {a3e82fa4edb3c19f5da977be8a2e2b91},
  intrahash = {3c83b435d05d5203802e3cf67df0292a},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007d,
  title = {BEA WebLogic Server 9.0: Developing EJBs in Eclipse Lab Guide},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {5f7544fb23fa660b3bb8aa56e0572ce8},
  intrahash = {1d44e92a8bdefcf37fcbdbe8d4449286},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{BEA2007e,
  title = {BEA WebLogic Server 9/10: System Administration Lab Guide},
  publisher = {BEA Education Services},
  year = {2007},
  author = {BEA},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {b663c99ee42b2782ef69525b622035b5},
  intrahash = {aab57a16e05b95ef23142b49dce4606e},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{BeckR2007,
  author = {Beck, Hendrik and Rücker, Bernd},
  title = {Mein Name ist Hase und ich weiß Bescheid},
  journal = {c't},
  year = {2007},
  volume = {3},
  pages = {27 - 31},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel führt in das Thema des Java Content Repository (JCR) ein.
	Eine erste und noch aktuelle Spezifikation erfolgte über JSR170 und
	eine Überarbeitung durch JSR283 (JCR2.0). Eine OpenSource Implementierung
	ist Jackrabbit und findet sich auf jackrabbit.apache.org. Die Spezifikation
	bietet eine Einteilung der Implementationen in folgende Gruppen:
	+ Level 1 nur lesender Zugriff + Level 2 schreibender Zugriff + optionale
	Funktionalitäten Jackrabbit ist JCR konvorm mit Level 1 und 2 sowie
	den optionalen Funktionen. Damit ist Jackrabbit eine vollständige
	Implementierung des JCR 1.0. Das JCR Repository Modell sieht folgende
	Elemente vor: + Workspace, ist ein abgeschlossener Bereich zur Speicherung
	von Content + Node, ist ein Verwaltungselement zur Strukturierung
	des Contents innerhalb eines Workspaces + Property, ist der Content
	selbst. Ein Property besitzt keine Kinder. Nodes werden nach Typen
	unterschieden. Hierbei gibt es einige vordefinierte Typen wie: +
	mix:versionable (für versionierbaren Content) + nt:file (Abbildung
	von Dateien) + nt:folder (Abbildung von Verzeichnissen) In der Regel
	müssen und sollen aber eigene Nodetypen definiert werden. Folgende
	Implementierungen existieren auf dem Markt: + Referenzimplementierung
	der Firma Day Software + Content Repository Extreme ebenfalls von
	Day Software + Apache Jackrabbit + Jeiceira, exoJCR, Alfresco und
	weitere Implementierungen Das zu implementierende API liegt im Package
	javax.jcr.* Zum Deployment sind 3 Varianten vorstellbar: + Reine
	Webanwendung mit im war integrierten Repository, das funktioniert
	auch ohne Applikation Server wie z.B. beim CMS Magnolia + Java EE
	Resource im Applikationsserver mit Zugriff aus allen dort verteilten
	Anwendungen + als dedizierter Server welcher einen einheitlichen
	Zugriff auf das CR bietet z.B. über RMI, WebdAV oder ähnlichem. Folgende
	Persistenzstrategien existieren: + In-Memory: Content wird nur im
	Speicher gehalten. Das genügt nur für Tests + ObjectPersistenceManager:
	Content wird in speziellen Datendateien im Filesystem gehalten. Diese
	Strategie hat Probleme bei der Verwendung von Clustern. Möglicher
	Ausweg Netzwerkfähiges Filesystem. + XMLPersistenceManager: Content
	wird in XML Dateien im Filesystem gehalten. Nachteile durch Probleme
	bei der Clusterung wie auch schlechte Performance. Nur für Testzwecke
	zu empfehlen. + SimpleDbPersistenceManager: Content wird per JDBC
	in einer Datenbank gehalten. Gute Performance aber komplexe Konfiguration.
	Fazit: JCR ist gut und Jackrabbit eine akzeptable Lösung.},
  groups = {public},
  interhash = {a67ecd545bb66a1bba16c1f74bb30001},
  intrahash = {492e458fc9482567445b43674a91eadb},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:43}
}

@ARTICLE{Beck1998,
  author = {Beck, Kent and Gamma, Erich},
  title = {Test-infiziert - Wie Programmierer das Tests-Schreiben lieben lernen},
  journal = {Java Spektrum},
  year = {1998},
  volume = {5},
  pages = {22 - 31},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in JUnit von den Machern selbst.},
  groups = {public},
  interhash = {a1d67e8e59be46e158851985b1048acc},
  intrahash = {8c5b5a90fca04a3641d8bf68e50b5ec4},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@MASTERSTHESIS{beeck1995,
  author = {von der Beeck, Michael},
  title = {Ein Kontrollmodell für die Strukturierte Analyse},
  year = {1995},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  editor = {Aachen, Rheinisch-Westfaelische Technische Hochschule (RWTH)},
  groups = {public},
  interhash = {3fdadc893eed4e02b7f096a66dd221fb},
  intrahash = {32766ee7944b7e18009adb7043ae114f},
  keywords = {statechart},
  owner = {funthomas424242},
  timestamp = {2011-02-13 17:57:35}
}

@BOOK{berane1976,
  title = {Gewöhnliche Differentialgleichungen erster Ordnung - Übungsprogramm},
  publisher = {Akademische Verlagsgesellschaft Geest\&Portig K.G.},
  year = {1976},
  editor = {Lohse, Doz. Dr. Heinz},
  author = {Berane, E. and Knorr, H.},
  volume = {6},
  series = {Mathematik - Lehrprogrammbücher},
  address = {Leipzig},
  note = {vln = {276-105/25/76}lsv = {1034}},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {c6480e877d3f415efe0c9fa29c70a6b0},
  intrahash = {6244adcde8b00eeac7d871595ca74270},
  keywords = {hochschulstudium, lehrprogrammbücher, mathematik},
  owner = {funthomas424242},
  timestamp = {2011-03-26 18:20:20}
}

@BOOK{BeranK1976,
  title = {Gewöhnliche Differentialgleichungen erster Ordnung},
  publisher = {Akademische Verlagsgesellschaft Geest \& Porting K.-G.},
  year = {1976},
  author = {Berane, E. and Knorr, H.},
  volume = {6},
  series = {Mathematik Lehrprogrammbücher Hochschulstudium},
  address = {Leipzig},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {f5095c8c6faa8326f7f099a1a9d6f290},
  intrahash = {8bc6a55f870551b07df60546198666d8},
  keywords = {mathematik, weiterbildung},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@INPROCEEDINGS{Berar1993,
  author = {Berard, Edward V.},
  title = {Specifying Test Cases for Object-Oriented Software},
  booktitle = {Essays on object-oriented software engineering},
  year = {1993},
  editor = {Berard, Edward V.},
  volume = {1},
  pages = {271 - 284},
  address = {Upper Saddle River, NJ, USA},
  publisher = {Prentice-Hall, Inc},
  __markedentry = {[FunThomas424242:6]},
  doi = {http://dx.doi.org/10.1016/0950-5849(94)90013-2},
  groups = {public},
  interhash = {9fbdd241b7a4657724d28e3f276a7f25},
  intrahash = {3d16dc79719f22a45a08e40d93be4ae3},
  isbn = {0 13 288895 5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bien2008,
  author = {Bien, Adam},
  title = {Services und Objekte mit Java EE 5/6},
  journal = {Java Spektrum},
  year = {2008},
  volume = {1},
  pages = {8 - 12},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Artikel welcher grundsätzliche Hilfen bei Designentscheidungen
	im SOA Umfeld mit Java EE liefert.},
  groups = {public},
  interhash = {047498e566149749e5515e0fbeac77b6},
  intrahash = {b463db962235ce3e4e573346b7f29bec},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bien2007,
  author = {Bien, Adam},
  title = {Communication Breakdown},
  journal = {Java Magazin},
  year = {2007},
  volume = {4},
  pages = {22},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Übersicht über den Sinn der Realisierung von Services im Rahmen
	von SOA. Wann macht es Sinn auf SOA zu setzen. Als gleichberechtigte
	SOA Protokolle werden CORBA, ESB, BPEL, SOAP aufgeführt.},
  groups = {public},
  interhash = {24b9c8cd2c97924f8741cc87fbc30f67},
  intrahash = {bc38229c96e9610fe29e0b348c824649},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:39}
}

@ARTICLE{Bien2007a,
  author = {Bien, Adam},
  title = {Ja welcher Client denn nun?},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {35},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Hervorragende und sehr guter Überblick über die in Mode gekommenen
	Begriffe für Java Clients und welche Probleme sie hatten. + Thin-Client
	+ Rich-Client + Zero-AdministrationsClient + Ultra Thin Client +
	Fat Client},
  groups = {public},
  interhash = {c2e7298e1c9f83fc5407c422c1bcd596},
  intrahash = {8457f03d4b7674077d01266669a52c10},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:36}
}

@ARTICLE{Bien2003,
  author = {Bien, Adam},
  title = {Alte Muster - J2EE Patterns, Teil 3: Patterns der Präsentationsschicht},
  journal = {Java Magazin},
  year = {2003},
  volume = {1},
  pages = {52 - 58},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {03a33dfd015de8f0897aea0cf6ad246d},
  intrahash = {53cea144d62699fb6da9542f208d766b},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Bleic2007,
  author = {Bleich, Holger},
  title = {Abgekocht},
  journal = {c't},
  year = {2007},
  volume = {14},
  pages = {80 - 81},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Das Ehepaar Marion und Folkert Knieper aus Wahrenholz betreiben eine
	Rezeptsammlung Marions-Kochbuch.de. Dort wurde anfangs auch ein Forum
	angeboten, aus dem entnehmen die Kniepers ungefragt und ungeniert
	Rezepte. Sie bebildern ihr Portal und verklagen jeden der Bilder
	in seinem Portal hält die evtl. von den Kniepers stammen. Angeblich
	können die Kniepers zu jedem Bild ein Original in höherer Auflösung
	vorweisen - das konnte so nicht bestätigt werden. Die Kniepers regen
	sich über andere "Klauer" auf und verklagen diese wegen kleinere
	Verstöße scheinen sich selber aber kräftig bei anderen zu bedienen.
	Wer kann sollte die Kniepers verklagen. Gute Bilder für Rezepte erhält
	man auf: www.flickr.com ww.sxc.hu Aber immer auf die Lizens achten
	- nur einige sind kostenfrei.},
  groups = {public},
  interhash = {47e97c7375d336cf5de152cacaf6fde5},
  intrahash = {0fdd101828b554adc5fa31b91827b7ce},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:33}
}

@ARTICLE{BleulL1998,
  author = {Bleul, Andreas and Loviscach, Dr. Jörn},
  title = {Programmieren nach Plan - Software Engineering bändigt Entwicklungsprojekte},
  journal = {c't},
  year = {1998},
  volume = {19},
  pages = {166 - 172},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Versuch der Beschreibung von Lösungen aus der Softwarekrise. Es werden
	ziemlich trockene Dinge wie ISO9001 und CMM Level 1-5. Ist bestimmt
	mal interessant genau zu lesen und vermutlich stellt sich dann heraus
	das es in Richtung ITIL geht, aber ob sich der Aufwand lohnt?},
  groups = {public},
  interhash = {087d5676c546552c91543ebedc4a5180},
  intrahash = {f7f4d54133ae08fca34a2b5bb705d6d5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:31}
}

@ARTICLE{Bosch2005,
  author = {Bosch, Andy},
  title = {"Maven" Professionelles Software-Projektmanagement},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {1},
  pages = {28 - 31},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in Maven.},
  groups = {public},
  interhash = {39d77efa46f9c5b2403dbea831493035},
  intrahash = {575c8f0d42319f48e9223f0843628db8},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{bosch2010,
  author = {Bosch, Tobias},
  title = {Rich Clients - In oder out?},
  journal = {Java Spektrum},
  year = {2010},
  pages = {8 - 10},
  number = {6},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {c2f8bfd0b962fe07fe671c458ee52efb},
  intrahash = {e6f1f74c6ad323cca22d0db83859c7de},
  keywords = {ria, richclient},
  owner = {funthomas424242},
  timestamp = {2011-03-13 16:24:50}
}

@ARTICLE{BoettcF2006,
  author = {Böttcher, Ulrike and Frischalowski, Dirk},
  title = {Der Konfigurator},
  journal = {Java Magazin},
  year = {2006},
  volume = {1},
  pages = {31 - 33},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Tutorial in das Preferences API von Java 5},
  groups = {public},
  interhash = {983b3b5c0d41cd2d3c579b8ef45e5336},
  intrahash = {01c88e47aa08a898d064a2e78f784487},
  keywords = {java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{BoettcF2005,
  author = {Böttcher, Ulrike and Frischalowski, Dirk},
  title = {The easy way},
  journal = {Java Magazin},
  year = {2005},
  volume = {8},
  pages = {33 - 36},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Formatierte Ausgaben mit der Klasse Formatter.},
  groups = {public},
  interhash = {c900b6573dea7b371bbf094b291e849e},
  intrahash = {de598ed3905141ccee5a7c9cfba6a1d5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Boettg2007,
  author = {Böttger, Christian},
  title = {Gruppenweise - Enterprise taugliche Linux Groupware Lösungen},
  journal = {iX},
  year = {2007},
  volume = {4},
  pages = {58 - 63},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Übersicht über einige freie Groupwaretools. Kolab, OpenGroupware.org,
	Open-Xchange, Zarafa detached IMAP Folder Standardprotokolle Sieve
	E-Mail Krypto-Lösung Ägypten-2 Sphinx (V-PKI) OpenPKG HotSync Protokoll
	Projekt Container Aufgaben, Dokumente, Notizen Arbeitszeiterfassung
	Serienbrieffunktion Unterscheidung zwischen Firmen und Personen mehrere
	Standorte für Firmen Forum, Pinnwand Wissensdatenbank SyncML MAPI
	Colamo.org (Java)},
  groups = {public},
  interhash = {1f06962bc59623edb0351881ed6c1fb4},
  intrahash = {731d1adef7fd2bc77f167c75481edd06},
  keywords = {Groupware},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:21}
}

@ARTICLE{BoettgG2007,
  author = {Böttger, Christian and Geisbauer, Jan},
  title = {Viergestirn - Collaboration - Lösungen für große Umgebungen},
  journal = {iX},
  year = {2007},
  volume = {4},
  pages = {50 - 56},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr guter Überblick über die Leistungsfähigkeit der einzelnen Groupwaresysteme.
	Die einzelnen Features werden sehr detailiert beschrieben und verglichen.
	Wünschenswerte Feature für Groupware sind: + Client Server Architektur
	um Skalierbarkeit sicherzustellen + Der Server sollte folgende Standardprotokollen
	unterstützen: MAPI, HTTP, IMAP, NNTP, POP3, S/MIME, GnuPG, PGP, SmartCards,
	LDAP, ADS, NT-Domainen, NIS/NIS+, Novell eDirectory, Radius, TACACS,
	+ Es sollten mehrere Anschriften pro Kontakt unterstützt werden +
	Eine Trennung zwischen Firma und Person sollte möglich sein um eine
	Person mehreren Firmen zuweisen zu können + Mehrere Standorte (Filialen)
	für Firmen + Die Standard Fat-Clients sollten unterstüzt werden z.B.:
	Outlook, Evolution, + Unterstützung für Single Sign On + Unterstützung
	für Zeitzonen + Zugriff per Webclient + Personen sollen Projektgruppen
	zugeordnet werden können + Für Dokumente soll ein Review Workflow
	nutzbar sein + Versionierung muss bereitgestellt werden (für alle
	Daten) + Aufgabenverteilung an andere Personen muss möglich sein
	sowie die Beobachtung des aktuellen Bearbeitungsstatus + Suchfunktion
	über alle Daten + Backupmöglichkeit + Exportmöglichkeit + Datenaustausch
	mit PIM Endgeräten + Abwesenheitsnotiz getrennt nach extern und intern
	+ Abwesenheitsnotiz optional mit automatischem Ende + Zuordnung der
	Daten zu Kategorien (auch hierachich und je Datum N Kategorien) +
	Bereitstellung von Standardfunktionalität: Mail, Notizen, Kalender,
	Kontakte, Abwesenheit, Projektplanung, Zeiterfassung (Projekt), Shared
	Folder, CMS, Instant Messaging, Verschlüsselung, Dokumentmanagement,
	Workflow, Foren, Projektmanagement + Verschiedene Ansichen für Standardfunktionen,
	Monatsansicht,... + Gruppenkalender ermöglichen (mehrere Personen
	teilen einen Kalender) + Serienbriefe generierbar + Verwaltung von
	Bookmarks + Rechteverwaltung flexible und mit Unterstüzung externer
	Systeme wie LDAP, Kerberos, MAPI},
  groups = {public},
  interhash = {0af36405cf2d0c66202cd50fdc0db628},
  intrahash = {0acced89d84916b406bc3e94ba7b3613},
  keywords = {Groupware,, Office},
  owner = {funthomas424242},
  privnote = {Veglichene Programme: Exchange, Lotus Notes, Groupwise, Scalix},
  timestamp = {2010-09-12 18:13:15}
}

@BOOK{2005hs-bay-mathe7,
  title = {Hauptschule Bayern - Lernstufen Mathematik 7},
  publisher = {Cornelsen},
  year = {2005},
  author = {Braunmiller, Walter and Fischer, Reinhard and Friedl, Max and Geldermann,
	Heinrich and Leppig, Manfred and Müller, Thomas and Paczulla, Manfred
	and Reinelt, Alfred and Spiering, Helmut and Thöne, Karl-Heinz and
	Vollenbröker, Godehard and Warthorst, Alfred and Weber, Heidrun and
	Wöckel, Helmut},
  address = {Berlin},
  edition = {1},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {dc5df7db6ad837703dc877102d19cadc},
  intrahash = {c7fe59b4f1eced882e6cd9987c815c4f},
  isbn = {3-464-52017-X},
  keywords = {bayern, hauptschule, klasse7, mathematik},
  owner = {funthomas424242},
  timestamp = {2011-02-20 20:45:10}
}

@BOOK{BurkeC2003,
  title = {Java Extreme Programming Cookbook},
  publisher = {O'Reilly},
  year = {2003},
  editor = {Loukides, Mike},
  author = {Burke, Erik M. and Coyner, Brian M.},
  month = {Mar},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {6e2916477ba032fd185ecad97e7bddb6},
  intrahash = {3c92c03e59138943bb1ab1d7da259704},
  isbn = {0-596-00387-0},
  keywords = {technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Burkh2005,
  author = {Burkhardt, Detlef},
  title = {Pre-Warp - Deklarative Modellierung mit UML Graph},
  journal = {Java Magazin},
  year = {2005},
  volume = {3},
  pages = {99 - 101},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel befasst sich mit der Annotierung von Java Quelltexten
	um über die Annotierung eine Verbindung zum UML Modell zu bekommen
	(vgl. EMF und Gef). Hier werden folgende Werkzeuge eingesetzt: +
	UMLGraph 2.10 + GraphViz (für Klassendiagramme) + Plot-Util (für
	Sequenzdiagramme) Scheint alles proprietär zu sein - habs aber nicht
	geprüft.},
  groups = {public},
  interhash = {2848706163cf964bed7ba80769f20182},
  intrahash = {0142b49640338babb5b4f3bfc3c12bd8},
  keywords = {UML},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:27}
}

@ARTICLE{clarke1986,
  author = {Clarke, E. M. and Emerson, E. A. and Sistla, A. P.},
  title = {Automatic verification of finite-state concurrent systems using temporal
	logic specifications},
  journal = {ACM Transactions on Programming Languages and Systems},
  year = {1986},
  pages = {244--263},
  number = {8},
  month = {April},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {3067d5db124a5724071cca621e27c80e},
  intrahash = {8498d24f78dbc97e3cf8e02381146480},
  keywords = {concurrent-systems, finite, state-machine},
  owner = {funthomas424242},
  timestamp = {2011-03-26 17:13:14},
  url = {http://www.google.de/url?sa=t&source=web&cd=1&sqi=2&ved=0CCAQFjAA&url=http%3A%2F%2Fciteseer.ist.psu.edu%2Fviewdoc%2Fdownload%3Bjsessionid%3DFB185DD1016753E8A8C641FB94C432C3%3Fdoi%3D10.1.1.92.9102%26rep%3Drep1%26type%3Dpdf&rct=j&q=e.m.%20clark%20automatic%20verification%20of%20finite%20state&ei=TA-OTbykOc3Lswa9wrSACg&usg=AFQjCNGNiAYcj0HthnaeMlNPds1_UBcp6g&sig2=lHSPxKl8DgQK5RjS2QyUzg&cad=rja}
}

@ARTICLE{Col2011,
  author = {Coldewey, Jens},
  title = {Das agile Manifest},
  journal = {ObjektSpektrum},
  year = {2011},
  volume = {02},
  pages = {16 - 18},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Author stellt in dem Artikel noch einmal explizit die 3 Teilung
	der Agilen Vorgehensweisen dar. 1) Die Werte  2) Die Prinzipien 3)
	Die konkreten Praktiken (eingesetzte Methoden: Scrum, XP, ...)  Sehr
	guter Artikel zum Grundverständnis des agilen Manifestes.},
  groups = {public},
  interhash = {67ba3c810f8fd93d26c40f98a92cf73e},
  intrahash = {e721c8281c13ccd1b4ee39368c8a1b4b},
  keywords = {jabref:noKeywordAssigned},
  owner = {funthomas424242},
  timestamp = {2011-10-08 12:32:56}
}

@MISC{Corne1999,
  author = {Cornelsen, Berlin},
  title = {Zeitalter der Industrialisierung},
  howpublished = {CD},
  year = {1999},
  note = {Windows 95, Mac OS 7.5.3},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {38400fd05bf3686f1bc059949671f355},
  intrahash = {30c208994ab2520d9ce5619d59ced75e},
  isbn = {3-464-90949-2},
  keywords = {Historie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Falk2006,
  author = {Costa, Alessandro and Hartmann, Falk},
  title = {Lesen und Schreiben von XML Dokumenten mit dem Streaming API for
	XML (StAX)},
  journal = {Java Magazin},
  year = {2006},
  volume = {7},
  pages = {61 - 64},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Praktische Einführung in StAX - sehr gut gelungen. StAX - ist Nachfolger
	von SAX und DOM. Nachteile von SAX - komplexes Event Handling, Zustand
	zwischen Events muss sich gemerkt werden Nachteile von DOM - große
	Dokumente passen nicht in den Speicher weil alles mit einmal gelesen
	wird StAX - JSR173 Während SAX eine Parser Implementierung im klassischen
	Push Verfahren darstellt ist StAX im Pull Verfahren realisiert. Pull
	- wir holen uns das nächste erkannte Teilstück des Dokuments. 4 wichtige
	Klassen: XMLStreamReader/Writer, XMLEventReader/Writer XML Wohlgeformtheit
	kann geprüft werden muss aber nicht Filtermechanismen möglich (nur
	Attribute Events). Grobe Source Struktur XMLInputFactory inputFactory=XMLInputFactory.newInstance();
	// Instream = new InputStream( *.xml); XMLEventReader reader=inputFactory.createXMLEventReader(
	instream ); while( reader.hasNext){ event = reader.nextElement();
	if( event.isStartElement() ){ // öffnendes Tag gefunden } }},
  groups = {public},
  interhash = {2325167fa27435701297f15fbe2ff49b},
  intrahash = {92062190c0a9b6527dbd2a0e6cb6d534},
  keywords = {java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:11}
}

@ARTICLE{Demol2008,
  author = {Demolsky, Markus},
  title = {Mule - Open Source ESB},
  journal = {Java Magazin},
  year = {2008},
  volume = {5},
  pages = {80 - 86},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Relative viel Beschreibung über ein Haufen Umstände um per SOA eine
	Nachricht von einen Ort zum anderen zu bringen. Der Sinn erschliesst
	sich vermutlich erst wenn man mehr Grundlagen zu SOA kennt. Es wird
	ein einführender Artikel erwähnt: "Enterprise Service Bus. Grundlagen
	und Konzepte eines ESB" im Java Magazin 4/2008, S97-100},
  groups = {public},
  interhash = {7e777476eeb7867fde98c834dbfea703},
  intrahash = {df3ed0dd702dbcf566b631cd1beffcc7},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:06}
}

@ARTICLE{Dewanto2009,
  author = {Dewanto, Dr. Lofi and Kamann, Thorsten},
  title = {Viele Köche verderben (nicht) den Brei},
  journal = {Java Magazin},
  year = {2009},
  volume = {8},
  pages = {24 - 28},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel stellt Spring DM als Lösung für OSGI im Applikationserver
	- speziell im WAR File vor. Scheint recht einfach zu sein. Natürlich
	ein Haufen Konfiguration aber laut Artikel einfacher als bei Equinox.
	Großer Vorteil keine Verpflechtung der Anwendung mit dem OSGI Provider,
	da alles über Injection gelöst ist.},
  groups = {public},
  interhash = {3f0ae5933f09680d049e7ec8d7897048},
  intrahash = {46773ef7516dbc44ecbb28f2136cf841},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Dick2010,
  author = {Dick, Alexander},
  title = {REST Services mit Spring 3.0},
  journal = {Java Magazin},
  year = {2010},
  volume = {6},
  pages = {61 - 63},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel befasst sich mit der Implementierung von Restfull Services.
	Es gibt ein Eclipse Projekt dazu - dort sind die technischen Dinge
	nachzuschauen. Im Artikel werden nur Details erklärt. Ohne das Eclipse
	Projekt kann die Funktionsweise nicht nachvollzogen werden.},
  groups = {public},
  interhash = {9b2ca9784ddc998a36a5975daace6285},
  intrahash = {7eb39c8d7078ca095a155d3e1d0eb550},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Diedr2003,
  author = {Diedrich, Dr. Oliver},
  title = {Unterbau - Handreichungen zur Linux-Systemkonfiguration},
  journal = {c't},
  year = {2003},
  volume = {17},
  pages = {188 - 193},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das Linux Betriebssystem. Es werden typische
	Mechanismen der Konfiguration vom Booten bis zum Betrieb erklärt.
	Welche Konfigurationsdateien werden in welcher Reihenfolgen angezogen
	- allgemein und ein paar spezielle Fälle. Die Bedeutung der Runlevel
	und vom init.d werden ebenfalls erklärt.},
  groups = {public},
  interhash = {9f4b80359ee933b373ef8480ac689d3d},
  intrahash = {50263c7e0300c9716279831f804eebb2},
  keywords = {Betriebsysteme, Linux},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:13:01}
}

@ARTICLE{dittmann2009,
  author = {Dittmann, Holger Thorsten},
  title = {Offene Kür - Open-Source ERP-Systeme im Vergleich},
  journal = {Java Magazin},
  year = {2009},
  volume = {7},
  pages = {66 - 71},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurzer aber interessanter Vergleich folgender ERP Systeme:adempiere,
	apacheOFBiz, compiere, openERP, openbravo, tryton.Am zukunftsträchtigsten
	erscheinen nach dem Lesen ADempiere und OFBiz.Die Probleme der Systeme
	und ihrer Community sieht der Autor in den hohen fachlichen Anforderungen.
	Hier werden auch fachliche Wissensträger benötigt. Die Lokalisierung
	eines ERP Systems heisst nicht nur Dialoge in Landessprache übersetzen
	sondern viel mehr noch fachliche Funktionen an die landesspezifischen
	Gegebenheiten und Gesetze anzupassen. Für die kommerziellen Anbieter
	scheint ein weiteres Problem das Anbieten qualitativ hochwertiger,
	kostenloser Foren für die Community Editions zu sein. Möglicherweise
	will man so seinen kommerziellen Support bzw. Systemerweiterungen
	an den Käufer bringen.},
  comment = {},
  groups = {public},
  interhash = {8bbf135d1a8a4e8c3ec6c8f9d7e8b37f},
  intrahash = {8f95f6ff95e8e81fab7ecec6603f22ca},
  keywords = {adempiere, apacheOFBiz, compiere, erp, open-source, openERP, openbravo,
	tryton},
  owner = {funthomas424242},
  timestamp = {2011-01-09 20:45:39}
}

@ARTICLE{DulfeI2006,
  author = {Dulfer, Christian and Iacono, Luigi Lo},
  title = {Professionelle GUIS - mit JGoddies Forms},
  journal = {Java Magazin},
  year = {2006},
  volume = {12},
  pages = {90 - 93},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung in JGoodies JGoodies sind für Weboberflächen das
	was TeX für Textverarbeitung ist. JGoodies liefern Look & Feel und
	FormLayout Manager. http://jgoodies.dev.java.net http://abeille.dev.java.net},
  groups = {public},
  interhash = {87b091ba01c0f7c4887f394ea8d205dc},
  intrahash = {b873b87e2f67720e453dfe81ddc87904},
  keywords = {technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:21}
}

@ARTICLE{EhrigET2005,
  author = {Ehrig, Karsten and Ermel, Claudia and Taentzer, Gabriele},
  title = {Erstellung eines grafischen Editor Plugin Ins mit Eclipse EMF und
	GEF},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {2},
  pages = {31-34},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Benutzung von EMF und GEF zum Bau eines
	Editors.  Die Grundlagen erkennt der Leser ein einem gut durchdachten
	Beispiel, dafür werden sie auch nicht so ausführlich erläutert. 
	Im Beispiel wird ein Petri-Netz Editor gebaut, der auch ohne grosse
	Vorkenntnisse erfolgreich nachgebaut werden kann.  Das Beispiel kann
	von folgender URL heruntergeladen werden:  tfs.cs.tu-berlin.de/petrieditor},
  citeseerurl = {http://www.objektspektrum.de},
  groups = {public},
  interhash = {ce078d77e931b927f26bc59b64eaa6cd},
  intrahash = {719945a780cff26a67da0b65d4a0418a},
  keywords = {java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://fts.cs.tu-berlin.de/petrieditor}
}

@ARTICLE{Eierle1998,
  author = {Eierle, Manfred},
  title = {Das Testen vielschichtiger Java-Anwendungen},
  journal = {Java Spektrum},
  year = {1998},
  volume = {5},
  pages = {34 - 37},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurz Einführung in das Theme zum Test von Java Anwendungen.},
  groups = {public},
  interhash = {64197c751b9084f655cfc9e4c41cc19d},
  intrahash = {71b0f750178ed8c24ee8a34e8bf501d4},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{elinson2010,
  author = {Elinson, Stanislav and Hanns, Matthias and Kronseder, Simon},
  title = {Für die Sprachenvielfalt - Xtext 1.0: Tiefere Integration in Eclipse},
  journal = {Java Magazin},
  year = {2010},
  pages = {76 - 78},
  number = {10},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Übersicht über die aktuellen Veränderungen in der Xtext
	Implementierung. Es wird gezeigt was neu ist und erklärt warum bzw.
	was die Vorteile sind.},
  comment = {},
  groups = {public},
  interhash = {684248f681aee0405c0eaded350bd404},
  intrahash = {fc3d361f7e4391c7d8feaae7b08f8814},
  keywords = {eclipse, generierung, java, mda, mdd, xtext},
  owner = {funthomas424242},
  privnote = {Ein Vergleich zu emftext wäre gut.},
  timestamp = {2011-08-19 07:52:53}
}

@ARTICLE{Endre2007,
  author = {Endres, Johannes},
  title = {In Nachbars Netz},
  journal = {c't},
  year = {2007},
  volume = {16},
  pages = {162 - 164},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es wird erklärt das durch die Fehlkonfiguration der Switches beim
	ADSL Provider Pakete über Broadcast in verschiedene Subnetze (Kunden)
	gelangen können. Damit ist ein anderer Kunde direkt in meinem Netzwerk
	und kann mich von innen her angreifen. Ein Nebeneffekt ist, dass
	auch die entsprechende IP Adressen nicht mehr Beweistauglich sind
	(S.164) - leider wird es noch einige Zeit benötigen den Gerichten
	dies zu erklären.},
  groups = {public},
  interhash = {91596159cb7005c1d34ed74ad29b766b},
  intrahash = {cbdad669bf609c59638bbeb96782c8d1},
  keywords = {ADSL, Probleme, Provider},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:19}
}

@ARTICLE{Endre2001,
  author = {Endres, Jörg},
  title = {Das Java Projekt - Professionelle Projektierung einer Java Application
	(Teil 1)},
  journal = {Java Magazin},
  year = {2001},
  volume = {5},
  pages = {22 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Meiner Meinung spricht der Author von der Java Projektierung wie der
	Blinde von der Farbe. Der Author meint Java Projekte sollten in UML
	modelliert werden, die Hauptfunktionen sollten in einem Haupt Package
	abgelegt werden und die Schnittstellen zu anderen Programmen sollten
	in Nebenpackages liegen. Das Haupt Package sollte Referenzen auf
	die Neben Package enthalten andersherum aber nicht. Er bevorzugt
	eine Access Datenbank über ODBC Anbindung und hält das im ersten
	Teil alles für die Grundlagen der professionellen Projektierung.
	Ich denke der Mann ist ein alter Hase in C und hat sein Java Wissen
	aus Büchern und ist gerade mit seinem ersten Java Projekt befasst
	bzw. hat dieses gerade hinter sich. Sollte ich mich irren dann würde
	ich gern wissen weshalb kein Wort darüber verloren wird welche Probleme
	die ODBC Anbindung von Access macht (Primärschlüssel, Mapping der
	Namen und dadurch hervorgerufene Konflikte). Ausserdem sollte man
	wissen das es bis heute nicht möglich ist ein Java Projekt vollständig
	in UML zu beschreiben - demnach ging das im Jahre 2001 schon gar
	nicht, da damals nicht mal brauchbare UML Tools zur Verfügung standen.
	Der Author beschränkt sich auch auf Klassendiagramme und verwaltet
	von diesen dann pro Package ein Klassendiagramm. Die Grundideen sind
	meiner Meinung nach alle richtig. Aber mit der Praxis hat das nichts
	zu tun - oder ich hab nur in schlechten Projekten gearbeitet. Letzlich
	befasst sich den der Artikel auch größtenteils mit der Implementierung
	statt mit den Konzepten und Vorgehensweisen bzw. dem Engineering.},
  groups = {public},
  interhash = {b67d786ca944a9a32625a77034ea77a8},
  intrahash = {b1d5e3d8620ae15e1447dcd89f3cbf34},
  keywords = {java},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:19}
}

@ARTICLE{EversRN2004,
  author = {Eversmann, Andre and Reus, Ulrich and Nüßer, Willi},
  title = {Die Suche nach der verlorenen Quelle},
  journal = {Java Magazin},
  year = {2004},
  volume = {9},
  pages = {86 - 88},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt eine Software welcher ein Google API nutzt
	um vorgegebene Textstellen im Internet zu finden und damit mögliche
	Plagiate aufzudecken.},
  groups = {public},
  interhash = {6ff1742f4ea1b2b3b1d2ea9889c495a5},
  intrahash = {045f36bdd40f45c52c57b838c3092ede},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://it-republik.de/jaxenter/artikel/Die-Suche-nach-der-verlorenen-Quelle-0609.html?save=1&error=1#commentForm}
}

@ARTICLE{Fisch2010,
  author = {Fischer, Oliver},
  title = {Bitte berühr mich ... Jetzt!},
  journal = {Java Magazin},
  year = {2010},
  volume = {10},
  pages = {31 - 36},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {0e566a28e3e143a0254024b40bedbfb3},
  intrahash = {0fbef0fd6a5363b13268f6d1b879d09e},
  keywords = {java, multi-touch},
  owner = {funthomas424242},
  privnote = {bestimmt mal interessant zu lesen},
  timestamp = {2010-10-08 15:32:47}
}

@ARTICLE{Fleis2008,
  author = {Fleischer, André},
  title = {Ist Qualität messbar?},
  journal = {Java Magazin},
  year = {2008},
  volume = {5},
  pages = {99 - 104},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine sehr gute Einführung in die Grundbegriffe zur technischen Qualitätssicherung
	am marginalen Beispiel von XRadar. Der Artikel geht von 2 Teilen
	der Qualitätssicherung zu einem Programm aus, der fachlichen und
	der technischen Qualität. Die fachliche Qualität (auch äußere Qualität)
	wird schon durch diverse bekannte Testmethoden sichergestellt, zur
	technischen Qualität (auch innere Qualität) gibt es noch nicht so
	viele bekannte Verfahren. Bei der fachlichen Qualität geht es um
	die korrekte Umsetzung der Anforderungen nach Maßgabe des Benutzers.
	Bei der technischen Qualität geht es um die korrekte Umsetzung der
	Programmierrichtlinien und der Sicherstellung bestimmter, technischer
	Eigenschaften der Software: + Anpassbarkeit + Erweiterbarkeit + Modifizierbarkeit
	+ Wiederverwendbarkeit + Verständlichkeit + Testbarkeit + Modularisierbarkeit
	weitere Kriterien: + Installierbarkeit + Benutzbarkeit + Effizienz
	+ Skalierbarkeit + Performance, Quality of Service + Portierbarkeit
	+ Security und Safety + Dokumentation + Konfigurierbarkeit + Konsistenz
	+ Kompatibilität + Robustheit + Administrierbarkeit + Interoperabilität
	+ Herstellerunabhängigkeit + Einheitlichkeit, Design und Implementierung
	Der Artikel enthält hervorragende Erklärungen zu den einzelnen Metriken
	auf dem Gebiet der technischen Qualitätssicherung und erklärt welche
	Schlüsse aus diesen Metriken zu ziehen sind. Behandelt werden. Quantitätsmetriken:
	+ LOC (Lines of Code) + DOC (Zeilen -Inline-Dokumentation + NCSS
	(Non Commenting Source Statements) + CCN (Cyclomatic Complexity Number)
	Objektmetriken + Ca (afferent Coupling) + Ce (efferent Coupling)
	+ I (Instability) + A (Abstractness) + WMC (Weighted Methods per
	Class) + PtDIT (Depth of Inheritance Tree) + NOC (Number Of Children)
	+ CBO (Coupling Between Object Classes) + PtRFC (Response For a Class)
	+ LCOM (Lack of Cohesion in Methods) + ACD (Average Component Dependency)
	Analysemetriken + DRY (Don't Repeat Yourself) + FRE (Freshness) +
	STY (Styleness) Nach Erläuterung all dieser Metriken wird in einem
	kurzen Absatz auch noch auf XRadar eingegangen.},
  groups = {public},
  interhash = {8e37090a887c41798e51fcd383fea8f7},
  intrahash = {6540d44adc59230e73d8058ebdec4494},
  keywords = {SQS, XRadar},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:18}
}

@ARTICLE{FoehliHF2001,
  author = {Föhlich, Daniel and Hubert, Martin and Frey, Christian},
  title = {Java Data Objects (JDO) im Überblick},
  journal = {Java Spektrum},
  year = {2001},
  volume = {4},
  pages = {60 - 65},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in JDO auch hinsichtlich der Verwendung in Java
	EE.},
  groups = {public},
  interhash = {99b66e06225c01da77a94287735e662e},
  intrahash = {4832cfc4630b2e04360ec2f4a04718e9},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Fow1999,
  title = {Refactoring: Improving the Design of Existing Code},
  publisher = {Addison Wesley Professional},
  year = {1999},
  author = {Fowler, et al},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {f98a057d8ce58f4b29502e22bb75f641},
  intrahash = {6c10fec8d2cfeff9fa48a8be67d43bac},
  keywords = {refactoring},
  owner = {funthomas424242},
  timestamp = {2010-10-10 11:50:08}
}

@BOOK{Fowle1997,
  title = {UML Distilled},
  publisher = {Addison Wesley},
  year = {1997},
  author = {Fowler, Martin},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {aa8db69d340a8e5a1f7f6f90c6f03dbf},
  intrahash = {81565d959207d81c2d743a3cd9c4176c},
  isbn = {0-201-32563-2},
  keywords = {UML},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{FreemF2004,
  title = {Head First - Design Pattern},
  publisher = {O'Reilly},
  year = {2004},
  editor = {Loukides, Mike},
  author = {Freeman, Eric and Freeman, Elisabeth},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {7dae4e874e2f0b7c9ee0f0d9ee6aed2f},
  intrahash = {417a2fcd20ff366b4eb9c00138b7699d},
  isbn = {0-596-00712-4},
  keywords = {designpattern},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{FreiSW2005,
  author = {Frei, Marcus and Studer, Bruno and Wttwer, Roger},
  title = {MIDlets ganz easy - Mobile Anwendungen mit J2ME selbst entwickeln},
  journal = {Java Magazin},
  year = {2005},
  volume = {4},
  pages = {68 - 77},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Detaillierter Artikel zur Implementierung vom Java Anwendungen für
	Mobile Geräte.},
  groups = {public},
  interhash = {94f62d0888450698989540055583e1c4},
  intrahash = {dd04ac8ebecbb36867302c00e5ea2383},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Freyt1997,
  author = {Freytag, Asmus},
  title = {Zeichen setzen - Teil 2: Unicode in der Praxis},
  journal = {c't},
  year = {1997},
  volume = {14},
  pages = {178 - 182},
  __markedentry = {[FunThomas424242:6]},
  abstract = {2. Teil einer sehr guten Einführung in den Unicode. Teil 1 erschien
	im Heft 13 der c't von 1997 auf Seite 254.},
  groups = {public},
  interhash = {ccb5a6206cb2f70fa6cccb896f8b7a66},
  intrahash = {d3f8db7b2b136d3d1a198f07d3a840d5},
  keywords = {Encoding, Unicode},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:15}
}

@ARTICLE{Friese2006,
  author = {Friese, Peter},
  title = {EclipseNSIS - Plugin zur Entwicklung von Installationsprogrammen},
  journal = {Eclipse Magazin},
  year = {2006},
  volume = {6},
  pages = {56- 57},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in ein Plugin zum Schreiben von Installationsskripten für
	den Nullsoft Installer unter Windows. Für Unix Systeme wird ein anderer
	Installer benötigt.},
  groups = {public},
  interhash = {3872bed7e9bc70ff7cafa23ac2fa5a48},
  intrahash = {2fcf84f5791fb53bb396191f0d10ab7c},
  keywords = {Eclipse, NSIS, Plugin},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:15}
}

@ARTICLE{FritzM2000,
  author = {Fritzsche, Hartmut and Michel, Thomas},
  title = {Formalization and proof of design guidelines within the scope of
	testing formally specified electronic product catalogues},
  journal = {Interacting with Computers},
  year = {2000},
  volume = {12},
  pages = {209 - 223},
  number = {3},
  month = {jan},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Electronic product catalogues (EPCs) are a class of complex event
	driven multimedia information systems. A software engineering model
	was developed in the EPK-fix project to construct and test EPCs on
	the basis of formal specifications. With reference to the specification
	a whitebox-based test technology is supported by a test assistant.
	The dynamic analysis prerequisites the production of an interpretable
	dynamic model to simulate states and transitions of an EPC discretely.
	A test agent controls both the model and the EPC. Formal proof techniques
	are employed to detect violations against formalized design guidelines.
	Both formulation and formalization of design rules are demonstrated
	by example. A horn clause interpreter is used to prove the observance
	of design rules in state configurations of the EPC. Error detection
	by formal proofs enhances the test process.},
  comment = {},
  doi = {http://dx.doi.org/10.1016/S0953-5438(99)00012-0},
  groups = {public},
  interhash = {a4f5f221d4eeaf9943fc671cd863ff6e},
  intrahash = {cdc2133e8ad5c2336113896f137d2246},
  keywords = {EPKfix, epc, epk, myown, tassi, test},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Gam1994,
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  publisher = {Addison Wesley Professional},
  year = {1994},
  author = {Gamma, et al},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {8d65f87917d6797d6b4c2c69f2d38057},
  intrahash = {359fe9ab7305a76a67b2470859145ae6},
  keywords = {designpattern},
  owner = {funthomas424242},
  timestamp = {2010-10-10 11:48:14}
}

@BOOK{GammaHJV2001,
  title = {Design Patterns},
  publisher = {Addison Wesley},
  year = {2001},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides,
	John},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {34f2dce301d262b76c14e88e170cb35e},
  intrahash = {39e134a96e1c340dfca9479a9b27d9c9},
  isbn = {0201633612},
  keywords = {designpattern},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{GeierT2003,
  author = {Geier, Bernd and Twelmeier, Henning},
  title = {Griff über die Grenze},
  journal = {c't},
  year = {2003},
  volume = {16},
  pages = {184 -},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Informationen zum Verbraucherschutz. Deutsche Verbraucher können Schadenersatz,
	Garantie oder ähnliche Ansprüche problemlos einklagen sofern der
	Verkäufer in einem EU Land ansässig ist.},
  groups = {public},
  interhash = {cc4fa7f9f97259837e39e3f624c6bcf9},
  intrahash = {cba1d754a9dcadc7b7090c6d4fffb6d4},
  keywords = {Verbraucherschutz, Weltweit},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:13}
}

@ARTICLE{Glahn2001,
  author = {Glahn, Kay},
  title = {VM Anywhere - Virtuelle Java Maschinen auf fast jeder Plattform},
  journal = {Java Magazin},
  year = {2001},
  volume = {5},
  pages = {35 - 45},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Wunderschöne und detailreicher Überblick über die verschiedenen im
	Jahr 2001 auf dem Markt existierenden VMs. Zu fast jeder VM werden
	die markanten Neuerungen aufgeführt (JIT, JNDI, Swing, Realtime,...).
	Herrliche Nostalgie wenn man sich daran zurückerinnert wie schwierig
	es damals war als keine brauchbare IDE (vor Eclipse) zur Verfügung
	stand und jedes halbe Jahr eine neue VM auf dem Markt erschien. Man
	kam vor lauter evaluieren gar nicht mehr zur eigentlichen Arbeit
	;-) An dem Artikel kann man auch nochmal nachvollziehen wie verwöhnt
	man vom Java 5 wird.},
  groups = {public},
  interhash = {b20f235fb409cc1bbad584d7307128b2},
  intrahash = {a92033843b6b90bd0ae1aebb77bb52e7},
  keywords = {java, jvm, plattform},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:12}
}

@ARTICLE{Glahn2000,
  author = {Glahn, Kay},
  title = {Ein ganz neues Druckerlebnis - Drucken mit der neuen Java Print API
	des JDK 1.2},
  journal = {Java Magazin},
  year = {2000},
  volume = {3},
  pages = {33 - 40},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {b0c7b71c1ccf5a698dc503991a260276},
  intrahash = {cc9dbbce7d67bb07fdd830e51c200e65},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{GrafS2001,
  author = {Graf, Marko and Scholze, Matthias},
  title = {Gut abgeschnitten - Design und Implementierung von Schnittstellen},
  journal = {Java Magazin},
  year = {2001},
  volume = {5},
  pages = {26 -34},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {9611fd40c5878a3b9b01e7ea8316cced},
  intrahash = {ac6487174e4b3275ec93b6e6b7df858e},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@INCOLLECTION{kersten90,
  author = {Gramlich, Bernhard and Avenhaus, Jürgen},
  title = {Formal Specification and Verification of Equationally Defined Functional
	Programs with {UNICOM}},
  booktitle = {Sichere Software},
  publisher = {Hüthig},
  year = {1990},
  editor = {Kersten, Heinrich},
  address = {Heidelberg},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {b7fa4b022b9111a4becc8e3d140250ad},
  intrahash = {b564342515699a2cee4a505a409ac608},
  keywords = {formal, sichere, software, specification, verification},
  owner = {funthomas424242},
  timestamp = {2011-02-26 23:53:35}
}

@ARTICLE{Grobm2008,
  author = {Grobmeier, Christian},
  title = {JSON und das goldene Vlies},
  journal = {Java Magazin},
  year = {2008},
  volume = {7},
  pages = {75 - 80},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurzes Plädoyer für den Einsatz proprietärer Textsprachen an der Stelle
	von XML. Der Kunde sei zu sprunghaft in seinen Ideen dennoch sollte
	die Schnittstelle stabil bleiben (obgleich sie sich stark ändert).
	Der Gedanke ist nun die verwendete Sprache für die Schnittstelle
	einfach und primitiv zu halten, so dass die Konstrukte nicht geändert
	werden (keine Tags, kein XML Schema) sondern direkt die Schlüsselwörter
	verändert werden. Das Ganze wird als neue und super toll verkauft.
	Verschwiegend wird, dass wir von diesen Sprachen kamen und auf XML
	umstiegen unter anderen weil: + man bei nicht XML Sprachen je Sprache
	einen eigenen Parser benötigt + die Schnittstelle sich trotzdem ändert
	(diesmal semantisch) und entsprechende Dokumentation zu erstellen
	ist, welche sonst als XML Schema erstellt wäre + der Kunde sich vermutlich
	dumm und dämlich sucht wenn die Schnittstelle mal wieder zu ändern
	ist aber es nicht dokumentiert wurde Einfach ein schlechter Artikel.},
  groups = {public},
  interhash = {0c6bdc80265bc8c97764bd39fc7586b1},
  intrahash = {e105822af17ec2886c862bd95603aa1a},
  keywords = {java, json},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:50}
}

@ARTICLE{GE2010,
  author = {Groth, Jan and Eigenmann, Andreas},
  title = {Java EE 6 und Seam},
  journal = {Java Magazin},
  year = {2010},
  volume = {8},
  pages = {60 - 66},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Belangloser Artikel über den Einfluss von Seam auf Java EE 6 und über
	die Zukunft von Seam.},
  groups = {public},
  interhash = {0a18ef80285b3270ca7535e62de8ba75},
  intrahash = {9f63e5457ef5f61c0678fdebe4af926c},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{OMG2000,
  author = {Group, Object Management},
  title = {IDL To Java Language Mapping Specification},
  institution = {Object Management Group},
  year = {2000},
  month = {Jan.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {52aaf729fc7fc05f488a85cbe66eaee0},
  intrahash = {09cf4388f090cc17573790cfdf5a0067},
  keywords = {idl, java, specification, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://cgi.omg.org/cgi-bin/doc?ptc/2000-01-08}
}

@TECHREPORT{OMG1999,
  author = {Group, Object Management},
  title = {The Common Object Request Broker: Architecture and Specification
	(CORBA 2.3.1 specification)},
  institution = {Object Management Group},
  year = {1999},
  month = {Oct.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0d51f0b8d29e6133b5069f3ced114734},
  intrahash = {58f2749e500817e5783ccb382b48f295},
  keywords = {Corba, JavaEE, specification},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://cgi.omg.org/cgi-bin/doc?formal/99-10-07}
}

@ARTICLE{Haar2010,
  author = {Haar, Tobias},
  title = {Alleineigentum - Softwarepatente in Deutschland},
  journal = {iX},
  year = {2010},
  pages = {84 - 85},
  number = {9},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Nach dem kürzlich ergangenen Urteil des Bundesgerichtshofes rückt
	die Patentierbarkeit von Software in greifbare Nähe. Je nach Auslegung
	des Richterspruches lassen sich auch jetzt schon Softwarepatente
	genehmigen.Damit erfolgte ein Angleichung an EU und US Recht. Die
	zukünftige Praxis der Rechtssprechung wird zeigen inwieweit dies
	zu Softwarepatenten in Deutschland führt.},
  comment = {},
  groups = {public},
  interhash = {f1709678925090adc0cffb10f56c0b2a},
  intrahash = {4a4d7f6aac17bc84dbfa867f8397c4de},
  keywords = {recht, softwarepatente},
  owner = {funthomas424242},
  timestamp = {2011-07-03 23:41:14}
}

@ARTICLE{Haar2008,
  author = {Haar, Tobias},
  title = {Pflichtablieferung elektronischer Texte},
  journal = {iX},
  year = {2008},
  volume = {12},
  pages = {40},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Alle im Internet veröffentlichten Texte müssen als Kopie an die Nationalbibliothek
	abgeliefert werden. Ablieferungspflichtig ist, wer das Recht hat,
	das Medienwerk zu verbreiten oder zu veröffentlichen und seinen Sitz
	in in Deutschland hat.},
  comment = {},
  groups = {public},
  interhash = {3d69bffbd16a8a9e626444d9d050fdf4},
  intrahash = {ed74b1f58042c16f29b0a95d79a5d87c},
  keywords = {bibliografie, bibliothek, deutschland, internet, recht, texte},
  owner = {funthomas424242},
  timestamp = {2010-09-21 21:45:42}
}

@ARTICLE{Haar2008a,
  author = {Haar, Tobias},
  title = {E-Mails entsprechen verschlossenen Briefen},
  journal = {iX},
  year = {2008},
  volume = {12},
  pages = {40},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Unerlaubte Veröffentlichung von Inhalten aus E-Mails werden nach dem
	Landgericht Köln (Az. 28 O 157/08) als Verstoß gegen die Privatsphäre
	gewertet.},
  groups = {public},
  interhash = {03d07956f8000203abd3256254dadddf},
  intrahash = {881042dee16f8ac9aeb5a404ae475839},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Haar2008b,
  author = {Haar, Tobias},
  title = {Verkauf von Meldedaten ist erlaubt},
  journal = {iX},
  year = {2008},
  volume = {12},
  pages = {42},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Verkauf von Meldedaten ist ab jetzt erlaubt, auch ohne Nachweis
	eines berechtigten Interesses.},
  groups = {public},
  interhash = {b1011f739463fcdfc45de4bdac91791a},
  intrahash = {53fe9062db8080283ede5cbd7208b95d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Haar2007,
  author = {Haar, Tobias},
  title = {Klar getrennt - Einsatz von Open-Source-Komponenten},
  journal = {iX},
  year = {2007},
  volume = {6},
  pages = {120 - 121},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Insgesamt weiterhin beachten ob mischen erlaubt ist oder nicht.},
  groups = {public},
  interhash = {267a407da6691f661bd0f3e3f8f00f36},
  intrahash = {54ad3f3e3d35721e31c88553d5e083a2},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{haase2012stapelweise,
  author = {Haase, Arno},
  title = {Stapelweise Traits},
  journal = {Java Magazin},
  year = {2012},
  pages = {39-40},
  number = {8},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Im Artikel werden Traits der Sprache Scala genutzt um Quellkode besser
	zu modularisieren um dessen Lesbarkeit zu erhöhen. Der Autor zeigt
	wie mithilfe von Traits Mixins erstellt werden können die Methodenaufrufe
	bei Bedarf an die nächste innere Implementierung weiterleiten. },
  comment = {Als Java Entwickler kannte ich das Konzept der Traits nicht. Nun weiß
	ich, dass es in anderen Programmiersprachen jedoch ein allgemein
	bekanntes und oft eingesetztes Konzept zu sein scheint. Folgende
	Links halte ich in dem Fall für interessant:http://de.wikipedia.org/wiki/Trait_(Programmierung)http://de.wikipedia.org/wiki/Mixin
	},
  groups = {public},
  interhash = {e02e323dd1d8b9f6669f198ffafa50c5},
  intrahash = {a92375d511587617bffd9b264acac752},
  keywords = {konzept, mixin, scala, traits},
  owner = {funthomas424242},
  timestamp = {2012-10-13 15:54:04}
}

@ARTICLE{Haeder2007,
  author = {Häder, Paul},
  title = {Modularisierung von Crosscutting Concerns mit Closures - Closures
	im Querschnitt},
  journal = {Java Magazin},
  year = {2007},
  volume = {7},
  pages = {92-95},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Closures - ein funktionales Programmierkonstrukt, bekannt aus: + Common
	Lisp + Groovy + Haskell + Lua + ML + Perl + Ruby + Scala + Scheme
	+ Smalltalk Closures sollen per JSR einen Weg in Java 7 finden. Der
	Artikel zeigt wie im zukünftigen Java Querschnittsaspekte über Closures
	implementiert werden können. Es wird ein Vergleich zwischen Aspektorientierter
	Programmierung (AspektJ) und Closures am Beispiel der Messung von
	Methodenausführungszeiten vorgenommen. Definition von Closures: "Closures,
	die auf deutsch auch als Funktionsabschlüsse bezeichnet werden, sind
	laut Wikipedia 'ein semantisches Konzept, das eine Funktion zusammen
	mit einer Umgebung bezeichnet. Wenn aufgerufen, kann die Funktion
	Elemente der Umgebung referenzieren, die für ihre Berechnung notwendig
	sind'. Diese 'Elemente der Umgebung' sind zum Beispiel Variablen,
	die außerhalb der Closure definiert sind. Der strengen Definition
	nach müssen zudem auch andere Anweisungen in einer Closure dieselbe
	Bedeutung haben, als seien nur Teil des umgebenden Kontextes. Ein
	return sollte zum Beispiel von der umgebenden Methode zurückkehren,
	nicht nur von der Closure. Analog muss this (bzw. self, je nach Sprache)
	in einer Closure auf dasselbe Objekt zeigen, auf das es auch ausserhalb
	der Closure verweist, insbesondere jedoch nicht auf eine Art Funktionsobjekt."},
  groups = {public},
  interhash = {83a7e0bd8e38769c6564b01ee789467b},
  intrahash = {3d7864236252d9f8b2082274b9dc745b},
  keywords = {closures, crosscutting, querschnitt},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:26}
}

@ARTICLE{Haiges2003,
  author = {Haiges, Sven},
  title = {Jarkarta Struts - Framework für Web-Anwendungen: Einführung in Struts},
  journal = {Java Magazin},
  year = {2003},
  volume = {10},
  pages = {23 - 27},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {89a1d40e2d404c703147b2d44887415c},
  intrahash = {95c492f6ec250dd8c53f8d65af098587},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Haiges2003b,
  author = {Haiges, Sven},
  title = {Tools zum Verstreben - Kostenlose und kommerzielle Struts-Tools im
	Überblick},
  journal = {Java Magazin},
  year = {2003},
  volume = {10},
  pages = {31 - 33},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Adalon ist soll laut Artikel sehr gut sein. Meine Recherchen haben
	ergeben: Download einer freien Version (2.6) über http://www.adalon.net/downloads/adalonDownload_2x.jsp
	möglich},
  groups = {public},
  interhash = {eea566812095f525ff1c6c3edd5ffb5f},
  intrahash = {60f9480bfe0e61a12d9efe46a097ff33},
  keywords = {java, struts},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:46}
}

@ARTICLE{Haiges2003a,
  author = {Haiges, Sven and Marcel, May},
  title = {Modular, View, Controller - Die wichtigsten Neuerungen in Struts
	1.1 im Überblick},
  journal = {Java Magazin},
  year = {2003},
  volume = {10},
  pages = {28 - 30},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {f34aa376795db47bf887b45f5412a3ea},
  intrahash = {e5c74019d7f3bccb088a30a175801ac5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Hamm2005,
  author = {Hamm, Michael},
  title = {Funkentanz - PoE-fähige WLAN Access Points},
  journal = {iX},
  year = {2005},
  volume = {5},
  pages = {54 - 68},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Beitrag aus der Zeit als das WLAN auf den Markt kam. Es werden
	die ersten Geräte und die benutzten Standards beschrieben. Es wird
	sogar schon vom Protokoll 802.11i gesprochen - was glaube immernoch
	keiner unterstützt.},
  groups = {public},
  interhash = {b525e1cdfe9ba3186209cc7f04bc3aed},
  intrahash = {a65e6efa7c8a9f40fcd9645c914a2c44},
  keywords = {wlan},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:42}
}

@ARTICLE{Hamme2005,
  author = {Hammerstein, Oliver-Arne},
  title = {J2EE Classloading - Konzepte und Best Practices},
  journal = {Java Magazin},
  year = {2005},
  volume = {2},
  pages = {48 - 58},
  __markedentry = {[FunThomas424242:6]},
  abstract = {ungelesen Scheint aber eine sehr fundierte Einführung in die Konzepte
	der Classloader Problematik im J2EE Umfeld zu sein. Merker als Basis
	für meine Präsentation.},
  groups = {public},
  interhash = {40e9593af3831bcfe259ca9246b7233f},
  intrahash = {14497ee19c5b694f2aeb9c889fb22754},
  keywords = {J2EE},
  owner = {funthomas424242},
  timestamp = {2010-09-12 00:26:25}
}

@ARTICLE{Hawlitzek2001,
  author = {Hawlitzek, Florian},
  title = {Ready for Enterprise},
  journal = {Linux Magazin},
  year = {2001},
  volume = {7},
  pages = {41 - 45},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel gibt einen kurzen Überblick über die aktuell am Markt
	existierenden Applikationserver für Java. Folgende Server werden
	auch kurz verglichen: 1) iPlanet 2) Weblogic 3) WebSphere 4) iPortal
	5) Borland Application Server 6) Oracle Application Server 7) Silverstream
	Application Server},
  groups = {public},
  interhash = {809273e37239cf9697e51b3ce44de832},
  intrahash = {3baebd1fad690aa350c4dc61b6722d32},
  keywords = {borland, iplanet, silverstream, weblogic, websphere},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:41}
}

@ARTICLE{Heidemann2003,
  author = {Heidemann, Oliver and Wünsch, Torsten},
  title = {Action and Go... - Mit Struts 1.1 dynamische Eingabefelder erstellen},
  journal = {Java Magazin},
  year = {2003},
  volume = {10},
  pages = {34 - 37},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {b5f98b0d4d142275a4dfa60f238add20},
  intrahash = {7354d29653e7564a103f08cfce936e2d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Heidr2007,
  author = {Heidrich, Joerg},
  title = {Post modern - Neues Gesetz verlangt Pflichtangaben in E-Mails},
  journal = {c't},
  year = {2007},
  volume = {4},
  pages = {50},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Neues EU Recht ab 01.01.2007 in Kraft getreten. Ergänzung des Handelsgesetzbuches
	durch das EHUG: Im §125a Abs. 1 Satz 1 werden nach den Wörtern "Geschäftsbriefen
	der Gesellschaft" die Wörter "gleichviel in welcher Form" eingefügt.
	Damit wurde die Publizitätsrichtlinie aus dem Jahre 2003 mit Wirkung
	vom 01.01.2007 durch den deutschen Gesetzgeber ratifiziert. Dannach
	muß jede Art von Geschäftsdokument, welches eindeutig einem bestimmten
	Empfänger zugeordnet ist um Angaben über Unternehmensdetails aus
	dem Handelsregistereintrag ergänzt werden. Unter Geschäftsdokumente
	werden Rechnungen, Angebote, Auftragsbestätigungen, Bestell- und
	Lieferscheine sowie Quittungen verstanden. Nicht darunter verstanden
	wird Werbung jeglicher Art (Spam). "Welche Angaben sich nunmehr in
	elektronischen Nachrichten finden müssen, ist abhängig von der Unternehmensform
	des Versenders. Gewerbetreibende, für die keine Firma im Handelsregister
	eingetragen ist, müssen lediglich ihren Familiennamen mit mindestens
	einem ausgeschriebenen Vornamen angeben. Eine Gesellschaft mit beschränkter
	Haftung (GmbH) dagegen ist zu folgenden Angaben verpflichtet: die
	vollständige Unternehmensbezeichnung (Firma) in Übereinstimmung mit
	dem im Handelsregister eingetragenen Wortlaut, die Rechtsform der
	Gesellschaft, der Sitz der Gesellschaft, das Registergericht des
	Sitzes der Gesellschaft und die Handelsregisternummer. Nicht fehlen
	dürfen auch alle Geschäftsführer und deren Stellvertreter mit Familiennamen
	und mindestens einem ausgeschriebenen Vornamen. ... Dabei erscheint
	es bedenklich die Pflichtangaben in einen E-Mail Anhang auszulagern,
	weil nicht jeder Empfänger so einen Anhang problemlos öffnen kann."},
  groups = {public},
  interhash = {419c7bf89c2aef9aacf0dea6dba48d2c},
  intrahash = {18395b80815027cfc68ffabb8d27360d},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:40}
}

@ARTICLE{Heidr2005,
  author = {Heidrich, Joerg},
  title = {Illegale E-Mail-Filterung},
  journal = {c't},
  year = {2005},
  volume = {4},
  pages = {178},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt, dass das Ausfiltern von E-Mails gegen das
	Telekommunikationsgesetz verstößt falls die Betroffenen (Sender,
	Empfänger) nicht davon in Kenntnis gesetzt wurden. Das betrifft auch
	Unis. Im konkreten Fall hat ein ehemaliger Mitarbeiter Kontakt zu
	den Uni Kollegen halten wollen und die Uni hatte den Mailverkehr
	ausgefiltert ohne die Mitarbeiter darüber zu informieren.},
  groups = {public},
  interhash = {1c94ad3ac3846b48217ee6862bb7dc42},
  intrahash = {f0d414c207670e95b20ce4dc05768d77},
  keywords = {email, filter, recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:39}
}

@ARTICLE{Heinlein2007,
  author = {Heinlein, Peer},
  title = {Facharbeiten mit Verstand - Imap verstehen},
  journal = {Linux Magazin},
  year = {2007},
  volume = {6},
  pages = {32 - 35},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel biete eine kurze aber gute Einführung in das Imap Protokoll.},
  groups = {public},
  interhash = {4119a5d6aa86423639411c91ec8a0d3e},
  intrahash = {bd337b46efa98e829bffe4b766960d05},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{helfert2010,
  author = {Helfert, Bastian and Hohn, Steffen},
  title = {Stadtneurotiker Java-Code visualisieren},
  journal = {Java Magazin},
  year = {2010},
  volume = {10},
  pages = {86 - 90},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt sehr gut wie man mit der Software inFusion
	und CodeCity Schwächen in der Architektur von Programmen erkennen
	kann.Der Artikel geht dabei nicht auf die Benutzung oder Installation
	der Programme ein sondern erwähnt ohnehin nur CodeCity und erklärt
	nach welchen Regeln die Visualisierung erfolgt. Es wird detailliert
	auf die Disharmonien "God Class", "Data Class", "Brain Class", "Brain
	Method", "Feature Envy" und "Shotgun Surgery" eingegangen. Es wird
	ebenfalls klar herausgestellt, dass nicht die blose Existenz der
	Disharmonien zu monieren ist sondern es auf die Anzahl der betroffenen
	Klassen im Verhältnis zur Anzahl aller Klassen ankommt.In diversen
	kleinen Randkästen werden zusätzliche Hinweise gegeben - zum Beispiel
	zur Installation oder zu weiteren Konzepten.},
  comment = {Bei der Visualisierung bestimmt die Anzahl der Attribute einer Klasse
	die Größe der Grundfläche eines Gebäudes. Die Höhe des Gebäudes wird
	aus der Anzahl der Methoden einer Klasse abgeleitet. Der Grad der
	Blaufärbung der Gebäude ergibt sich aus den Lines of Code. Die Stadt
	selbst wird in Bezirke eingeteilt welche sich aus den Packages ergeben.Natürlich
	lässt sich aus der Visualisierung nicht ableiten was schlecht und
	was gut ist. Aber wenn die Programmierrichtlinien zu vielen kleinen
	Stadtteilen führen sollten und in der Visualisierung ein großer Stadtteil
	erscheint, weiss man da ist was schief gelaufen. Der große Vorteil
	dieser Methode liegt darin, dass ein manueller Kodereview oft viel
	zu lange dauern würde und man hinterher doch kaum verstanden hat
	was man alles gelesen hat. Die Visualisierung hingegen kann in kurzer
	Zeit erstellt werden. Extreme lassen sich dadurch schnell erkennen
	und gezielt prüfen - beispielsweise riesige Hochhäuser umgeben von
	wenigen kleinen. Auch die Historie kann mit ausgewertet werden. Gelöschte
	Methoden im SCM werden als Löcher dargestellt.},
  groups = {public},
  interhash = {e7a89bce0c3e48ea9eab33af3b49fa05},
  intrahash = {52b139f6cf28b3da641b79b201030d2c},
  keywords = {architecture, check, java, test},
  owner = {funthomas424242},
  privnote = {Interessante Konzepte die es zu lesen gilt:+ God Class+ Data Class+
	Brain Class und Brain Methode+ Feature Envy+ Shotgun Surgey+ "Tell,
	don't aks" Prinzip+ Heuristik: Für einen guten OO Entwurf gilt: Verteile
	die Intelligenz (Funktionalität, Verhalten, Aufgaben) eines Systems
	gleichmäßig auf die Klassen oberster Ebene+ Prinzip: Single Responsibility
	Principile (SRP) Jede Klasse sollte nur genau eine Verantwortlichkeit
	besitzen. Mit anderen Worten: Es sollte nie mehr als einen Grund
	geben die Klasse zu ändern.+ Entwurfsmuster: Strategie Definiere
	eine Familie von Algorithmen, kapsele jede einzeln und mache sie
	austauschbar. Das Strategiemuster ermöglicht es, den Algorithmus
	unabhängig von ihn nutzenden Klienten zu variieren.+ Schlechter Geruch
	Feature Envy: Eine Methode hat mehr Interesse an einer anderen Klasse
	als an der eigenen. Üblicherweise bedeutet das, die Methode ist "neidisch"
	auf die Daten dieser anderen Klasse. },
  timestamp = {2010-10-09 20:25:48}
}

@BOOK{HelleR2003,
  title = {Complete Java 2 Certification},
  publisher = {Sybex},
  year = {2003},
  author = {Heller, Philip and Roberts, Simon},
  edition = {5},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {8613448b8823036192a373f25cb242db},
  intrahash = {e9958cd19e5990b2ce1c460190442635},
  isbn = {0-7821-4419-5},
  keywords = {Weiterbildung, java},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{HenniS2008,
  author = {Hennig, Manfred and Seeberger, Heiko},
  title = {Einführung in den Extension Point Mechanismus von Eclipse},
  journal = {Java Spektrum},
  year = {2008},
  volume = {1},
  pages = {19 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Super Einführung in Theorie und Praxis des Konzeptes der Extension
	Points am Beispiel der Eclipse Umsetzung. Abhängigkeitsbeziehung:
	Bei Vererbung nutzt die Subklasse die Superklasse und die Subklasse
	ist von der Superklasse abhängig. Bei den Extension Points nutzt
	die Basisklasse über den Extension Mechanismus die Klassen der Erweiterung
	aber die Klassen der Erweiterung sind von der Basisklasse abhängig.
	Es werden unter anderen benannte Regeln beschrieben auf die man achten
	sollte: Contribution: Alles ist ein Beitrag, es gibt keinen Kern.
	Lazy Loading: Beiträge sind nur zu laden, wenn sie benötigt werden.
	Sharing: Hinzufügen, nicht ersetzen! Conformance: Beiträge bedienen
	die erwarteten Schnittstellen korrekt. Relevance: Trage nur etwas
	bei, wenn es erfolgreich arbeitet. Safe Platform: Wenn man einen
	Extension Point bereitstellt, muss dieser gegen Fehlverhalten des
	Extenders geschützt sein. Invitation: Ermögliche anderen, deinen
	Beitrag zu erweitern. Fair Play: Alle Nutzer eines Extensions Points
	sind bei der Nutzung gleich berechtigt, inklusive dessen Autors.
	Explizit Extension: Beschreibe explizit wo die Plattform erweitert
	werden kann (public ist nicht published). Diversity: Extension Points
	unterstützen viele Extensions. Good Fences: Wenn die Kontrolle an
	die Extension geht, dann muss der eigene Code geschützt sein. Verursacht
	die Extension einen Fehler, dann entlade sie und rufe sie nicht mehr
	auf. Stability: Ist ein Extension Point zur Verfügung gestellt, soll
	er nicht mehr geändert werden (bzgl des APIs). Defensive API: Veröffentliche
	nur dann ein API, wenn du sicher bist, dass es allen Anforderungen
	Stand hält. Responsibility: Identifiziere dein Plugin klar als den
	Problemverursacher.},
  groups = {public},
  interhash = {572a4b8d8f3596f0663f2fd78e7ccaf4},
  intrahash = {8a47097add9b2e5e5be34873317df252},
  keywords = {eclispe, extensionpoint, osgi},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:36}
}

@ARTICLE{Heuer2000,
  author = {Heuer, Rene},
  title = {Mathe interaktiv},
  journal = {Java Magazin},
  year = {2000},
  volume = {11},
  pages = {36 - 42},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Interessante Einführung in die Verarbeitung mathematischer Ausdrücke
	in Java. Auch interessant für das Buch zur Compilertechnik. Quelltexte
	unter: http://it-republik.de/zonen/magazine/ausgaben/psfile/source_file/58/mathe3c998dedc1cdf.zip},
  groups = {public},
  interhash = {6d4de32fd3bff2f470da7bfd8ea8a61f},
  intrahash = {12222a662646a9a0059ba7805d585f11},
  keywords = {computing, expression, mathe},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:32},
  url = {http://it-republik.de/zonen/magazine/ausgaben/psfile/source_file/58/mathe3c998dedc1cdf.zip}
}

@BOOK{hogrefe1989,
  title = {Estelle, LOTOS und SDL. Standard- Spezifikationssprachen für verteilte
	Systeme},
  publisher = {Springer Verlag},
  year = {1989},
  editor = {Kofer, G. R. and Schnupp, P. and Strunz, H.},
  author = {Hogrefe, Dieter},
  address = {Berlin, Heidelberg},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {d6d2d0b1fa28d25269025abf6c59e52c},
  intrahash = {2b3dc5c60f24fefb9dc7242cf9b986c3},
  keywords = {estelle, lotos, sdl, spezifikations_sprache, verteilte_systeme},
  owner = {funthomas424242},
  timestamp = {2011-02-12 21:09:07}
}

@ARTICLE{Hohpe2006,
  author = {Hohpe, Gregor},
  title = {Programmieren ohne Stack: Ereignis-getriebene Architekturen},
  journal = {Java Spektrum},
  year = {2006},
  volume = {2},
  pages = {18 - 24},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0f8fd261fe03a3c417f3a7d397fbbdef},
  intrahash = {2c199689df069645c2fb6231a08096b6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{HojaH2005,
  author = {Hoja, Jens and Hoja, Marcus},
  title = {Starker Kaffee - Expresso Struts-basierendes Framework},
  journal = {Java Magazin},
  year = {2005},
  volume = {4},
  pages = {91 - 98},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {6d4bc862bb7f2f4981070e74d8f71592},
  intrahash = {8a0362a787e20f06ead0beac1c86b648},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Hoelle2004,
  author = {Höller, Jürgen},
  title = {Die Rückkehr der POJOs - Das Spring-Framework: leichtgewichtiges
	Komponentenodell als Alternative zu EJB},
  journal = {Java Magazin},
  year = {2004},
  volume = {9},
  pages = {54 - 60},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine Einführung wie Spring als Middleware im Web- oder Applicationserver
	eingesetzt werden kann. Mir ist allerdings nicht klar geworden wozu
	man so etwas tun sollte. Meiner Meinung nach sollte man Spring benutzen
	um beim Test keinen Server starten zu müssen bzw. nur einen leichtgewichtigen
	Container nutzen zu können bzw. von der jeweiligen Technologie (Java
	EE oder .Net oder ...) abstrahieren zu können.},
  groups = {public},
  interhash = {ea755edc1aba95afd96e9ac8bfa88f18},
  intrahash = {70ec5664da207bf7b33f13fedfaa7c66},
  keywords = {framework, java, pojos, spring},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:57}
}

@ARTICLE{Holle2008,
  author = {y Hollestelle, Nestor Alvarez},
  title = {Programmierung mit Java-3D},
  journal = {Java Magazin},
  year = {2008},
  volume = {10},
  pages = {18 - 26},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung mit Beispielen in die 3D Programmierung in Java.
	Es wird ein Würfel der auf Eingaben reagiert programmiert. Echter
	Schatten wird nicht unterstützt, Import aus Blender oder Lightwave-3D
	Format oder Wavefront-OBJ-Dateien ist möglich.},
  groups = {public},
  interhash = {0970af14d228d52327a4c9fc22a8db84},
  intrahash = {9fe4a39276bfef2e382534d2c6639bfc},
  keywords = {3d, java},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:30},
  url = {https://java3d.dev.java.net/binary-builds.html}
}

@ARTICLE{Holub2007,
  author = {Holubek, Andreas},
  title = {SOA real},
  journal = {Java Magazin},
  year = {2007},
  volume = {4},
  pages = {23 - 27},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Definition einer Architektur für SOA.
	Hier wird Service Component Architecture (SCA) als Beispiel einer
	solchen Architektur angeführt und als Sammlung diverser Spezifikationen
	betrachtet welche letztlich die konkrete Architektur für die SOA
	festlegen. Ein Teil der SCA sind die Service Data Objects (SDO) -
	also die Service- und Parameterbeschreibungen. SCA benutzt den Begriff
	in originärer Form (nicht nur als Webservice) und biete eine plattformneutrale
	Definition. Der Artikel beweist dies anhand eines Beispieles mit:
	+ Apache Tuscany (freie SCA Implementierung) + Services in Java und
	Ruby Beschreibung des Service erfolgt über META-INF/sca/default.scdl
	Nützliche Links: www.osoa.org (SCA und SDO) incubator.apache.org/tuscany},
  groups = {public},
  interhash = {3f350bc522660362bd022c57a6634c12},
  intrahash = {c81520af947f90efae02dadd8f6314d6},
  keywords = {SOA},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:29}
}

@ARTICLE{Holub2001,
  author = {Holubek, Andreas},
  title = {Objekte aufbewahren - Persistenz zum Nulltarif: Kurz- und Langzeitpersistenz
	mit Java},
  journal = {Java Magazin},
  year = {2001},
  volume = {5},
  pages = {16 - 21},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4b16b0724be08af8f564a4c69377d47c},
  intrahash = {ded7d52529ed896665aba29844fd25bd},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Holub2000,
  author = {Holubek, Andreas},
  title = {Hinter den Kulissen - Java Network Launcher Protocol und WebStart
	im Detail},
  journal = {Java Magazin},
  year = {2000},
  volume = {11},
  pages = {19 - 21},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0b59adacba30b33addc8dd3f0e10793c},
  intrahash = {d1a25b57e8c90f32939edbaf7c2447bf},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Holub2000a,
  author = {Holubek, Andreas},
  title = {Der Name des Objekte - Das JNDI API in der Praxis},
  journal = {Java Magazin},
  year = {2000},
  volume = {2},
  pages = {15 - 17},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das JNDI API anhand eines Beispieles mit dem
	FilesystemProvider. Im Artikel wird ganz klar herausgestellt, dass
	das JNDI API aus zwei Teilen besteht (wie bei Java üblich). Einem
	API mit dem die Anwendung auf die JNDI Services zugreift und einem
	Service Provider API welches diverse Services über JNDI anbinden
	kann. So kann mittels JNDI z.B. auf folgende Services zugegriffen
	werden: + Filesystem + Corba + RMI Registry + LDAP + DNS + NIS Eine
	Übersicht über die aktuellen Service Provider gibt es auf folgender
	URL: http://java.sun.com/products/jndi/serviceproviders.html Ein
	simples Beispiel wäre: Hashtable env = new Hashtable(); env.put(Context.INITIAL_CONTEXT_FACTORY,
	"com.sun.jndi.fscontext.RefFSContextFactory"); Context ctx = new
	InitialContext(env); Object obj = ctx.lookup(name);},
  groups = {public},
  interhash = {f8c0eaf44204a6421c300b90f6dc2422},
  intrahash = {c0a9e47dbc16d4d9e00728c496522892},
  keywords = {java},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:28}
}

@ARTICLE{Hooge2005,
  author = {Hoogendoorn, Sander},
  title = {Entwurfsmuster für Referenzen},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {2},
  pages = {39 - 43},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Hervorragende Einführung in die Techniken zur typsicheren Implementierung.
	Vom Stringvergleich über Konstanten über Enumerations über Konstantenkollektionen
	über das Deskriptor Pattern zur intelligenten Refferenz. Super Erklärung
	der Vor- und Nachteile der einzelnen Pattern.},
  groups = {public},
  interhash = {32e3447bee912b5d392d6414c7ad4377},
  intrahash = {ae4d31cda9a4959dd5f0ce917f106a0b},
  keywords = {descriptor*pattern, java, referenz, typsicher},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:27}
}

@ARTICLE{HruschStark2010,
  author = {Hruschka, Peter and Starke, Gernot},
  title = {Erfolgsmuster: Strukturierte Faulheit},
  journal = {Java Magazin},
  year = {2010},
  volume = {10},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine kurze Liste von Hinweisen zur Dokumentation von Architekturen.},
  comment = {Empfehlung von Checklisten und Vorlagen. Allerdings unter der Voraussetzung,
	dass das Hirn nicht ausgeschalten wird.},
  groups = {public},
  interhash = {1e6bf13c22cb6e13656aa189dc725d2b},
  intrahash = {f45a295f932fcfcec49ce9adb654d36e},
  keywords = {architecture, documentation},
  owner = {funthomas424242},
  timestamp = {2010-10-08 21:25:37},
  url = {/brokenurl#www.arc42.de}
}

@ARTICLE{HuelseC2004,
  author = {Hülsey, Rupert and Claar, Sven},
  title = {Alles kommt im Kopf zusammen - Macromedia Flex Rich Client Frontends
	für Unternehmensanwendunge},
  journal = {Java Magazin},
  year = {2004},
  volume = {12},
  pages = {36 - 43},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel ist eine super Einführung in Flex (Flash) anhand von Beispielen.
	Der Artikel hat mich so überzeugt, dass ich gleich im Internet recherchiert
	habe. Leider fand ich dort dann einige Punkte welche ich so aus dem
	Artikel gar nicht rausgelesen hatte. Die Beschreibung der Frontendkomponenten
	(GUI) erfolgt über MXML (Macromedia XML?) und Actionscript. Der Compiler
	übersetzt dann beides zu Actionscript und hiernach zu Flash. Die
	IDE Flex Builder ist kostenpflichtig. Will ich Flex als Alternative
	zu JSP oder Swing nutzen, benötige ich auf dem Server noch einen
	Teil welcher sich LiveCycle Data Services nennt und auch in den meisten
	Fällen kostenpflichtig ist (ab der 2. CPU - und wer hat heute kein
	Dual). Online Beispiele waren alle grotten langsam. Summary: Technologie
	sehr gut - Lizenzpolitik behindert Einsatz im OpenSource Bereich.},
  groups = {public},
  interhash = {22d9579acfb28266539212186b480796},
  intrahash = {87841b2c8fc2a50dad652a0cb55c4409},
  keywords = {lex, ria, richclient},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:56},
  url = {http://www.adobe.com/de/products/flex/}
}

@ARTICLE{Huette2008,
  author = {Hüttermann, Michael},
  title = {Polyglot - Programming},
  journal = {Java Magazin},
  year = {2008},
  volume = {6},
  pages = {16 - 24},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Seit Java 6 lassen sich folgende Skriptsprachen in Programme integrieren:
	+ Ruby + Groovy + Scala Es handelt sich dabei teilweise um dynamische
	Skriptsprachen welche auf einer Virtuellen Maschine zum Laufen gebracht
	werden die ursprünglich für statische Typisierung erdacht wurde.
	Der Artikel bildet eine grundlegende Einführung in die Diskussion
	über die Themen: + Erweiterung des Java Sprachumfangs um komplexe
	Strukturen wie Closures + JSR 292 Erweiterung der Java Virtuellen
	Maschine um Unterstützung zum dynamischen Typ checking (vs. statisch
	zur Compilezeit) damit würde sich die Vererbungshierarchie zur Laufzeit
	ändern lassen und alle dynamisch typisierten Sprachen konnten optimiert
	ausgeführt werden. aktueller Ansatz: Hotswapping + JSR223 Implementierung
	von Skriptsprachen zur Integration in Java + Integration Multilanguage
	Support in IDEs wie Eclipse Projekt Schliemann + Das Projekt eignet
	sich zur Syntaxanalyse (lexikalisch), als Ergebnis entsteht nur ein
	Syntaxbaum + Keine Unterstützung für Compilierung, Run, Debug oder
	Build Support + Beschreibung der Sprache erfolgt über eine Netbean
	Scripting Datei Pure DSL + Erstellung eines domänenspezifisches Modell},
  groups = {public},
  interhash = {bc4c6a098a5ad7d9c2b315258dd5f183},
  intrahash = {82c5ef6700d4da66006e660470cfc59b},
  keywords = {jvm, polyglot, script, sprachen},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:55}
}

@ARTICLE{Ihns2005,
  author = {Ihns, Oliver},
  title = {So einfach kann eine Komponente sein - Mit EJB 3.0 zurück zu POJO/POJI},
  journal = {Java Magazin},
  year = {2005},
  volume = {3},
  pages = {60 - 62},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Begriffserklärung und Aufklärung über die Unterschiede der alten
	und der neuen Beans. POJO = Plain Old Java Object POJI = Plain Old
	Java Interface},
  groups = {public},
  interhash = {5dacb3e504785257ad3191075e03b399},
  intrahash = {cede8953af01e9d2f7f4ec74c8936878},
  keywords = {JavaEE, ejb3, poji, pojo},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:54}
}

@ARTICLE{Jandr2008,
  author = {Jandrisevits, Philipp},
  title = {VoIP und IMS selbstgemacht},
  journal = {Java Magazin},
  year = {2008},
  volume = {7},
  pages = {68 - 74},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Grundlegende Einführung in die Implementierung von Voice over IP Telefonie.
	Verwendet werden open source Technologieen. Dennoch kommt ein nach
	meiner Meinung unpraktischer Weg zum Einsatz, bei dem eine Abhängigkeit
	zu den benutzten Providern unvermeidlich scheint. Vielleicht existiert
	momentan aber noch keine andere Möglichkeit. Es wird Openser verwendet.},
  groups = {public},
  interhash = {3019a8718f6741eb42830775191ecee1},
  intrahash = {40f98bf36635cf10c1a3ef6c74a27606},
  keywords = {ims, java, voip},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:54}
}

@ARTICLE{Jansen2009,
  author = {Jansen, Rudolf},
  title = {Alles unter einem Dach},
  journal = {Java Magazin},
  year = {2009},
  volume = {09},
  pages = {86 - 90},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung in den Markt der Embedded Datenbanken. Der Autor
	erwähnt unter anderem, dass es von den Keyplayern auch Embedded Datenbanken
	auf dem Markt gibt, z.B. : + Oracle Lite + IBM DB2 Everyplace Es
	gibt aber auch Lösungen im OpenSource Umfeld: + Apache Derby + HSQLDB
	+ Berkeley DB + JDBM + Perst + Db4o Ab Java 6 ist eine Embedded DB
	in der Standard Edition enthalten (Apache Derby). Die Historie: +
	zunächst unter dem Namen Cloudescape - 90er Jahre + Über Informix
	an IBM übergeben + IBM übergibt 2004 Derby an Apache Software Foundation
	+ 2006 wird Derby in Java 6 als Java DB integriert Die Datenbanken
	sind auf bestimmte Zwecke optimiert - hier lohnt sich eine genaue
	Produktbetrachtung: + nur Embedded oder auch Servervariante (bei
	Entwicklung Embedded - in PROD Server) + einfache Ablage der Daten
	und Rückgewinnung nur über eine ID (Eintabellen DB) optimiert für
	mobile + ...},
  groups = {public},
  interhash = {3b0a79fc2e55937a42c85cc1423c36b7},
  intrahash = {9f40b03996bf2545198ff3b2c280592a},
  keywords = {database, embedded},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:53}
}

@MISC{Java-2005,
  author = {Java-Source.net},
  title = {Open Source Content Management Systems (CMS) in Java},
  howpublished = {internet},
  month = {12},
  year = {2005},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Übersicht über ausgewählte open source content management systeme
	welche in Java implementiert wurden.},
  groups = {public},
  interhash = {1d60bd3a3957fda44a31c49536d42227},
  intrahash = {ceaed8f8b11dca9da96693ccc4b91efc},
  keywords = {cms, java},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java-source.net/open-source/content-management-systems}
}

@ARTICLE{KamanG2008,
  author = {Kamann, Thorsten and Groh, Martin},
  title = {Webtests mit Selenium, Groovy, TestNG und Maven},
  journal = {Java Magazin},
  year = {2008},
  volume = {8},
  pages = {65 - 69},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Gute Einführung und mitreissender Artikel zum Testen mit Selenium
	und anderen neuen Werkzeugen. Es wird nur das prinzipielle Herangehen
	an den Test beschrieben und welche Artefakte zu nutzen sind. Die
	genaue Vorgehensweise wird vermutlich in einem späteren Artikel beschrieben.
	Ist Analyse: Selenium-IDE ist ein Browser-Plugin welches die Testfälle
	aufzeichnet und über anpassbare Templates Testfallbeschreibungen
	in einer Zielsprache (hier Groovy für TestNG) speichert. Das Plugin
	ist zur Zeit nur für Firefox verfügbar. Die Testfälle können über
	TestNG ausgeführt werden. Dabei wird eine Selenium-RC Komponente
	benutz um den Browser zu starten und dort die Tests durchzuführen.
	Die Selenium-RC Komponente ist für gänge Browser implementiert (auch
	IE). Die Testskripte lassen sich über Maven oder Ant in den Build
	und Deployment Prozess integrieren. Warum der Artikel TestNG statt
	jUnit und warum Groovy statt Java benutzt wurde kann nicht nachvollzogen
	werden - evtl. weil das Zeug gerade Hype ist und der Entwickler extra
	was tun muss. Java und JUnit werden out-of-the box unterstützt und
	wären meine Favoriten für einen ersten Versuch.},
  comment = {},
  groups = {public},
  interhash = {1107387741125ff13d9c29555c78ce3c},
  intrahash = {cea17b65548a66a194ed29610bad0d83},
  keywords = {java, maven, selenium, test, testng, web},
  owner = {funthomas424242},
  timestamp = {2010-09-21 21:43:03}
}

@ARTICLE{Kaps2007,
  author = {Kaps, Reiko},
  title = {Sendemast für Firefox},
  journal = {c't},
  year = {2007},
  volume = {21},
  pages = {192},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel stellt das Plugin POW vor. Dieses Plugin installiert einen
	Webserver im Firefox Browser. Der Webserver versteht sjs Dateien
	(sowas wie JSPs). In Kombination mit der Sprache XUL des Browsers
	lassen sich einige Anwendungsbeispiele vorstellen, welche als Workaround
	gelten können wenn der Homepage Provider keinen passenden Web- oder
	Applicationserver anbietet. www.mozilla.org/projects/xpcom},
  comment = {},
  groups = {public},
  interhash = {27c5828ece3bf72fa2b597257c1992ea},
  intrahash = {12f2f5771601cd7d93de2d6f6a132c89},
  keywords = {firefox, pow, webserver},
  owner = {funthomas424242},
  timestamp = {2010-09-21 21:44:12}
}

@ARTICLE{Karg2004,
  author = {Karg, Markus},
  title = {Write once, Deploy anywhere},
  journal = {Java Magazin},
  year = {2004},
  volume = {4},
  pages = {69 - 75},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt das damals neue Deployment API JSR-88 und seine
	Wirkung auf die Entwicklung allgemein.},
  groups = {public},
  interhash = {d4cb8cccd2ce18c013c6676e47ce2432},
  intrahash = {ab39b1e06c67b586506b140c07d52766},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Kaste1990,
  title = {Übersetzerbau},
  publisher = {R. Oldenbourg Verlag},
  year = {1990},
  author = {Kastens, U.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4f97b844cc1d3a3a51470962e6d0bced},
  intrahash = {b729d015bf560940e2e1ea356c09c09f},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kaufm2005,
  author = {Kaufmann, Noogie C.},
  title = {Freifahrschein für Un-CDs - Verfassungsbeschwerde zu Kopierschutz
	abgewiesen},
  journal = {c't},
  year = {2005},
  volume = {21},
  pages = {202},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Artikel zur indirekten Legitimation nicht abspielbarer CDs durch das
	Verfassungsgericht. Weiterer rechtlicher Hinweis: Kopierschutz als
	Mangel - Geld zurück? Nach §434 Abs.1 Nr. 2 des Bürgerlichen Gesetzbuches
	(BGB) liegt ein Sachmangel vor, wenn sich eine Kaufsache nicht für
	die gewöhnliche Verwendung eignet und nicht so beschaffen ist, wie
	es der Käufer erwarten darf. Bei CDs haben sich die Käufer daran
	gewöhnt, dass sie diese auf den verschiedensten Geräten ohne Wenn
	und Aber abspielen können. Wenn das durch Kopierblocker verhindert
	oder beeinträchtigt wird und der Käufer darüber nicht vor dem Kauf
	informiert war, kann dies einen Sachmangel im Sinne des BGB darstellen.
	Das verschafft dem Käufer Gewährleistungsansprüche gegenüber dem
	Verkäufer: Da Nachbessern praktisch ausgeschlossen ist, kann er vom
	Kauf zurücktreten und sein Geld zurückverlangen oder den Kaufpreis
	angemessen mindern. siehe: Multimedia und Recht 2004, S. 722},
  groups = {public},
  interhash = {64d23dfc1654989d3b95823395a0a11b},
  intrahash = {033bac33d209b43ade0858cd5b50253e},
  keywords = {kopierschutz, recht, un-cd},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:46}
}

@ARTICLE{Kellermann2008,
  author = {Kellermann, Claudia and Hocker, Florian},
  title = {Einführung auf die Schnelle},
  journal = {Java Magazin},
  year = {2008},
  volume = {12},
  pages = {89 - 94},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt alles was zu Bedenken ist wenn man in einer
	Firma mal ein Requirement-Management Tool einführt.},
  groups = {public},
  interhash = {768230e4fbe2a8030850389e66da606c},
  intrahash = {4d98df80d0dd170a1e6c3b86018e85f6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kerpe2005,
  author = {Kerpen, Claus},
  title = {Mail mir mal - Überblick über das Java Mail API},
  journal = {Java Magazin},
  year = {2005},
  volume = {2},
  pages = {30 - 36},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Benutzung des Java Mail APIs. Es wird
	sehr ausführlich erklärt wie ein Mailclient mit Java programmiert
	wird. Mail API ist enthalten in: j2ee.jar bzw. im javamail1.3.jar,
	letzeres benötigt noch das JavaBeans Activation Framework.},
  groups = {public},
  interhash = {c9b5973222b71159664ea9e1b5b55c34},
  intrahash = {fdeb886f3808f1b0ce43bf3b680cf32a},
  keywords = {api, java, mail},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:45}
}

@ARTICLE{Kerpe2005a,
  author = {Kerpen, Claus},
  title = {Message in a bottle - Einführung in Java Message Service (JMS)},
  journal = {Java Magazin},
  year = {2005},
  volume = {3},
  pages = {15 - 23},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das JMS Konzept mit Untermauerung durch Quelltexten.},
  groups = {public},
  interhash = {1ee02dcaab4d6238ca74b32c89e8f290},
  intrahash = {f712e7fac64c2210e18ef3e3252a05d0},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kiesl2007,
  author = {Kiesl, Thomas},
  title = {Helles Licht am Himmel - Flash und Java: verschiedene Wege für die
	Kommunikation zwischen Flash und Java},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {95 - 101},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in die Benutzung von Flash auf der Client Seite (Rich Client)
	und Java auf der Serverseite.},
  groups = {public},
  interhash = {752d538e86bac51957c24ca9fea0a458},
  intrahash = {ba7824969416f3034ff9f60f6996653f},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{King2001,
  author = {King, Thomas},
  title = {Richtig anklopfen - LDAP Workshop},
  journal = {Linux Magazin},
  year = {2001},
  volume = {6},
  pages = {106 - 109},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4216cb624497bc936a8703854d43929d},
  intrahash = {d3146dd45212227066e79128f3c226a1},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{King2001a,
  author = {King, Thomas},
  title = {Noch mal richtig anklopfen - LDAP Workshop (2)},
  journal = {c't},
  year = {2001},
  volume = {8},
  pages = {119 - 121},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {3898cf8c85a72a0e0241d3af3e08e5c1},
  intrahash = {39ef3746b539e01e83a8690002fc3465},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Klingenberg2006,
  author = {Klingenberg, Thomas},
  title = {Tante Emma behält den Überblick - Entwickeln nach dem V-Modell XT},
  journal = {Java Magazin},
  year = {2006},
  volume = {5},
  pages = {87 - 90},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung und Überblick über die Arbeit nach dem V-Modell},
  groups = {public},
  interhash = {ee7d4c72f3e8ba430b42508cdc21d602},
  intrahash = {40cd842d4e97dfb2486c2c6db0e02577},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@INPROCEEDINGS{Knuth1962,
  author = {Knuth, Donald},
  title = {The Calculation of Ester},
  booktitle = {Communication of the ACM},
  year = {1962},
  volume = {5},
  pages = {209 - 210},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4bf1a511cbc08727af67ef9d74f3da33},
  intrahash = {7953fa5f077f0e3813f51dde10ff3249},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kofle2008,
  author = {Kofler, Peter},
  title = {Tägliche Code-Analyse mit PMD},
  journal = {Java Spektrum},
  year = {2008},
  volume = {1},
  pages = {30 - 33},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Anleitung zur Etablierung von Qualitätssicherungsmassnahmen
	mittels PMD in einem bestehenden Grossprojekt. Folgende Schritte
	wurden durchgeführt: 1) Einführung tägliches, automatisches Build
	2) Integrierung vom PMD in die Ant Skripte 3) Auswertung der PMD
	Reports 4) Identifizierung von Regeln die bisher nicht verletzt werden
	und für das Projekt relevant und sinnvoll sind 5) Regeln aus 4 so
	konfigurieren, dass der Build bei Verletzung abbricht. 6) weiter
	mit 3) Es wurde stets darauf geachtet, dass durch die Integrierung
	der PMD Tests keine Arbeitsabläufe bzw. Prozesse geändert wurden.
	Durch viele neue Implementierungen wurde die relative Anzahl der
	Fehler faktisch "von alleine" kleiner. Bei regelmäßiger Kontrolle,
	können im Punkt 4 immer mehr Regeln identifiziert werden und über
	Punkt 5) aktiviert werden Gezielte BugFixing Aktionen bzgl. bestimmter
	Probleme (Regeln) führen schnell zu deutlichen Verbesserungen. Die
	Regeln werden in Gruppen (Fehler, Warning, Info, Formatierung) eingeteilt
	und entsprechend gewichtet. Jede Regelgruppe ist in einem XML File
	beschrieben. Die Regeln werden entsprechend ihrer Gewichtung im Projekt
	entweder in das eine oder in das andere XML File geschrieben. Über
	simple, gewichtete Addition der gefundenen Fehler kann eine Masszahl
	für den relativen Fehler ermittelt werden.},
  groups = {public},
  interhash = {d627445e676ba729f7187d9129bbd7ca},
  intrahash = {3358e3c2d8157dc9463e0a5244ecc9bd},
  keywords = {java, pmd, test, tool},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:38}
}

@ARTICLE{konig2012javafx,
  author = {König, Dierk},
  title = {JavaFX, die Zweite},
  journal = {Java Magazin},
  year = {2012},
  pages = {32-38},
  number = {2},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Detailreicher Blick auf JavaFX in Version 2.0. Leider aus einer GroovyFX
	Perspektive mit GroovyFX Beispielen. Die Eigenschaften von JavaFX
	werden konsequent auch mit Swing verglichen. },
  comment = {JavaFX scheint in Version 2.0 viele neue Effekte mitzubringen. Dem
	Artikel nach kann man die Oberflächen völlig neu aufpolieren. JavaFX
	Script ist in der Version 2.0 von JavaFX nicht mehr dabei. Hier läuft
	alles wie bei Swing über ein API. Was für Swing das Look&Feel war,
	ist für JavaFX das CSS3. JavaFX lässt sich in Swing einbetten über
	ein JFXPanel. Um Swing in JavaFX einzubetten ist kein offizieller
	Weg angedacht und so werden zusätzliche Komponenten benötigt. Swing
	benutzt einen Komponentenbaum, JavaFX setzt auf einen SceneGraph.
	Window und Frame bei Swing entsprechen der Stage mit ein oder mehreren
	Scene-Knoten bei JavaFX. Jeder Knoten kann mit Effekten versehen
	werden. Die Palette der Effekte ist sehr mächtig. Vom Blending über
	perspektivischer Verzerrung, verschiedenen Beleuchtungseffekten,
	animierten Transformationen zum Rotieren, Skalieren, Scheren und
	Verschieben ist alles dabei.Als Events kann JavaFX zwischen Maus-,
	Tastatur- und Wertänderungsereignissen unterscheiden. Letztere bilden
	beim Binden an Datenmodelle eine Rolle.JavaFX basiert auf JavaBeans
	mit einer zusätzlichen Namenskonvention für PropertiesZur besseren
	Ausnutzung von CPUs und GPUs besitzt JavaFX ein nebenläufiges Programmiermodell.
	Es kann bei Bedarf explizit benutzt werden. Erste Schritte gehen
	ohne explizite Nutzung. Als Folge davon wird verhindert, dass der
	Applikationskode das grafische Rendering ausbremst. Anwendungslogik
	und grafisches Rendern wurde über separate Threads getrennt. JavaFX
	bietet einen leichteren Einstieg als die Vorgängerversionen ohne
	die Flexibilität für Experten zu schmälern. Neben einer Setterlastigen
	API Variante bietet JavaFX auch eine Fluent Builder Variante an.
	Systemvoraussetzung für JavaFX sind Java 6 Update 23+, ein fxrt.jar
	und eine gesetzte Umgebungsvariable JAVAFX_HOME.IDE Hersteller können
	visuelle Editoren erstellen die keinen Kode erzeugen sondern FXML
	Dateien. Für den leichten Einstieg empfiehlt der Autor das Applikationsframework
	Griffon. Mit diesem sollen sich leicht JavaFX Anwendungen erstellen
	lassen.},
  groups = {public},
  interhash = {807fdde5604db121d23c31cad4b43765},
  intrahash = {2fd629694adf7ca07a034ae8afd0ebaf},
  keywords = {FXML, GUI, Griffon, JavaFx, JavaMagazin, König, SceneBuilder, client,
	java, richclient},
  owner = {funthomas424242},
  timestamp = {2012-10-21 15:31:27}
}

@ARTICLE{Koenig2010,
  author = {König, Peter},
  title = {Teamwork im Netz - Gemeinsam planen und Dokumente verfassen},
  journal = {c't},
  year = {2010},
  volume = {2},
  pages = {112 - 114},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kleine Einführung welche die Dinge betrachtet die man für eine echte
	Zusammenarbeit im Netz benötigt und auch gleich mal ein paar Probleme
	aufwirft.},
  groups = {public},
  interhash = {0c889c2bfacc51d3739c235fca85dd9a},
  intrahash = {7458ef9d8e6f4b576d06dd8f92cec843},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Koenig2010a,
  author = {König, Peter and Bager, Jo},
  title = {Zusammenarbeit mit Zukunft},
  journal = {c't},
  year = {2010},
  volume = {2},
  pages = {116 - 121},
  __markedentry = {[FunThomas424242:6]},
  abstract = {In diesem Artikel werden die aktuell gängisten Provider für netzbasiertes
	Teamwork verglichen. Es werden verglichen: PBworks, Google Wave,
	ShareFlow, Onehub, Huddle, ProjectSpaces, Teamspace, GroupOffice,
	Sosius und WebOffice. Seite 120/121 enthält eine Vergleichstabelle
	nach diversen Kriterien.},
  groups = {public},
  interhash = {f254ca841b1fa90b41bc017fe89c49e9},
  intrahash = {2eebfd1e3822e78b424f93c9f49d2b5a},
  keywords = {Portale, Teamwork},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:22}
}

@BOOK{Kopp1988,
  title = {Compilerbau: Grundlagen, Methoden, Werkzeuge},
  publisher = {Carl Hanser Verlag},
  year = {1988},
  author = {Kopp, H.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {90a19d252cd1bdfc436c8238df32ea46},
  intrahash = {26321c543a0c7d24a3f72b184055c75a},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Korn2004,
  author = {Korn, Wolfgang},
  title = {Telefongeflüster - Integration von Telefonie und Java Anwendungen
	(Teil1)},
  journal = {Java Magazin},
  year = {2004},
  volume = {12},
  pages = {19 - 27},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das JTAPI (Java Telephony API). Zunächst werden
	die Konzepte erläutert und später ein Beispiel vorgestellt. Der Artikel
	scheint bedacht auf Providerunabhängikeit und sollte daher schnell
	implementierbar /testbar sein.},
  groups = {public},
  interhash = {448074875d4402137b196b17afa592bd},
  intrahash = {9b4087d66f3435939f6cf8cf510b6316},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kossel2010,
  author = {Kossel, Axel},
  title = {Auf die Welle fertig, los},
  journal = {c't},
  year = {2010},
  volume = {2},
  pages = {122 - 125},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Schicker Artikel über Google Wave. Er bringt ein bischen Hintergrund
	rüber warum Google Wave entstand, wofür es sich eignen sollte und
	es werden auch praktische Tipps gegeben wie man Robots oder Gadgets
	findet. Wie man mit Wellen arbeitet, was zur Zeit geht und was nicht.
	Der Artikel kann nur ein aktueller Snapshot sein und ist vermutlich
	schnell veraltet. Dennoch empfehlenswert für den Einstieg.},
  groups = {public},
  interhash = {e75e0cc490bd6d6642d4465792995b85},
  intrahash = {3461cdb21d5bd736f049716f2dca9c5d},
  keywords = {google, google*wave, wave},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:35}
}

@ARTICLE{Krass2007,
  author = {Krasser, Martin},
  title = {Geschützte Objekte - Instanzbasierte Zugriffskontrolle: Architekturkonzepte
	und Implementierung},
  journal = {Java Magazin},
  year = {2007},
  volume = {7},
  pages = {42 -49},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Probleme des Zugriffschutzes in Anwendungen.
	Der Author erkennt, dass der im Java EE implementierte Rollenbasierte
	Schutz nicht ausreichend praktikable ist. Im Artikel wird beschrieben
	wie die Probleme mit SAF(Security Annotaton Framework) gelöst werden
	können. Es werden Konzepte zu SAF vorgestellt und eine Implementierung
	für Spring basierte Anwendungen aufgezeigt. Auf den Problembereich
	Java EE wird nicht weiter eingegangen - im Artikel wird nur der Bereich
	der Standard Edition behandelt.},
  groups = {public},
  interhash = {1f8feb379a5e0a4129e1b1e6a8a8ca5b},
  intrahash = {8701cd87e0e8364455f3792b7c3c4e17},
  keywords = {JavaEE, Security, java},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:35}
}

@ARTICLE{Kraus1997a,
  author = {Kraus, Oliver},
  title = {Immer wieder Sonntag - Algorithmen zur Datumsberechnung},
  journal = {c't},
  year = {1997},
  volume = {15},
  pages = {312 - 315},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Zusammenhänge des Kalenders und seiner
	Feiertage.},
  groups = {public},
  interhash = {4a651d59717bdd88fb90a5434aa3117c},
  intrahash = {fd4fb53040576384afb3b1e93a31dc3b},
  keywords = {Datumsberechnung},
  owner = {funthomas424242},
  privnote = {Sehr gute Einführung in die Kalender Problematik der Feiertage.Ostern
	(=0): Maß vieler Feiertage- 48 = Rosenmontag- 46 = Aschermittwoch-
	03 = Gündonnerstag- 02 = Karfreitag+01 = Ostermontag+39 = Christi
	Himmelfahrt+49 = Pfingstsonntag+50 = Pfingstmontag+60 = FronleichnamOstern:
	325 n. Chr. wurde Ostern auf den Sonntag nach dem ersten Frühlingsvollmond
	festgelegt (zwischen 22. März - 25. April).Zur Berechnung verweist
	der Author auf die Berechnung nach Carl Friedrich Gauß. Diese ist
	aber nur eingeschränkt nutzbar.Eine uneingeschränkte Berechnung liefert
	Donal Knuth in "The Calculation of Ester" in Communications of the
	ACM, Vol. 5 (1962), Seiten 209 - 210.},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Krautgartner2009,
  author = {Krautgartner, Thomas and Hölterhoff, Marc},
  title = {Niemals ungeschützt},
  journal = {Java Magazin},
  year = {2009},
  volume = {06},
  pages = {46 - 55},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Interessant aber langweilig. Gut für wenn mal ein Webappliktion zu
	sichern ist.},
  groups = {public},
  interhash = {8ff45c579ef79730b6fc229f3b8856ea},
  intrahash = {37686e9328c17e9596a89948e4d15e42},
  keywords = {security, webapp},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:34}
}

@ARTICLE{Kreft2010,
  author = {Kreft, Klaus},
  title = {Generational Garbage Collection},
  journal = {Java Magazin},
  year = {2010},
  volume = {3},
  pages = {26 - 30},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Erklärung der Funktionsweise der Garbarge Collection im Heap von Java
	Maschinen. Der G1 welcher mit Java 7 kommen soll, wird noch nur erwähnt
	aber nicht erklärt.},
  groups = {public},
  interhash = {11125451efdf38097a42ffe66065a6f0},
  intrahash = {05a41d7b590b0b485c77c615fd228904},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kreft2009,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Gefahren von aggressiver Optimierung},
  journal = {Java Magazin},
  year = {2009},
  volume = {7},
  pages = {28 - 31},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Erklärung und Hinweise zur späten Initialisierung von Variablen
	im Konstruktor.},
  groups = {public},
  interhash = {07ac7682971fdc8f010462f1e1b8ec23},
  intrahash = {6244634c4a0a9d6908336bb2d473a5d7},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kreft2009a,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Atomic Scalars},
  journal = {Java Magazin},
  year = {2009},
  volume = {09},
  pages = {18 - 20},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel erklärt die Funktionsweise der Variablen aus dem Package
	java.util.concurrent.atomic und deren korrekte Anwendung. Es werden
	nur primitive Datentypen behandelt, auf Refenztypen soll der nächst
	Artikel eingehen. Kern ist die Nutzung von lesen des alten Wertes
	vergleichen mit alten Wert und schreiben den neuen Wertes als eine
	atomare Operation. Dies wird über CAS Befehle (Compare and Swap)
	der CPU unterstützt und über das Atomic Package direkt in Java zugänglich
	gemacht. Ein super Artikel wie immer in der Reihe "Java-Memory-Modell"},
  groups = {public},
  interhash = {53bd89447e77418bf7cd993c1fa87120},
  intrahash = {ab4e6fc515a74d91d92c78b0e9e22959},
  keywords = {java, jvm, memory},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:32}
}

@ARTICLE{Kreft2009b,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Atomare Referenzvariablen},
  journal = {Java Magazin},
  year = {2009},
  volume = {11},
  pages = {16 - 20},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Erklärung wie CAS in Bezug auf Referenzvariablen benutzt
	wird.},
  groups = {public},
  interhash = {ac804c10dcddf70a15e8d67a572657b9},
  intrahash = {49cf8a263fa66919b826854410460739},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{KreftL2009,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Regeln für die Verwendung von volatile},
  journal = {Java Magazin},
  year = {2009},
  volume = {1},
  pages = {21 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in volatile Variablen und ihrem Verhalten.},
  groups = {public},
  interhash = {87f9ddc0784f6735ef6621b4f2c1b523},
  intrahash = {8ad0d77e5af43aaf608c0e95305195a6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kreft2008,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Das Java-Memory - Modell im Überblick},
  journal = {Java Magazin},
  year = {2008},
  volume = {9},
  pages = {106 - 108},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Wunderbare Einführung und Erklärung in die internen Speicherabläufe
	der JVM bezüglich der Arbeit mit Threads. Was passiert wenn ich auf
	eine volatible oder primitive Variable zugreife? Wann wird der Hauptspeicher
	mit dem lokalen Thread Speicher aktualisiert (flush) und wann wird
	der lokale Threadspeicher mit dem Hauptspeicher aufgefrischt (refresh).
	Welcher Thread sieht welche Änderungen von anderen Threads. Wunderbar
	und einfach erklärt. Vermutlich lohnt es sich die ganze Vortragsreihe
	zu lesen und eine Präsentation zu erstellen.},
  groups = {public},
  interhash = {c470936125e456080464f82282e38802},
  intrahash = {8774df8d2feb7cb858e879c9df8d5e42},
  keywords = {java, memory, modell},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:25}
}

@ARTICLE{KreftL2008,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Java-Memory - Modell: Die Kosten der Synchronisation},
  journal = {Java Magazin},
  year = {2008},
  volume = {10},
  pages = {109 - 112},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Super einfache Erklärung was Synchronisation bewirkt, wie Synchronisation
	auftritt ohne das dies offensichtlich ist, welche Maßnahmen ergriffen
	werden können um möglichst vielen parallelen Programmkode zu erzeugen
	und die Verteilung auf Multikernprozessoren zu begünstigen.},
  groups = {public},
  interhash = {72ad8001015b2d509b504166640a950b},
  intrahash = {492f169195da47456bc28a23fe4b6d66},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{KreftL2005,
  author = {Kreft, Klaus and Langer, Angelika},
  title = {Concurrency Utilities in Java 5.0 - Teil 3: Threadpools},
  journal = {Java Spektrum},
  year = {2005},
  volume = {3},
  pages = {56 - 61},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr detaillierte Einführung in das Konzept und die Benutzung der
	Threadpools in Java 5.0.},
  groups = {public},
  interhash = {5a8c611c44a42803bf648d6c2c714025},
  intrahash = {1557320a68bb63ee390e5bb9b6beffab},
  keywords = {J2EE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Kreuss2007,
  author = {Kreußel, Peter},
  title = {Leicht und doch stabil - Interaktive Internetanwendungen mit Openlaszlo},
  journal = {Linux Magazin},
  year = {2007},
  volume = {02},
  pages = {52 - 54},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Openlaszlo ist ein freier Flash Generator, er generiert Flash aus
	XML und wird zur Implementierung der Clients von Webanwendungen benutzt.
	Openlaszlo stellt ein dataset-Tag bereit welches an das Datawindow
	von Powerscript erinnert. Das Tag kann XML formatierte Daten enthalten.
	Alternativ kann das Tag diese auch über HTTP vom Server beziehen.
	So lassen sich aktuelle Daten on the Fly aus der Datenbank auf dem
	Server extrahieren. Openlaszlo verarbeitet diese nach dem XPath Prinzip.
	Ein Weg im Hintergrund eine Verbindung zum Server aufzubauen, bietet
	die XMLHttpRequest Klasse, die Openlaszlo in script Blöcken genau
	wie aktuelle Javascript Implementationen der Browser bereitstellt.
	Anders als bei JavaScript Code, der im Browser abläuft, kennt der
	sonst sehr ähnliche LZX-Code keine Probleme mit Browser Inkompatibilitäten:
	Openlaszlo setzt den JavaScript Code in Flasch Byte Code um, den
	der Flashplayer ausführt. Neben dem XMLHttpRequest aus JavaScriptCode
	heraus unterstützt Openlaszlo auch das SOAP-Protokoll. SOAP ist dafür
	in die Kritik geraten, dass es selbst für einfache Aufrufe große
	Mengen an XML-Daten verschickt. Als Alternative unterstützt Openlaszlo
	daher auch das XML-RPC-Protokoll. Openlaszlo setzt auf Tomcat 5 auf.
	Vorraussetzung für einen vollwertigen Openlaszlo Server ist ein Java
	Runtime Environment in der Version 1.4 oder höher. Ein Vorteil, der
	sich aus dem Java Unterbau ergibt, ist die Möglichkeit, von der Clientanwendung
	direkt auf Java Methoden zuzugreifen. In Umgebungen ohne Java Runtime
	Environment, zum Beispiel beim Shared Web Hosting ohne Root Zugriff,
	lässt sich Openlaszlo im so genannten Solo Modus dennoch einsetzen:
	Ein voll ausgerüsteter Openlaszlo Server kann die Anwendungen als
	eingeständig lauffähige SWX Dateien kompilieren, die die gesamte
	Funktionalität im Client seitig ablaufenden Flash Code enthalten.
	Die XML Sprache von Openlaszlo lehnt sich in vielen Punkten an Standards
	an, die den meisten Webentwicklern geläufig sind, und erleichtert
	damit den Einstieg: Die XML Tags zur Definition von Anzeigeelementen
	ähneln HTML Tags. Die Client seitige Programmlogik greift nach gewohnter
	DOM Syntax auf diese zu. Als Programmiersprache kommt JavaScript
	1.4 zum Einsatz. Die Anzeigeelemente gestaltet Openlaszlo optisch
	ansprechend, außerdem lassen sie sich leicht animieren. Dass Openlaszlo
	Anwendungen im proprietären Flashplayer ablaufen, mag mancher als
	Nachteil werten. Immerhin garantiert dies Browser-übergreifende Kompatibilität,
	die Tests mit den verschiedenen gängigen Browsern weitgehend überflüssig
	machen. Kommende Versionen von Openlaszlo werden die Anzeige und
	die Client Programmlogik alternativ auch auf Basis von Ajax umsetzen
	können.},
  groups = {public},
  interhash = {8f92603d6a9168c761d1ebb0e3fce093},
  intrahash = {d42aa18355650069b85b5171bcb3a1df},
  keywords = {technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:24},
  url = {http://www.openlaszlo.org}
}

@ARTICLE{Kropp2010,
  author = {Kropp, Martin and Schwaiger, Wolfgang},
  title = {Akzeptanztests pflegen: Automatisierte Refaktorisierung und Generierung
	von FIT Tests},
  journal = {ObjektSpektrum},
  year = {2010},
  volume = {1},
  pages = {70 - 75},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Betrachtung der mit FIT erstellten Akzeptanztests unter dem Gesichtspunkt
	der kontinuierlichen Wartung. Es werden Motivation und praktische
	Erfahrungen mit Akzeptanztests beschrieben. Zentrale Idee des Artikels
	ist die Bereitstellung eines Eclipse Plugins welches die Generierung
	von Fit Tests aus bestehendem Programmkode unterstützt. Die Motivationen
	hierfür sind unterschiedlich. Generell ist ein solches Vorgehen jedoch
	für Legacy Kode denkbar.},
  groups = {public},
  interhash = {56efab027595fdf14a4b80fd58c482e8},
  intrahash = {68e5137fe9473178087b55d8cfba8a67},
  keywords = {akzeptanztest, fit, test},
  owner = {funthomas424242},
  timestamp = {2010-09-12 19:08:23}
}

@ARTICLE{Kundl2006,
  author = {Kundlacz, Heiko},
  title = {Umgebaut - Maven 2: Build-Tool mit neuer Architektur},
  journal = {iX},
  year = {2006},
  volume = {2},
  pages = {76 - 79},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze und knappe Einführung in Maven2.},
  groups = {public},
  interhash = {99fba7074762f64ab36192b750ed70cb},
  intrahash = {860708c86a5deaf3031d96153aff342b},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{ladd2006,
  title = {Expert Spring MVC and Web Flow},
  publisher = {apress},
  year = {2006},
  author = {Ladd, Seth and Davison, Darren and Devijver, Steven},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {0c3f7bfc5eee2b36bf300d2a226d0bf6},
  intrahash = {789affb805b74ff9604e6a4aa72488bd},
  keywords = {mvc, spring, webflow},
  owner = {funthomas424242},
  timestamp = {2011-03-16 23:23:42}
}

@BOOK{Lai1992,
  title = {On the Design and Security of Block Ciphers},
  publisher = {Hartung Gorre Verlag},
  year = {1992},
  author = {Lai, Xuejia},
  series = {ETH Series in Information Processing},
  edition = {V.1},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {5dbafe75b552e947ff43141c7abe98cd},
  intrahash = {fe88ce97d1a01525df32a807c29f1052},
  keywords = {kryptographie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@MISC{Lampm2006,
  author = {Lampmann, Arno},
  title = {Unverschlüsseltes WLAN kann teuer werden! - Gericht bejaht Störerhaftung},
  howpublished = {Internet Link},
  year = {2006},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {5b757856b01fe7adb9fa13295dd23928},
  intrahash = {cc7ed3ec5c07415a9fea90f472e40e4f},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://www.lampmannbehn.de/wlan.html}
}

@ARTICLE{lange2009email,
  author = {Lange, Barbara},
  title = {E-Mail von der Kaffeetasse},
  journal = {Java Magazin},
  year = {2009},
  number = {8},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel zeigt wie neue Innovationen durch die Verknüpfung von
	RFID Chip mit dem Internet entstehen können. So können im System
	von violet neue RFID Chips registriert werden und mit mehreren Softwareapplikationen
	verknüpft werden. Aber auch Potential für neue Kontrollmechanismen
	werden aufgezeigt. So kann durch ein Notizbuch (versehen mit RFID
	Chip) welches am Computer in der Nähe des RFID Readers aufgeschlagen
	wird eine eMail an den Arbeitgeber ausgelöst werden. Aber auch Zusatzinformationen
	zu Presserzeugnissen lassen an Zeitschriften (versehen mit RFID Chip)
	und ähnlichen Objekten koppeln. Außerdem lassen sich auch die Objekte
	per Kommunikation erreichen und können Nachrichten an andere Objekte
	versenden. },
  comment = {Relevante Websites:http://www.gs1.fr, http://www.violet.net, http://www.ztore.net,
	http://www.mynabaztag.de, http://www.touchatag.com, www.zukuenftigetechnologien.de/publikationen.php},
  groups = {public},
  interhash = {7ea8a9e1a65f2688ef25f00a76ba333d},
  intrahash = {1afcfa5177be71a8123cdcf9aec69fea},
  keywords = {ISO14443, internet*der*dinge, internet*of*things, karotz, lange, mir:ror,
	rfid, rfid-reader, touchatag, violet, ztore},
  owner = {funthomas424242},
  timestamp = {2012-10-14 18:19:43}
}

@ARTICLE{Langer2004,
  author = {Langer, Angelika and Kreft, Klaus},
  title = {Spracherweiterung - Die Sprachmittel und eine Implementierung von
	Java Generics},
  journal = {Java Magazin},
  year = {2004},
  volume = {4},
  pages = {16 - 22},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Artikel ist kurz vor dem Java Release 1.5 erschienen und beschreibt
	die erwarteten Sprachkonstruktionen hinsichtlich der Java Generics.},
  groups = {public},
  interhash = {c9f951c8850da45221bd95adf256638e},
  intrahash = {8ecb08843d46ffeabb89341b954eaa33},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{LM2010,
  title = {Object-Oriented Metrics in Practice. Using Software Metrics to Characterize,
	Evaluate, and Improve the Design of Object-oriented Systems},
  publisher = {Springer Verlag},
  year = {2010},
  author = {Lanza, Michele and Marinescu, Radu},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {6b3eba095c8a4b2a501f6d183ca50553},
  intrahash = {04bd07ba7388ba1edfc97617ca75d139},
  keywords = {analyse, design, metrics},
  owner = {funthomas424242},
  timestamp = {2010-10-10 11:41:08}
}

@MISC{Leute2008,
  author = {diverse Leute},
  title = {Cluster},
  howpublished = {Internet Link},
  year = {2008},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0339d1e6daef5e74836396591afdada1},
  intrahash = {53778871979e593a69f4b5f0f5bb0641},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://de.wikipedia.org/wiki/Cluster}
}

@MISC{Leute2008a,
  author = {diverse Leute},
  title = {Computercluster},
  howpublished = {Internet Link},
  year = {2008},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {124401b0767a73d505adde007a4938a4},
  intrahash = {49879cc0bbc7e18eaede6dc1f731c050},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://de.wikipedia.org/wiki/Computercluster}
}

@MISC{Leute2008b,
  author = {diverse Leute},
  title = {FEST - Homepage},
  howpublished = {Internet Link},
  month = {Aug},
  year = {2008},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {f526f7d0971c70a4a149a7de9e18c0bb},
  intrahash = {e19daa01f41e721d14161b47b2653deb},
  keywords = {FEST, java, swing, test},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://fest.easytesting.org/}
}

@ARTICLE{Liebi2006,
  author = {Liebig, Stefan},
  title = {Smart Clients, Teil 5 - Softwareaktualisierung im Smart-Client-Umfeld},
  journal = {Java Magazin},
  year = {2006},
  volume = {12},
  pages = {94 - 97},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt sehr gut welche Aspekte bei der Softwareaktualisierung
	von Smart Clients beachtet werden müssen. Was ist ein Smart Client?
	Im Prinzip wird eine typische Client Anwendung aus dem Client Server
	Umfeld beschrieben. Also autarke Arbeitsweise mit regelmäßigem Datenabgleich
	zum Server. Beispielsweise eine Anwendung auf dem Laptop des Aussendienstmitarbeiters.
	Was sind die Zielgruppen? Endnutzer und keine Hobbyprogrammierer.
	Daher ist Komfort zu bieten und alles komplizierte zu vereinfachen
	um den Nutzer nicht von seiner eigentlichen Tätigkeit abzuhalten.
	Weshalb Update Mechanismen? Nichts ist so stabil wie der ständige
	Wandel an Anforderungen und Programmversionen! Was muss ein Update
	Programm aktualisieren können? Alles - angefangen vom eigentlichen
	Programm, über einzelne Programmmodule, weiter über Konfigurationsdateien
	oder lokale Daten (z.B. XML Dokumente, Kataloge) die zentral verwaltet
	werden bis hin zur kompletten Laufzeitumgebung wie der virtuellen
	Maschine. Das bedeutet auch, dass das Update Modul mit diversen Datenformaten
	umgehen können muss (JARs, DLLs, EXEs, Office Dokumente, PDFs und
	andere Datenformate). Welche Schritte beinhaltet ein Update? Bestimmen
	des Nutzerprofils (Welche Teile der Applikation werden von diesem
	Nutzer benutzt?). Bestimmen welche der zur Nutzung vorgesehenen Module
	veraltet sind. Module aktualisieren in möglichst kürzester Zeit und
	mit geringsten Resourcen wie z.B. Netzlast. Daher wird ein binäres
	Delta zwischen den aktuellen Modulen und den neuen Modulen ermittelt
	und über das Netz vom Server geladen. Auf der Grundlage dieses Deltas
	muss die Update Software den Client dann binär aktualisieren. Um
	das Delta zu bestimmen, muss in der Regel eine Dekomprimierung vorgenommen
	werden (JARs), siehe xdelta Verfahren. Die Aktualisierung der Anwendung
	erfolgt in der Regel wärend des Splash Screens. Es wird Version nach
	Version aktualisiert also nicht von 1.1. auf 1.5 sondern von 1.1.
	auf 1.2. dann gleich noch auf 1.3, 1.4 und zu letzt noch auf 1.5.
	Das kann für Reihenfolgeabhängigkeiten wichtig sein. Der Smart Client
	kann in diversen Umgebungen arbeiten auf die das Update gefasst sein
	muss - Online, Offline, USB Stick, Mehrbenutzer System, Laptop, ...
	Bei Mehrbenutzersystemen bietet es sich an, die Daten im Client korrekt
	zwischen Programm und Nutzerbereich zu trennen (z.B. Registry). Damit
	kann die Aktualisierung durch einen Nutzer eine Entlastung anderer
	Nutzer bedeutet, da die Software dann bereits aktualisiert ist und
	nur Nutzerspezifische Daten noch zu aktualisieren sind. Bei Offline
	Systemen, muss das Update Modul dafür sorgen, dass sowie eine Online
	Verbindung erstellt wird die Aktualisierung initialisiert wird. Oft
	sendet der Client nur die Informationen über die aktuelle Installationsversion
	an den Server. Der Server übernimmt dann die weitere Steuerung des
	Updates und der Deltaberechnung. Es gibt verschiedene Software zur
	Aktualisierung: Java Web Start - schlechtes Delta Verfahren Deploy
	Director, FLEXNET-Publisher, smartup - alle 3 sehr viele zusätzliche
	Features smartup unterstützt auch Profile.},
  groups = {public},
  interhash = {95d95d5960269ea48721c9a2ce9dc99b},
  intrahash = {f6a017e585c142382aa55e789d47ec93},
  keywords = {java, ria, rich, richclient, smart, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:12:28}
}

@BOOK{GVK025715232,
  title = {Modultest und Modulverifikation},
  publisher = {BI-Wiss.-Verl.},
  year = {1990},
  author = {Liggesmeyer, {Peter}},
  number = {4},
  series = {Angewandte Informatik},
  address = {Mannheim [u.a.]},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  gvk = {025715232},
  interhash = {cb26977f26a2896eef028a0ff09b14ce},
  intrahash = {e0716875b1a32ebfc9b246b8dc1a669a},
  isbn = {3411143614},
  keywords = {liggesmeyer, modultest},
  owner = {funthomas424242},
  pagetotal = {321},
  subtitle = {state of the art},
  timestamp = {2012-10-14 12:58:02},
  url = {http://gso.gbv.de/DB=2.1/CMD?ACT=SRCHA&SRT=YOP&IKT=1016&TRM=ppn+025715232&sourceid=fbw_bibsonomy}
}

@MISC{Limay2005,
  author = {Limaye, Bahar},
  title = {Writing Classpath-less J2EE Clients...},
  howpublished = {Internet Link},
  month = {Oct},
  year = {2005},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Problem bei der Implementierung von J2EE Client Anwendungen ist,
	dass immer das Server.jar mit im Client deployed werden muss. Das
	erhöht den Platzbedarf sowohl beim Deployment wie auch beim Starten
	der Applikation. Ausserdem entsteht eine enge Bindung an den Appserver
	Hersteller. Noch schlimmer wird es wenn der Client mit mehreren Applikationsserver
	(Weblogic, JBoss, ....) funktionieren soll. Das Problem sollte eigentlich
	über die Entkopplung durch RMI/IIOP gelöst werden. Fakt ist aber,
	dass es bis heute keine einheitlich funktionierende Lösung für leichtgewichtige
	Client Implementierungen gibt. Folgende Aspekte führen immer zu Problemen
	weil sie von den Herstellern unterschiedlich optimiert werden: +
	Clustering, Fail over und Loadbalancing + Native communication des
	Servers + Transaktionsmanagement + Security + Abwärtskompaeibilität
	+ Umfang der J2EE Features + Spezifisches JDK Der Author des Artikels
	baut einen eigenen Classloader für den Client und deployed auf dem
	Server ein ClassLoaderServlet. Der Classloader lädt dann die benötigten
	Klassen über das Servlet zum Client. Der Quelltext ist verfügbar
	unter: http://www.sys-con.com/java/sourcec.cf},
  groups = {public},
  interhash = {0a81ead833bc0d3d134882224b82a7e1},
  intrahash = {5e7462b43c206c5431ea5a50d3db67a8},
  keywords = {JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:12:23},
  url = {http://java.sys-con.com/node/47682}
}

@BOOK{LindhY1999,
  title = {The Java Virtual Machine Specification},
  publisher = {Addison Wesley},
  year = {1999},
  author = {Lindholm, Tim and Yellin, Frank},
  edition = {2nd},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {95298c75006af1672118074d02c4d909},
  intrahash = {5f0a2f1edd5ea4bea02619b0b78973ab},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{LoepeJO1987,
  title = {Compiler und Interpreter für höhere Programmiersprachen},
  publisher = {Akademie-Verlag},
  year = {1987},
  author = {Loeper, H. and Jäkel, H.-J. and Otter, W.},
  address = {Berlin},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {18cea996bb0d8890d333455adc36b334},
  intrahash = {b173d11985a586f1d51cc23be0836eb3},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Lohme2006,
  author = {Lohmeier, Sebastian},
  title = {Verteilte Systeme entwickeln mit Jini, Teil 2},
  journal = {Java Magazin},
  year = {2006},
  volume = {7},
  pages = {92 - 97},
  note = {Author ist Schüler},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Oberfläche Beschreibung einer Implementierung eines Mailservers auf
	der Grundlage Jini Starterkit. Interessante Begriffe: Jini Discovery
	- Finden von Services per Lookup Remote Events - Ermöglicht direkte
	Mailzustellung ohne Abfruf von Zeit zu Zeit Automatisch generierter
	Proxy - Bei Klassen die java.rmi.Remote implementieren wird automatisch
	ein Proxy generiert Smart Proxy - Wenn Automatischer Proxy nicht
	möglich, weil ein Parameter nicht serialisierbar ist. Leasing Konzept
	- Jini spezifisch leasen eines Services für eine bestimmte Zeit und
	Verlängerung falls benötigt ist normal James Mailserver - wird im
	Beispiel als Service registriert JERI - Nachfolger des RMI Protokolls
	- kann über Protokolle wie TCP, HTTP, HTTPS, SSL und Kerberos verwendet
	werden - Strange! Vermutlich hat der Autor keine Ahnung vom Schichtenmodell.},
  groups = {public},
  interhash = {af17a0fa8f5246949bb2f0c3870a7331},
  intrahash = {788e00aa01c8774ef9dfdea5508c3d76},
  keywords = {java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:12:18}
}

@ARTICLE{Lovis1998,
  author = {Loviscach, Dr. Jörn},
  title = {Absturzgefahr - Die Bug-Story},
  journal = {c't},
  year = {1998},
  volume = {19},
  pages = {156 - 165},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr guter Artikel mit vielen interessanten Beispielen aus aller Welt.
	Eignet sich hervorragend zur Erstellung einer naturgemäß unvollständigen
	Liste von Fehlerursachen.},
  groups = {public},
  interhash = {8c20d3ccd3efa5554ce7253f64cfcc05},
  intrahash = {4260541ea360087b2e8aa4101246caed},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:12:15}
}

@ARTICLE{Loewekamp2009,
  author = {Löwekamp, Lars},
  title = {JavaFX Tutorial - Teil 1: Twittern leicht gemacht},
  journal = {Java Magazin},
  year = {2009},
  volume = {9},
  pages = {44 - 52},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine kleine Einführung in die Grundlagen von JavaFX.},
  groups = {public},
  interhash = {4b589604a4d26982094ed3468d2dd276},
  intrahash = {dccf3169b961eb58b6152d373c303043},
  keywords = {imported},
  owner = {funthomas424242},
  review = {Die Hinweise zur Installation waren bereits veraltet. Aktuelle gefundene
	Seiten sind besser:  http://java.sun.com/javafx/1/tutorials/core/getStarted/
	 http://karussell.wordpress.com/2009/03/29/javafx-and-maven/  http://weblogs.java.net/blog/malenkov/archive/2009/06/ui_ontrols_in_j.html},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Maas1992,
  title = {Nürnberg - Geschichte und Geschichten},
  publisher = {Verlag A. Hofmann},
  year = {1992},
  author = {Maas, Herbert},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {38e07bd51d2b978d853dd05bcb72e1cd},
  intrahash = {7af91ce713a44955a62f17a09804ddcc},
  isbn = {3-87191-032-5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Mansm2008,
  author = {Mansmann, Urs},
  title = {Fehlschaltung - Arcor versetzt DSL Kunden},
  journal = {c't},
  year = {2008},
  volume = {1},
  pages = {72 - 73},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Leidensgeschichte über einen zufriedenen Arcor Kunden, welcher das
	neue Angebot nutzen wollte um schneller zu surfen. Doch er bekam
	erst nach allen anderen in seinem Ort den Anschluß. Zusätzlich noch
	falsche Rechnungen über mehrer 100 Euro und nach Einsatz von c't
	eine entsprechende Gutschrift und die Möglichkeit zur Telekom zu
	wechseln. Fazit: Arcor ist nur ein Beispiel - alle DSL Anbieter haben
	die gleichen Probleme. Kundenbriefe werden nicht vollständig gelesen:
	Aus einer Kündigungsandrohung wird eine Kündigung, aus einer neuen
	Flat Rate werden auf der Rechnung zwei und der falsche Betrag wird
	schnell in Rechnung gestellt - kann aber vom Service Mitarbeiter
	nicht storniert werden.},
  groups = {public},
  interhash = {4b813be3724e039b2b12e212e0516c84},
  intrahash = {503c791279483e2d0ab17888244ad8e2},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:12:02}
}

@ARTICLE{Mansm2007,
  author = {Mansmann, Urs},
  title = {Das schwarze Loch - Paypal Überweisung verschwindet spurlos},
  journal = {c't},
  year = {2007},
  volume = {14},
  pages = {74 - 75},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Nils B. eröffnet ein Paypal Konto und überweist kurz daraufhin Geld
	auf das Konto über Eingabe eines Codes. Das überwiesene Geld nutzt
	er dann zur Bezahlung für ein Rollenspiel. Beide Transaktionen werden
	erfolgreich durchgeführt. Einen Tag später wird der Zugriff auf das
	Konto eingeschränkt und Nils B. angehalten sein Bankkonto zu bestätigen.
	Die Bestätigung kann nicht mehr durchgeführt werden, da die 1Cent
	Buchungen von Paypal auf das Kundenkonto erst eintreffen nachdem
	der Kontozugang bereits vollständig gesperrt wurde. Nach einigen
	Hin und Her wird von Paypal alles storniert und beide Transaktionen
	zurückgerollt. Dabei erscheint aber kein Geld auf dem Konto von Nils
	B. -> 150€ sind angeblich zurücküberwiesen und damit verschwunden.
	Erst eine Anfrage von c't konnte Paypal zu vollständigen Recherche
	und zur Erstattung der Kosten bringen. Lessons Learned 1: Zwischen
	Eröffnung und erster Transaktion immer einige Zeit für Klärung von
	Unstimmigkeiten vergehen lassen. Lessons Learned 2: Seit Juli 2007
	ist Paypal nicht nur Finanzdienstleister sondern eine vollwertige
	Bank. Unregelmässigkeiten wie die beschriebenen werden dann von der
	luxemburgischen Bankenaufsicht recherchiert.},
  groups = {public},
  interhash = {ea55c8f202e452ebdb6e09d339ee1a1f},
  intrahash = {068ba2f742ee62d8ea30cdd28f3b4ee2},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:59}
}

@BOOK{Mar2002,
  title = {Agile Software Development, Principles, Patterns, and Practices},
  publisher = {Prentice-Hall, Inc},
  year = {2002},
  author = {Martin, Robert C.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {f9ae116c3f7d1bbcacfcad5551413fa6},
  intrahash = {4d513cc73eb3a2f3e55295e595935c49},
  keywords = {agile, development, patterns, practice},
  owner = {funthomas424242},
  timestamp = {2010-10-10 11:45:01}
}

@ARTICLE{MaschW2008,
  author = {Mascher, Dirk and Wand, Björn},
  title = {Serverside OSGi: JEE und OSGi integrieren},
  journal = {Java Magazin},
  year = {2008},
  volume = {7},
  pages = {81 - 88},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute und detaillierte Einführung in das Thema OSGi mit Java EE.
	Es wird eine interessante Connector Lösung vorgestellt. Einige Passagen
	blieben allerdings verschwommen, hier wird eine erweiterte Recherche
	benötigt. Prinzipiell scheint der Artikel eine praktikable Methode
	für die aktuell möglichen Gegebenheiten aufzuzeigen.},
  groups = {public},
  interhash = {b50fb627d5eefe6008487b12a2ac5c6d},
  intrahash = {28ac703cde91ee77b9f2c71da4cb6a5d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:57}
}

@ARTICLE{Massma2004,
  author = {Maßmann, Jens},
  title = {Es werde Ton - Dem Handy Klingeltöne beibringen},
  journal = {c't},
  year = {2004},
  volume = {24},
  pages = {231},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {8747a0b2c1dbb91bf2ec5a1e1b9a18dc},
  intrahash = {56ad09dbe4f14ecf095984cb8cf6b507},
  keywords = {imported},
  owner = {funthomas424242},
  privnote = {Softlink bei Heise 0424231},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Mathy2005,
  author = {Mathy, Frank},
  title = {Java im Gepäck - Über das Deployment von Java Applets},
  journal = {Java Magazin},
  year = {2005},
  volume = {4},
  pages = {17 - 22},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Geschichte der Applets und die daraus
	resultierende Verteilung der Java-Plugin Mechanismen. Es wird sehr
	gut erklärt wie man ein Applet erstellt und die entsprechenden Plugin
	Mechanismen nutzt, wie man Browser übergreifend arbeitet usw.},
  groups = {public},
  interhash = {a8e577bf7cee788c337e296add17b0c1},
  intrahash = {b86624510511c208475a95598be9e40e},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:55}
}

@BOOK{MeyerD1997,
  title = {Java Virtual Machine},
  publisher = {O` Reilly \& Associates},
  year = {1997},
  author = {Meyer, Jon and Downing, Troy},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {42d6395846bc7844a03c38b48dce9362},
  intrahash = {81bceb90e69a5fc0243dd67bc729abbe},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Micha2007,
  author = {Michael, Jörg},
  title = {Von Hintz und Kunz - Ein Programmpaket zur fehlertoleranten Anschriftensuche},
  journal = {c't},
  year = {2007},
  volume = {20},
  pages = {214 - 219},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Problematik der fehlertolleranten Suche.
	Es werden diverse Probleme (Anschriften, Länder, Familien,...) bei
	der Suche aufgezeigt. Das Programmpaket ist abrufbar über den Softlink
	0720214 auf heise.de. Es wird auch auf andere Programme bzw. Libraries
	eingegangen. Interessantester Verweis war aus meiner Sicht: phonetj
	auf http://opensource.softmethod.de/trac/opensource},
  groups = {public},
  interhash = {439eac7c5d3fb3c9b6d8bada2ce93815},
  intrahash = {58fc043d137d9631f5bb57e43f5460e7},
  keywords = {algorithmus},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:52}
}

@TECHREPORT{Sun1999-2000a,
  author = {Microsystems, Inc. Sun},
  title = {J2EE Connector Architecture 1.0 (Connector specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1999-2000},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {e7aee51bc8de06cff9526e7fa291e031},
  intrahash = {d79c2b38e10f2d5959491658e6b3b5fd},
  keywords = {Connector, J2EE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/j2ee/connector}
}

@TECHREPORT{Sun1999-2000b,
  author = {Microsystems, Inc. Sun},
  title = {Java API for XML Parsing Version 1.0 Final Release (JAXP specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1999-2000},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {276ad2ba81e3c1881746afcd39dfee61},
  intrahash = {95fa8c179e1836d2f5b9d912fd089473},
  keywords = {JavaEE, XML},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/xml}
}

@TECHREPORT{Sun1999-2000,
  author = {Microsystems, Inc. Sun},
  title = {Java Authentication and Authorization Service (JAAS) 1.0 (JAAS specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1999 - 2000},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {85ef43881703534a00327d823783d98d},
  intrahash = {c45eff068abb1f4038078c6b209696f8},
  keywords = {JAAS, JavaEE, specification},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/products/jaas}
}

@ELECTRONIC{SMic19981999,
  author = {Microsystems, Inc. Sun},
  year = {1998, 1999},
  title = {Java Naming and Directory Interface 1.2 Specification (JNDI specification).},
  language = {english},
  howpublished = {Internet Link},
  url = {http://java.sun.com/products/jndi},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {e7b9746a7a37c316a4beb344ecdc7587},
  intrahash = {75579599a85eff59c74707d45ff0e022},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ELECTRONIC{SMic19981999a,
  author = {Microsystems, Inc. Sun},
  year = {1998, 1999},
  title = {Java Transaction API, Version 1.0.1 (JTA specification).},
  language = {english},
  howpublished = {Internet Link},
  url = {http://java.sun.com/products/jts},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {e6a2ed3c76ea83555cc9cdf686c46c95},
  intrahash = {6dd31a549cbfb932ae96862dbd9a7487},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{Sun1997-1999,
  author = {Microsystems, Inc. Sun},
  title = {Java Transaction Service, Version 1.0 (JTS specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1997-1999},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0db287bbd74a646e622e655fe04faa7a},
  intrahash = {f46c977192d10f70f038c2e92f69a410},
  keywords = {JTS, JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/products/jts}
}

@TECHREPORT{Sun2003,
  author = {Microsystems, Inc. Sun},
  title = {Java™ 2 Platform Enterprise Edition Specification, v1.4},
  institution = {Sun Microsystems, Inc.},
  year = {2003},
  address = {Sun Microsystems, Inc. 4150 Network Circle, Santa Clara, California
	95054, U.S.A.},
  month = {Nov},
  __markedentry = {[FunThomas424242:6]},
  file = {j2ee-1_4-fr-spec.pdf:G\:\\home\\techdocs\\j2ee\\j2ee-1_4-fr-spec.pdf:PDF},
  groups = {public},
  interhash = {7b3bc8947f4c260978ab4d8785029fc8},
  intrahash = {995d3a7d5b85f5bbe768041ffdebc8c3},
  keywords = {JavaEE, specification},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{Sun2003a,
  author = {Microsystems, Inc. Sun},
  title = {Java™ 2 Platform Enterprise Edition Specification, v1.3},
  institution = {Sun Microsystems, Inc.},
  year = {2001},
  address = {Sun Microsystems, Inc. 4150 Network Circle, Santa Clara, California
	95054, U.S.A.},
  month = {Jul},
  __markedentry = {[FunThomas424242:6]},
  file = {j2ee-1_3-fr-spec.pdf:j2ee\\j2ee-1_3-fr-spec.pdf:PDF},
  groups = {public},
  interhash = {64a410f8f05f93af403c70957cdfe63a},
  intrahash = {154421c4a822fa8dfca73d8d7bf3e8d0},
  keywords = {JavaEE, specification},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ELECTRONIC{SMic1998,
  author = {Microsystems, Inc. Sun},
  year = {1998},
  title = {JDBC 2.0 Standard Extension API (JDBC extension specification)},
  language = {english},
  howpublished = {Internet Link},
  url = {http://java.sun.com/products/jdbc},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {431857f994938b60a0a3384318eb0325},
  intrahash = {e369a915797cee779e5a5342de0aaf94},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{Sun1998a,
  author = {Microsystems, Inc. Sun},
  title = {Java Message Service, Version 1.0.2 (JMS specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1998},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {5780d0907bd6ff90df3adee429c0dc7a},
  intrahash = {46187cd9fe9a38951d15dc7e4a8858dc},
  keywords = {JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/products/jms}
}

@TECHREPORT{Sun1998b,
  author = {Microsystems, Inc. Sun},
  title = {JavaMail API Specification Version 1.1 (JavaMail specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1998},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {3936c01b490b890d1e66d05d1ad2b960},
  intrahash = {d81b2d6a83d3cd0f24693c60af6f01da},
  keywords = {JavaEE, JavaMail},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/products/javamail}
}

@TECHREPORT{Sun1998c,
  author = {Microsystems, Inc. Sun},
  title = {JavaBeans Activiation Framework Specification Version 1.0 (JAF specification)},
  institution = {Sun Microsystems, Inc.},
  year = {1998},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {519ebb6c3c36f5f38944e451a2ce37e0},
  intrahash = {00f8b62aaf7a002d0d38ff434d4ba46c},
  keywords = {JavaBeans, JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://java.sun.com/beans/glasgow/jaf.html}
}

@ARTICLE{Minte2005,
  author = {Mintert, Stefan},
  title = {Messerscharf - XSLT und XPath in Version 2: viele Neuerungen},
  journal = {iX},
  year = {2005},
  volume = {8},
  pages = {60 - 64},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es werden die neuen Features von XSLT2.0 vorgestellt.},
  groups = {public},
  interhash = {462dc33bd9676ebad90fcce0f9d40795},
  intrahash = {581c39c5cb98a5ff2b5f5dbc74c7d6ed},
  keywords = {XML, XSL},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@TECHREPORT{MooreDGWV2004,
  author = {Moore, Bill and Dean, David and Gerber, Anna and Wagenknecht, Gunnar
	and Vanderheyden, Philippe},
  title = {Eclipse Development using the Graphical Editing Framework and the
	Eclipse Modeling Framework},
  institution = {IBM},
  year = {2004},
  month = {Jan},
  __markedentry = {[FunThomas424242:6]},
  file = {sg246302.pdf:G\:\\home\\tmichel\\workspace\\info.thomas-michel.projects.piug\\src\\site\\resources\\de\\stuff\\java\\sg246302.pdf:PDF},
  groups = {public},
  interhash = {2c8ccff255a8087e1d86029d82fe463b},
  intrahash = {93cf69bbf1943dbf2e40ac8fc162db40},
  keywords = {EMF, GEF, java, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://www.redbooks.ibm.com/redpieces/pdfs/sg246303.pdf}
}

@ARTICLE{Morling2009,
  author = {Morling, Gunnar},
  title = {Objekt: Zur Prüfung bitte !},
  journal = {Java Magazin},
  year = {2009},
  volume = {9},
  pages = {37 - 42},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Super Artikel zum Bean Validation Framework. Das Framework ist als
	JSR303 spezifiziert worden und befasst sich mit dem Thema, dass die
	Validation von Eingabewerten durch alle Schichten bis zur Datenbank
	die gleichen Validationsregeln benötigt. Es geht um die Zentralisierung
	dieser Regeln und dem Bereitstellen projektspezifischer Validationen.
	Dabei unterstützt der JSR Annotationen wie auch XML Deskriptoren.
	Der Artikel erwähnt die Deskriptoren nur befasst sich aber hauptsächlich
	mit den Annotationen, ihrer Verwendung und Erweiterung durch Bereitstellung
	eigener Annotationen. Zur Zeit im Status Recommended Final wird das
	Framework von Apache commons, vom Oval Projekt wie auch von Hibernat
	unterstützt. siehe folgende Links: http://validator.hibernate.org
	http://oval.sourceforge.net http://commons.apache.org/validator},
  groups = {public},
  interhash = {dbad9a7e428929d38581340a89d89643},
  intrahash = {5934d5d50430c8dd385e2f163ca07a37},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:46}
}

@ARTICLE{Muehle2005,
  author = {Mühlenschulte, A.},
  title = {Patent Pool für Open-Source-Software},
  journal = {Linux Magazin},
  year = {2005},
  volume = {10},
  pages = {18},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Meldung das die Open Source Development Labs (OSDL) ein Patent für
	OpenSource bereitstellen um im Rahmen der bevorstehenden Rechtsstreitigkeiten
	zum Patentschutz (aktuell sollte das Patentrecht auf Softwarealgorithmen
	ausgeweitet werden) ein brauchbares Gegenmittel zu besitzen. Die
	OSDL existiert in der damaligen Form nicht mehr, siehe: http://en.wikipedia.org/wiki/Open_Source_Development_Labs},
  groups = {public},
  interhash = {4b72034a8ac3f2883e2b4f81be46aae6},
  intrahash = {4866b60f38dc2dd33ed4d2a5fc7a2d56},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:34},
  url = {http://web.archive.org/web/*/http://osdl.org/about_osdl}
}

@ARTICLE{Mueller2008,
  author = {Müller, Björn},
  title = {Wie rich darf's denn sein?},
  journal = {Java Magazin},
  year = {2008},
  volume = {12},
  pages = {38 - 42},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Absolut super Artikel zur Architektur zwischen Server und Client.
	Das erste Mal werden sinnvolle Definitionen zu den Begrifflichkeiten
	gebracht und nicht dieser historische Kauderwelch. Wichtigste Definition:
	Fat bedeutet alles was Teile der Businesslogik auf dem Client hält.
	Das fängt schon mit einfachen Validierungen die Programmspezifisch
	sind an - also alles was sich nicht generisch z.B. über reguläre
	Ausdrücke formulieren lässt. Die Berechnung des Preises im Warenkorb
	auf dem Client ist ein sicheres Zeichen für Fat Client, da hier diverse
	Daten zum Client geladen und dort verarbeitet werden müssen. Sprich
	Logik auf dem Client ist Fat mit ganz wenigen Ausnahmen - die in
	der Regel keine Rolle spielen. Typische Beispiele: Die Client-Server
	Anwendungen der 80er ala Powerbuilder. Die Logik war auf dem Client
	nur die Daten waren auf dem Server. Es werden 2 Architekturtypen
	dargestellt und verglichen: 1) Generischer Rich Client der Thin Ansatz
	2) Der implementierte Rich Client der Fat Ansatz zu 1) Es ist ein
	Client gemeint, der wirklich nur das Rendering der Dialoge übernimmt.
	Bei den Mainframes in den 70er war es das Terminal welches Character
	vom Server bekam und wieder welche zurück schickte. In den 90er war
	es der Browser der HTML (auch Character) bekam und zurück schickte.
	Wichtige Merkmale: Der Zustand liegt auf dem Server. Verarbeitung
	erfolgt auf dem Server. Entscheidungen erfolgen durch Roundtrip über
	den Server. (Client ist dumm kann nichts entscheiden, weiss nicht
	mal was er darstellt). Vorteile: Client ist für viele Anwendungen
	einsetzbar (egal welche er rendern muss - hauptsache alle kommunizieren
	im unterstützten Format). Super Trennung zwischen Client und Server.
	Zur Entwicklung des Clients und der Anwendung können komplett unterschiedliche
	Entwicklerteams genutzt werden die nicht von einander wissen. Den
	Client entwickeln ein paar Experten (z.B. Mozilla, oder Microsoft).
	Die Serveranwendung entwickeln ganz andere Experten. Keine großen
	Sicherheitskonzepte benötigt, da die Businessschnittstellen nur vom
	Server angesprochen werden. Nach meiner Meinung wichtig ist allein,
	das man immer sicher ist mit dem richtigen Client zu kommunizieren.
	Nachteile: Vorhaltung des Zustandes auf der Datenbank bringt die
	altbekannten Probleme beim Passivieren und Aktivieren von Sessions
	oder der Verteilung des Zustandes im Cluster oder ähnliches. Es kommt
	schnell zu Resourcenengpässen auf dem Server - hier muss von vornherein
	eine Skalierbare Architektur bedacht werden. zu 2) Teile der Logik
	werden auf dem Client implementiert. Damit können die Roundtripps
	zum Server verringert werden weil der Client eine Weile autark arbeitet.
	In der Praxis geht die Rechnung nicht immer auf, da wenn Du einen
	Teil der Logik auf den Client ziehst evtl. viel andere Logik mit
	rüber muss oder doppelt implementiert wird. Die Schnittstellen auf
	dem Server müssen zusätzlich gesichert werden, da viele Clients über
	viele Tore an den Server rangehen und dort direkt Businessmethoden
	aufrufen. Die Last verteilt sich allerdings besser, da schon viel
	Last auf den Clients liegt und der Server nur noch mittlere Last
	abbekommt (Zustandssync an definierten Punkten). Entschungsempfehlung
	des Autors: - abhängig vom konkreten Szenario 1) bei + umfangreiche
	Anwendungen mit komplexer, datenabhängiger Logik (also fast alle
	Webanwendungen) 2) bei + Anwendungen bei denen ein komplexes Datenobjekt
	an den Client gesendet wird, dort bearbeitet wird und wieder zurück
	gesendet wird. (typisch Tabellenbearbeitung) Aus meiner Sicht auch
	für Anwendungen der Aussendienstmitarbeiter sinnvoll allerdings muss
	man dort ein geeignetes Datenobjekt finden was nicht geshared ist.},
  groups = {public},
  interhash = {3013d2554994d41400b084155a2ee836},
  intrahash = {ad4ece900684ca41822c7009682fb926},
  keywords = {ria, richclient},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:09:38}
}

@ARTICLE{Mueller2010,
  author = {Müller, Florian},
  title = {Tour de GUI: Captain Casa},
  journal = {Java Magazin},
  year = {2010},
  volume = {5},
  pages = {44},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Im Rahmen der Kolumne Tour de GUI eine kleine Laudatio zum Captain
	Casa Framework.},
  groups = {public},
  interhash = {6b4b9d3417e1ef9b255a28f3b1690a34},
  intrahash = {c5e12dc9c5cab66b0bd37cc862d77d98},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Mueller2009,
  author = {Müller, Florian},
  title = {Kolumne: Tour de GUI},
  journal = {Java Magazin},
  year = {2009},
  volume = {7},
  pages = {46},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Beschreibt genau die Situation zum Rich, Thin, Fat Client. Alles Marketing
	Begriffe mit Historie. Am besten vorher klären was man darunter versteht.
	Guter Artikel zur Argumentation warum man es vorher klären sollen
	- soll ja Leute geben die glauben es kann nur so sein wie sie denken.},
  groups = {public},
  interhash = {5c762ec782390c16df70aa77d03012bc},
  intrahash = {303fdb99d51b664b45c8ff3799f66180},
  keywords = {fat, ria, rich, richclient},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Naber2005,
  author = {Naber, Daniel},
  title = {Herr der Suche - Eigene Anwendungen mit Volltextsuche erweitern},
  journal = {c't},
  year = {2005},
  volume = {7},
  pages = {196 - 199},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung wie man Lucense benutzen kann um in eigenen Anwendungen
	eine Volltextsuche zu integrieren.},
  groups = {public},
  interhash = {2e178e0da94ab2cd21b278dbe66d6120},
  intrahash = {c5a2b30a92728e66d527879a3377f27b},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Nebelo2006,
  author = {Nebelo, Ralf},
  title = {Umstiegshilfe - OpenOffice-Makros in Basic programmieren},
  journal = {c't},
  year = {2006},
  volume = {7},
  pages = {200 - 205},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung in die Programmierung von OpenOffice Makros über
	VBA und UNO.},
  groups = {public},
  interhash = {5b3454c6135be74e287ee0e0d8588bfe},
  intrahash = {784622185863d8a4eed5a4430d28d3b8},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Neuma2005,
  author = {Neumann, Thomas},
  title = {Rich Thin Clients für Web-Anwendungen},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {1},
  pages = {70 - 73},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Artikel über die Anwendung des Half-Object with Protocol Patterns
	bei Rich Clients. Es wird das Framework von canoo vorgestellt. Das
	Framework ist echt super aber leider nicht kostenfrei.},
  groups = {public},
  interhash = {16437a73dd423b6ce2ecbfe5095b4e01},
  intrahash = {4a6be208a2aecf8fa5b00623c72af325},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Niebh2002,
  title = {Keine Angst vor steilen Pisten - Trekking entlang der Saale},
  year = {2002},
  editor = {Eigenverlag},
  author = {Niebhagen, Ingrid},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {d6dda47d914cd09bd41db7b7d2a5e7b5},
  intrahash = {af48dbc402cfdefc1685a6183e1896fb},
  keywords = {Radeln, Radwandern, Saale},
  owner = {funthomas424242},
  privnote = {Ingrid NiebhagenMartinstraße 3Tel: 03471-317049},
  timestamp = {2010-09-25 12:29:06}
}

@ARTICLE{Nitzg2005,
  author = {Nitzgen, Ralf},
  title = {SSL bietet nur scheinbar Sicherheit},
  journal = {Computerwoche},
  year = {2005},
  volume = {16},
  __markedentry = {[FunThomas424242:6]},
  abstract = {HTTPS Virenscanner (z.B. in Unternehmens Netzwerken) arbeiten nach
	dem Konzept des "Man in the middle". Der Browser fragt eine Website
	nach einer verschlüsselten Verbindung an. Der https Proxy des Unternehmens
	baut eine verschlüsselte Verbindung zur angeforderten Website auf
	und bildet dabei einen Endpunkt der Verbindung. Von dort geht es
	unverschlüsselt zum Virenscanner. Dann baut der Proxy eine verschlüsselte
	Verbindung zum Client (in der Regel Browser) auf und leitet die gescannten
	Daten verschlüsselt an diesen weiter. Ergo, jeder der Zugriff auf
	den Server des Proxies hat, kann unverschlüsselt mitlesen. Was wenn
	ein solcher Proxy im Internet postiert wird mit dem Ziel möglichst
	viel Traffic zu durchleuchten - z.B. bei einem Backbone? Lassen sich
	damit effizient bzw. gezielt Daten ausschnüffeln? Funktioniert Echolon
	so? Auf diese Fragen hält der Artikel keine Antworten bereit.},
  groups = {public},
  interhash = {f4524cacc43b8421a84d2f60f49be043},
  intrahash = {55f95a238d06526d7dde7a6a8d04a833},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:09:13}
}

@ELECTRONIC{Novakovic2010,
  author = {Novakovic, Mirko and Reitbauer, Alois},
  year = {2010},
  title = {Der Garbage Collector - das unbekannte Wesen?},
  organization = {Agile Software GmbH},
  url = {http://www.codecentric.de/de/publikationen/artikel/jm-garbage-collector.html},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {c3c68b9ef4502a16c09d44ba0c1e071d},
  intrahash = {64052d2a930cf3e2f1255a687d04b229},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{OJ2010,
  author = {Ochs, Oliver and Jörg, Jochen},
  title = {Maskenball},
  journal = {Java Magazin},
  year = {2010},
  volume = {8},
  pages = {45 - 48},
  __markedentry = {[FunThomas424242:6]},
  abstract = {2. Teil einer sehr detaillierten Einführung in die Google APIs. Es
	geht um Google Wave und dabei sowohl um das Client API wie auch um
	Gadgets. Alles mit anschaulichen Beispielen. Ein sehr gelungener
	Artikeln.},
  groups = {public},
  interhash = {846666c1d2acec98b59ec5de020334b6},
  intrahash = {4143064cf580001d19105938cc2fad0f},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Onnen2006,
  author = {Onnen, Tjark},
  title = {Java APIs for Bluetooth},
  journal = {Java Magazin},
  year = {2006},
  volume = {12},
  pages = {85 - 89},
  number = {12},
  month = {December},
  __markedentry = {[FunThomas424242:6]},
  abstract = {JSR - 82 ist API für Buetooth mit Java. Entwicklertoolkit ist das
	WTK2.3 import javax.bluetooth.* LocalDevice aLocalDevice = LocalDevice.getLocalDevice();
	String adress=aLocalDevice.getBluetoothAddress(); String friendlyName=aLocalDevice.getFriendlyName();
	DeviceClass deviceClass = aLocalDevice.getDeviceClass(); int servicesMask=aLocalDevice.getServiceClasses();
	Die servicesMask ist bitorientiert aufgebaut (im Artikel Abb 1).},
  groups = {public},
  interhash = {32bd569957328861b770ff9eb00df605},
  intrahash = {2f9c34b3e19d269786228a8b4cae3974},
  keywords = {java, technologie},
  owner = {funthomas424242},
  privnote = {JSR82},
  timestamp = {2010-09-12 18:08:58}
}

@ARTICLE{Oser2005,
  author = {Oser, Philipp},
  title = {Gut eingepackt - Frameworks erleichtern J2EE-Entwicklung},
  journal = {iX},
  year = {2005},
  volume = {1},
  pages = {64 - 68},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel zeigt Schwachstellen der J2EE Konzepte auf. Es wird darauf
	verwiesen, dass unzählige Frameworks im Einsatz sind um diese Schwachstellen
	zu schließen. Dabei wird sogar festgestellt, dass häufig ein Eigenbau
	der Framworks erfolgt. Es werden die gängisten allgemeinen Frameworks
	kurz erwähnt: 1) Spring Application Framework (www.springframework.org)
	2) Keel (www.keelframework.org) 3) Real Methods Framework (j2eeframework.com)
	4) Sweet DEV (www.ideotechnologies.com) 5) Rubin (www.elbtec.de/products/rubin
	6) Oracle ADF (otn.oracle.com/products/jdev/index.html 7) Accenture
	GRNDS (www.accenture.com) 8) Andro MDA (www.andromda.org) 9) OptimalJ
	(www.compuware.com/products/optimalj) 10) Arcstyler (www.arcstyler.com)
	Auf folgende Frameworks wird kurz eingegangen: 1) Spring Application
	Framework (Meta Framework) 2) Keel (Meta Framework) 3) Leaf},
  comment = {},
  groups = {public},
  interhash = {0e5e26b73827da7eeae4eaf1f1e627f6},
  intrahash = {06b907e6491af98eaa0c020593be4773},
  keywords = {j2ee, java-ee},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:17:22}
}

@BOOK{Oester1998,
  title = {Objektorientierte Softwareentwicklung},
  publisher = {Oldenbourg Verlag},
  year = {1998},
  author = {Östereich, Bernd},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {7bdd90adb785a03d95d2966b2f3e1074},
  intrahash = {048053295ee348628106ff5ce6091a10},
  isbn = {3-486-24787-5},
  keywords = {UML},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Oster1998,
  author = {Ostermann, Klaus},
  title = {Programmieren mit Swing - GUI Entwicklung mit Java},
  journal = {c't},
  year = {1998},
  volume = {18},
  pages = {168 - 173},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Gute Einführung in die Programmierung mit Swing anhand praktischer
	Beispiele. Vermutlich sind die Beispiel aber inzwischen veraltet
	und die benutzten Klassen deprecated, da sich ja in der Vergangenheit
	einiges an Swing getan hat.},
  groups = {public},
  interhash = {e5a20ce142c64abc9a26ea6a29771f2a},
  intrahash = {e1f3530b611f9aceddef542ea9562aa5},
  keywords = {java, swing},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:17:19}
}

@ARTICLE{Paga2007,
  author = {Paga, Marco},
  title = {Intelligenter Kühlschrank},
  journal = {Java Magazin},
  year = {2007},
  volume = {3},
  pages = {45 - 47},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Erläutert hervorragend und anschaulich an einem Beispiel die Funktionsweise
	der RFID Technologie. Das Beispiel geht von einem Kühlschrank aus,
	welcher ab und zu mal scannt welche Produkte eingelagert sind (z.B.
	nach dem Türschliessen) RFID Reader können mehrere Antennen besitzen
	und haben in der Regel einen Netzwerkanschluss. An folgenden Standards
	wird bereits gearbeitet: + EPC (Elektronic Product Code) ist besser
	als der aktuell verwendete Barkode. Durch Barcode lässt sich herausfinden
	ob es sich um eine Milchtüte oder eine Suppenkelle handelt aber nicht
	welche Milchtüte genau, welche Charge, welche Seriennummer oder so.
	Letzteres soll der EPC leisten. + ONS (Object Name Service) Spezifikation
	im Fluss soll URLs für einen EPC generieren auf denen dann Detailinformationen
	zum Produkt nachlesbar sind. + PML (Physical Markup Language) ist
	eine XML basierte Sprache welche zum Datenaustausch zwischen Reader
	und Anwendung bzw. zum Transport zwischen Firmen eingesetzt werden
	soll. + IBM hat ein sauberes Modell für RFID Technologie aufgesetzt:
	IBM RFID Solution Domain Model. Dieses wird vom Author empfohlen.
	Zwei aktuelle Marktführer Produkte: + Oracle Sensor Edge Server +
	IBM WebSphere RFID Solution (RFID Solution Model, Premises Server,
	Business Integration Server) Nützliche Links: EPC: www.gs1-germany.de/...
	ONS: www.gs1-germany.de/... PML: www.gs1-germany.de/... IBM RFID
	Handbook: www.redbooks.ibm.com/... Beispiel: www.joy2006.de},
  groups = {public},
  interhash = {0162debd163f65e3a016545fd30f0e6f},
  intrahash = {8a04b104204955ac457c5b0ae8614108},
  keywords = {jini},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:17:14}
}

@ARTICLE{journals/spe/ParrQ95,
  author = {Parr, Terence John and Quong, Russell W.},
  title = {ANTLR: A Predicated-  LL(k)  Parser Generator.},
  journal = {Softw., Pract. Exper.},
  year = {1995},
  volume = {25},
  pages = {789-810},
  number = {7},
  __markedentry = {[FunThomas424242:6]},
  comment = {dblp},
  groups = {public},
  interhash = {3308267cfcf16bf246cee93cc12dbceb},
  intrahash = {19b9753096ead924e8fbbea4e1bff846},
  keywords = {antlr, dblp, generator, parser},
  owner = {funthomas424242},
  privnote = {Ein Ausdruck vom Studium den ich noch nicht gelesen habe. Scheint
	inzwischen ja ein Standard zu sein.},
  timestamp = {2010-11-14 20:16:07},
  url = {http://www.antlr.org/article/1055550346383/antlr.pdf}
}

@ARTICLE{Peinl2005,
  author = {Peinl, René},
  title = {XML hübsch gedruckt - XSL Formatting Objcts schlagen die Brücke von
	XML zu PDF},
  journal = {c't},
  year = {2005},
  volume = {7},
  pages = {184 - 187},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Sammlung von Detailproblemen beim Erstellen von XSL Templates
	zum konvertieren aus Word oder OpenOffice in PDF.},
  groups = {public},
  interhash = {d650ad69d350368b85252661d7a2e88a},
  intrahash = {13c6fa47098050b2a71a3cb836461a81},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{PC2010,
  author = {Peitzker, Stefanie and Cramer, Irene},
  title = {Voll durchstarten mit dem Regelprojekt},
  journal = {Java Magazin},
  year = {2010},
  volume = {5},
  pages = {108 - 110},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel befasst sich mit der Einführung eines Regelsystems in
	einer Firma. Das System wird zur Beschreibung der Geschäftsprozesse
	und Geschäftsprozesslogik verwendet. Die Autorinnen erläutern welche
	Aspekte bei der Einführung zu beachten sind und wie am besten vorgegangen
	wird. Es wird darauf hin gewiesen, dass sich eine vorhandenen und
	möglichst lückenlose Beschreibung der Geschäftsprozesse äußerst förderlich
	auswirkt. Es gibt Gestaltungsformen in denen letzlich der Fachbereich
	die Regeln selbst pflegt bis hin zu Varianten in denen die IT die
	Regeln pflegt und der Fachbereich ein Review durchführt. An ein Regelsystem
	werden folgende Anforderungen gestellt: + visuell arbeitend - unterstützt
	die Nutzung der dokumentierten Regeln zur Abstimmung mit dem Fachbereich
	+ API Zugriff auf Regelsystem wird gefordert + Support eines Entwurfsmodus
	+ Unterstützung für Strukturregeln Implizit empfohlenes System -
	visual rules.},
  groups = {public},
  interhash = {0e22888d791a6fc4a997cb260518fde1},
  intrahash = {36877e464e2c2b71bafebb45aeec1da3},
  keywords = {rulesengine},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:17:08}
}

@ARTICLE{PCA2010,
  author = {Peitzker, Stefanie and Cramer, Irene and Anders, Mario},
  title = {Effizient zum Ergebnis navigieren},
  journal = {Java Magazin},
  year = {2010},
  volume = {9},
  pages = {84 - 88},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {932164cac35e19c7a34ef43f2361cced},
  intrahash = {034d84bbb6b4a768064189f4c4331177},
  keywords = {regelsysteme, rulesengine},
  owner = {funthomas424242},
  timestamp = {2010-09-12 21:08:59}
}

@ARTICLE{PP2009,
  author = {Petersen, Dominique and Pohlmann, Norbert},
  title = {Seeming Secure Layer - Erschreckende Sicherheitsdefizite bei Internetanwendungen},
  journal = {Java Magazin},
  year = {2009},
  volume = {1},
  pages = {106 - 109},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel informiert über die trügerische Sicherheit bei der Verwendung
	des SSL Protokolls im Internet. Es werden Detailprobleme aufgezeigt
	und Statistiken ausgewertet.  Als Fazit stellt sich heraus, dass
	allgemein sowohl Defizite bei der Serverkonfiguration wie auch bei
	der Clientkonfiguration vorliegen.  Es wird erläutert nach welchen
	Richtlinien der Browser die benutzten Protokollparameter mit dem
	Server aushandelt. Verschlüsselungsalgorithmus und Schlüssellänge.
	 Als Fazit wird festgestellt, dass Im schlimmsten Fall sich Browser
	und Server auf Klartext einigen obgleich ssl benutzt wird.  Die Schuld
	sieht der Autor vorwiegend bei den Nutzern.},
  groups = {public},
  interhash = {56b570d29f19de77e07ca45a1f4d7b53},
  intrahash = {24b325baa4512a8ad8a854ca68bf1a8f},
  keywords = {imported},
  owner = {funthomas424242},
  review = {Der Artikel ist sehr interessant - das Fazit allerdings etwas weltfremd.
	Der Autor verkennt völlig, dass der Nutzer keine Möglichkeit hat
	imap mit tsl zu betreiben wenn es der Provider nicht anbietet. Außerdem
	scheint die Einsicht nicht vorzuliegen, dass viele User an bestimmte
	Provider gebunden sind.},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{PL2010,
  author = {Plesser, Markus and Lichtenberger, Daniel},
  title = {Tool-Radar: [fleXive] Content Repository},
  journal = {Java Magazin},
  year = {2010},
  volume = {9},
  pages = {22},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel stellt das Open Source Project flexive.org vor. Es werden
	die speziellen Unterschiede bzw. Features des von flexive realisierten
	Content Repositories gegenüber anderen Implementierungen angepriesen.
	Eine Begriffserklärung zu Fachbegriffen wie Content Repository, datenzentrierten
	Anwendungen oder CMIS erfolgt nicht.},
  comment = {},
  groups = {public},
  interhash = {564e30a4ff019fa8622d58e0ff6d1efa},
  intrahash = {1b36f1110c8f4754773ffe4b94a66305},
  keywords = {cms, content-repository, jsr170},
  owner = {funthomas424242},
  privnote = {Interessante Technologie. Leider werden die verwendeten Fachbegriffe
	nicht erklärt. Zumindest einen Hinweis hätte ich jeweils erwartet.},
  timestamp = {2010-09-11 23:44:33}
}

@ARTICLE{Popp2010,
  author = {Popp, Gunther},
  title = {Dependency-Magie - Einblicke in das Dependency-Management von Maven},
  journal = {Java Magazin},
  year = {2010},
  volume = {11},
  pages = {100 - 105},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das Management der Abhängigkeiten bei Maven.
	Nach einer kurzen Betrachtung der benötigten Konzepte geht der Autor
	sofort zur Beschreibung der Probleme über. Es werden Szenarien an
	praktischen Beispielen gegeben und die dabei wirkenden Mechanismen
	von Maven erklärt. Sehr gut sehr praktisch.},
  comment = {Kurze Betrachtung der Gültigkeitsbereiche compile, provided, test,
	runtime, system und import auf die Artifaktauslieferung (finale Archiv).Tabellarische
	Übersicht welcher Scope bei transitiven Abhängigkeiten wie verändert
	wird. Klarstellung, dass jede Versionsangabe in üblicher Form für
	Maven nur eine Empfehlung darstellt. Erläuterung der Syntax für konkrete
	Versionen z.B. [1.00].Anzeige der Abhängigkeiten über: mvn dependency:tree},
  groups = {public},
  interhash = {62ab9ad75bbb5474ad6274d27951fe40},
  intrahash = {ef10bb1bc1be7806bc3fba53417bbd5f},
  keywords = {dependency, management, maven},
  owner = {funthomas424242},
  timestamp = {2010-11-17 00:15:21}
}

@ARTICLE{Poesch2000,
  author = {Pöschmann, Thomas},
  title = {Der Kanal - Socketprogrammierung in Java},
  journal = {Java Magazin},
  year = {2000},
  volume = {8},
  pages = {23 - 31},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {7d5af72ba1d9841ce754347939013012},
  intrahash = {db197e1767f634924f477ff001c8b574},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{PoeschK2000,
  author = {Pöschmann, Thomas and König, Michael},
  title = {Die Brücke am Fluss - JNI und die neue COM-Bridge am Beispiel vorgestellt},
  journal = {Java Magazin},
  year = {2000},
  volume = {8},
  pages = {32 - 40 ff.},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in JNI mit Beispielen für: + Java ruft DLL +
	DLL startet Java + Mapping der Typen Über die COM Bridge bzw. J2EE
	CAS kann jede C Anwendung auch auf den Java Applikationsserver zugreifen.
	Das dabei verwendete Protokoll ist RMI-IIOP.},
  groups = {public},
  interhash = {6be09b7ac0c9bb209e7e4d4c613ad7a2},
  intrahash = {67601655b30a946fb65b334d680a5d09},
  keywords = {combridge, java, jni},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:40}
}

@ARTICLE{Prech1998,
  author = {Prechelt, Dr. Lutz},
  title = {Der persönliche Softwareprozeß},
  journal = {c't},
  year = {1998},
  volume = {19},
  pages = {174 - 175},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Excellente Einführung in den Persönlichen Softwareprozeß. 1995 von
	Watts Humphrey eingeführt, siehe Watts Humphrey, A Discipline for
	Software Engineering, Addison Wesley, 1995 Konzepte: "Erfasse während
	der Programmentwicklung die Arbeitszeit und die resultierende Programmgrö0e
	(in Zeilen Quellcode) jeweils separat für jedes Modul oder jede Klasse.
	Notiere die Anzalhl von Przeduren oder Methoden. Darus entsteht im
	Laufe der Zeit eine Datensammlung - die "historischen Daten". Auf
	deren grundlage läßt sich der persönliche Zusammenhang zwischen Programmgröße
	und Arbeitszeit bestimmen." Außerdem sollen die gefundenen Fehler
	und ihre Ursache vermerkt werden. Related Links: http://www.sigs.de/publications/os/2002/06/gruetter_OS_06_02.pdf},
  groups = {public},
  interhash = {accb95aba43f78d083ddd30aa18dfa62},
  intrahash = {228f964fa962b74fb5e8dc4f8eb62e57},
  keywords = {psp},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:17:02},
  url = {http://www.ipd.uka.de/PSP/}
}

@ARTICLE{Preissel2010,
  author = {Preißel, René and Stachmann, Björn},
  title = {Wird Git Subversion beerben?},
  journal = {Java Magazin},
  year = {2010},
  volume = {6},
  pages = {76 - 82},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Im Artikel wird Git, eine neue Versionsverwaltung, vorgestellt. Git
	ist von Linus Torwald erdacht worden. Es sollte einige Features zusätzlich
	zu SVN besitzen. Das Konzept lässt sich wie folgt zusammenfassen:
	1) Inhalte von Dateien werden in sogenannten Blob-Objekten gespeichert.
	Mit Blob ist ein binär gepacktes Format gemeint. Zu jedem Blob wird
	ein SHA-1 Hash berechnet. 2) Verzeichnisse werden als Tree-Objekte
	gespeichert. Zu jedem Tree-Objekt wird ein SHA-1 Hash gebildet welcher
	die Hash's der im Verzeichnis entaltenen Dateien (Hash des zugehörigen
	Blob-Objektes) und Unterverzeichnisse (Hash's der Tree Objekte) berücksichtigt.
	3) Bei jedem Commit wird eine Art Snapshot vom aktuellen Hash gespeichert.
	Jedem Commit Objekt ist ebenfalls ein Hash zugeordnet. Der Hash wird
	gebildet aus dem Hash des zugehörigen Tree Objektes und dem Hash
	des oder der Vorgänger Commit-Objekte. Damit enthält der Hash jedes
	Commit Objekt die gesamte Historie. Ein Branch ist lediglich eine
	Referenz auf ein Commit Objekt. Wird ein Branch ausgescheckt werden
	die einzelnen Objekte als lokales Working Directory erstellt. Nur
	in der Wurzel befindet sich ein Verzeichnis .git mit Meta Infos.
	Bei Änderungen mit folgendem Commit wird ein neues Commit Objekt
	erzeugt und die Refferenz des Branches auf das neue Commit Objekt
	verschoben (der Branch zeigt jetzt auf das neue Commit Objekt). Das
	Konzept besitzt scheinbar folgende Features: + es ist schnell + es
	wird kein Server Repository benötigt, alle Änderungen erfolgen zunächst
	lokal. Es ist aber möglich ein Server Repository aufzusetzen. Dies
	ist bei wachsender Größe ohne Probleme möglich und der Normalfall.
	+ Verschiebungen von Dateien können größtenteils automatisch erkannt
	werden + Bei der Zusammenarbeit mit anderen Entwicklern genügt es
	wenn diese Leserechte auf das eigene, lokale Repository besitzen.
	+ Jeder Branch stellt nur eine Refferenz auf ein Commit Objekt dar
	und ist sehr schnell angelegt + Es gibt einen Push und Pull Mechanismus.
	Wenn ein Entwickler einen neuen Stand erarbeitet hat, kann er über
	Pull die anderen Entwickler informieren. Diese holen sich seine Änderungen
	per Add-remote in ihr locales Repository und commiten wenn sie wollen.
	Beim Push würde der Entwickler wirklich seinen Code in ein anderes
	(nicht sein lokales) Repository rüberschicken. Dazu benötigt er auf
	dem Remote Rechner Schreibrechte. Wir bei größeren Projekten angewandt
	(Serverlösung). + Merging scheint sehr einfach zu funktionieren +
	Konflikte müssen weiterhin per Hand bereinigt werden + Es sind Commits
	auf Teile der Datei möglich. Heisst wenn ein Entwickler möchte, kann
	er von 3 durchgeführten Änderungen nur eine auswählen und diese Commiten
	und anschliessend die anderen beiden. Dazu gibt es einen interaktiven
	Mode. Toolunterstützung + Kommandozeile + GUI Tools + Eclipse Plugin
	+ ... Verweise: 1) http://youtube.com/watch?v=4XpnKHJAok8 2) http://git-scm.com/},
  comment = {},
  groups = {public},
  interhash = {a5407df7aea5931e9df48b54cfa3d1d2},
  intrahash = {782f90b572f0e1e8d4c846d8fa504578},
  keywords = {git, tools, versionsverwaltung},
  owner = {funthomas424242},
  timestamp = {2010-09-21 21:49:59}
}

@TECHREPORT{Maven2001-2005,
  author = {Project, Apache Maven},
  title = {Maven Documentation},
  institution = {Apache Software Foundation},
  year = {2001 - 2005},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {820445ac5e361031848ae80b4175dfec},
  intrahash = {79ae40257a366f737fb48fbdf569192d},
  keywords = {imported},
  organization = {Apache Maven Project},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://maven.apache.org/guides/index.html}
}

@ARTICLE{Raner1999,
  author = {Raner, Mirko},
  title = {Virtuelles Zubehör - Implementation der Java Virtual Machine (Teil
	2)},
  journal = {Java Magazin},
  year = {1999},
  volume = {6},
  pages = {34 - 38},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine Serie zum Bau einer Java VM. Der Artikel beschreibt sehr schön
	an was man alles denken muss wenn man eine Java VM baut. Zu jedem
	Aspekt werden auch die entsprechend zur Verfügung stehenden Konzepte
	aufgeführt und an Beispielen erläutert. In diesem Teil wird auf jeden
	Fall sehr detailliert auf den Garbarge Collection Bereich eingegangen.
	Weitere Bereiche die im Artikel behandelt werden sind: Exception
	Manager, ClassLoader, Security Manager, Native Interface und Thread
	Scheduler. Meiner Ansicht nach geht der Author aber teilweise davon
	aus, dass der Leser mit der Java Language Specification und mit der
	Spezifikation des Byte Codes der Java Virtuellen Maschine vertraut
	ist.},
  groups = {public},
  interhash = {7722b8e47b6eefaea280cb8449374833},
  intrahash = {a3e90854c29b9b6156f9950709e67196},
  keywords = {jvm},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:29}
}

@ARTICLE{RN2009,
  author = {Reitbauer, Alois and Novakovic, Mirko},
  title = {Problemkind JDBC-Schicht - Datenbank Patterns Teil 3},
  journal = {Java Magazin},
  year = {2009},
  volume = {2},
  pages = {53 - 56},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Im Artikel wird der JDBC Layer näher untersucht. Dabei wird speziell
	auf Java EE Anwendungen eingegangen und die einzelnen Stellschrauben
	zur Optimierung aufgezeigt. Weiterhin werden Auswirkungen der Konfiguration
	zu Größen wie Connection-Pool, Statement Cache etc. verdeutlicht.},
  groups = {public},
  interhash = {4dae569eb106b3e84b134b7a06af9bfb},
  intrahash = {a861a756ceca4c95343060b731abcfa4},
  keywords = {imported},
  owner = {funthomas424242},
  review = {Ein sehr gut gelungener Artikel.},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Richter2010,
  author = {Richter, Mirko},
  title = {Mehrsprachig programmieren},
  journal = {Java Magazin},
  year = {2010},
  volume = {6},
  pages = {92 - 98},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel ist der 2. Teil einer Serie. Er beschreibt eingehend die
	Bedienung des Systems MPS von JetBrains. Einziges Konzept was ich
	daraus mitnehme: Es wird zwischen Sprachen, Lösungen, DevelopmentKits
	und Aspekten unterschieden. Was man genau darunter versteht beschreibt
	der Artikel nicht. Wie man eine einfache Sprache ähnlich der von
	bibtex beschreibt wird gezeigt. Warum sich was gedacht wurde im Tool
	wird nicht erklärt. Warum das Tool alles als Modell bezeichnet wird
	auch nicht erklärt. private Anmerkungen: Der Artikel bestärkt meine
	Vermutung, dass DSL, Modelle und UML keine antagonistischen Widersprüche
	sind sondern vielmehr symbiotisch zusammen wirken können. Eine DSL
	hat im Hintergrund ein Model der beschriebenen Domain und dieses
	Modell lässt sich gewiss in UML überführen (UML ist nicht starr,
	entgegen vieler Behauptungen lässt sich deren Meta-Model der jeweiligen
	Domain anpassen -> Quelle suchen).},
  groups = {public},
  interhash = {bcc8cf02d1cf8544423d0a580a15b75d},
  intrahash = {69ab2f54b922c4f7589684ad033b6ad2},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:18}
}

@BOOK{Rie1996,
  title = {Object-Oriented Design Heuristics},
  publisher = {Addison Wesley},
  year = {1996},
  author = {Riel, Arthur J.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {936156adef001dd005d389fa1dd3b875},
  intrahash = {377e6c82a1417ed9bfe494ce578bffdd},
  keywords = {development, pattern, software},
  owner = {funthomas424242},
  timestamp = {2010-10-10 11:42:46}
}

@ARTICLE{Rittm2008,
  author = {Rittmeyer, Wolfram},
  title = {GlassFish - die Grundlagen},
  journal = {Java Spektrum},
  year = {2008},
  volume = {7},
  pages = {36 - 42},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine sehr gute Einführung in die Grundlagen von GlassFish. Allerdings
	kein Informationsgewinn wenn man mit GlassFish bereits gearbeitet
	hat. Lediglich interessante Hintergrundinformationen was wann implementiert
	wurde und wohin die Reise geht. Die interne Verzeichnisstruktur wird
	auch erklärt.},
  groups = {public},
  interhash = {3a8042dc4c300a444fe151cd14255a58},
  intrahash = {65e3b77a140b978df696c24ed83bdf18},
  keywords = {JavaEE},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:10}
}

@ARTICLE{Rittm2008a,
  author = {Rittmeyer, Wolfram},
  title = {GlassFish - Konfiguration und Administration},
  journal = {Java Magazin},
  year = {2008},
  volume = {8},
  pages = {33 - 39},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Wunderbare und sehr empfehlenswerte Einführung in die Administration
	von GlassFish. Eine Fortsetzung des schon sehr guten ersten Artikels.},
  groups = {public},
  interhash = {8287ef45ee0689623b32c76bcfc05eda},
  intrahash = {2bf717a117d7512bf08708c96ee902c3},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:11:03}
}

@ARTICLE{Roock2008,
  author = {Roock, Arne},
  title = {E-Mails: Fluch oder Nervensägen?},
  journal = {Java Magazin},
  year = {2008},
  volume = {12},
  pages = {96 - 97},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Analyse der Benutzung von Email. Gute Quelle für Vor- und
	Nachteile zum Vergleich mit Messager oder anderes.},
  groups = {public},
  interhash = {04328376ddb2bc61c8459172d2eeceec},
  intrahash = {65d744ee6eaffdc2dd22a97aaf3780f0},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Rossbach2003,
  author = {Roßbach, Peter and Dolibois, Frank},
  title = {Fette Brüder specken ab - Rich Clients mit Canoos ULC},
  journal = {Java Magazin},
  year = {2003},
  volume = {10},
  pages = {38 - 40},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Supertechnologie und heute 2008 noch besser durch Eclipse Support.
	http://canoo.com/ulc},
  groups = {public},
  interhash = {8795095f989e811816214af009ec653d},
  intrahash = {d37acf362ce1c3aa930f96034ebeffb6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:57}
}

@ARTICLE{Roewekamp2009,
  author = {Röwekamp, Lars},
  title = {JavaFX Tutorial - Teil 3, Das reale Leben},
  journal = {Java Magazin},
  year = {2009},
  volume = {11},
  pages = {24 - 33},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel betrachtet die Aspekte Drag&Drop, Deployment und Exception
	Handling. Der Autor kommt zu den Erkenntnissen: + Drag&Drop nicht
	so gut wie in Swing + Deployment auch als Applet nutzbar - Toolunterstützung
	mit javafxpackager gegeben + Sehr gute Möglichkeiten zu lokalen Datenhaltung,
	da Daten in einem JavaFX Raum abgelegt werden und damit nicht den
	Sicherheitsanforderungen der Umgebung genügen müssen (keine Komplikationen
	weil kein IO Zugriff oder ähnliches)},
  groups = {public},
  interhash = {93f95f08c2e7230bfaacd1c2ae1a5e25},
  intrahash = {d41a12ec41abb45e02c1726f8989bad0},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:25}
}

@ARTICLE{Roewek2008,
  author = {Röwekamp, Lars},
  title = {Was lange währt, wird endlich ...},
  journal = {Java Magazin},
  year = {2008},
  volume = {12},
  pages = {16 - 24},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in Java FX welches zur Zeit als Beta auf dem Markt ist.
	Java FX ist von Sun als neue Standardpräsentationsschicht gedacht.
	Es basiert auf Java FX Script. Die Sprache ist kein XML sondern erfordert
	wieder einen herkömmlichen Compiler. Der Vorteil der Sprache soll
	die Realisierung von Swing GUIs auf allen Plattformen (Mobile, Desktop,
	...) sein. Bisher wird allerdings nur der Desktop und auch dieser
	nur unvollständig (Passwortfeld fehlt, ...) unterstützt. Geplant
	soll auch ein Designer Tool sein mit dem Grafiker ohne Programmierkenntnisse
	Oberflächen erstellen können. Damit soll die Flash Konkurenz besiegt
	werden. Der konkrete Vorteil einer Vereinfachung ist für mich noch
	nicht zu sehen, im Gegenteil durch die neue Sprache sehe ich eher
	neue Hemmnisse. Ich denke Sun will die Möglichkeit der JVM, nun Skriptsprachen
	ausführen zu können, nutzen um Wildwuchs zu behindern und eine allseits
	beliebte Skriptsprache bereitzustellen. Allerdings war der Terminplan
	von Sun so eng gesetzt, das die Beta Versionen wohl eher abschrecken
	(2007 auf der JavaOne wurde Java FX angekündigt).},
  groups = {public},
  interhash = {5aecdab89723459aede2762f0e2227d3},
  intrahash = {c1a101276443f850b5772293c16049ce},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:14}
}

@ARTICLE{Roewekamp2010,
  author = {Röwekamp, Lars and Weßendorf, Matthias},
  title = {Faces Tales - Das Behavior API Teil 2},
  journal = {Java Magazin},
  year = {2010},
  volume = {6},
  pages = {20 - 21},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es geht um Details zum Java Server Faces Behaivor API},
  groups = {public},
  interhash = {4bc0325c79ddb9e56301751b21bf293c},
  intrahash = {b8c7e5bcf15a3784933fc2c38884faa9},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Rubas2007,
  author = {Rubasch, Helmut},
  title = {Bitte annotieren Sie! - Java-Annotationen in Hibernate und JPA},
  journal = {Java Magazin},
  year = {2007},
  volume = {3},
  pages = {40 - 44},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung und Vergleich von Annotationen in Hibernate und JPA.},
  groups = {public},
  interhash = {fe2ba3bb30ef067915971c88e193c6ed},
  intrahash = {ce7db103e6b0b79f79deeff8ba65315c},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Ruee2011,
  author = {Rüedlinger, Dr. Roman Bertolami Frank Buchli Marc Hofer Matthias},
  title = {Domänenspezifische Sprachen - Verschiedene Ansätze im Vergleich},
  journal = {ObjektSpektrum},
  year = {2011},
  volume = {03},
  pages = {74 - 79},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel klingt zunächst interessant aber ein sauberer Vergleich
	wird letztlich doch noch so übersichtlich geführt wie ich es mir
	erhofft hatte. Teilweise tauchen die Autoren sehr stark in die Details
	der einzelnen Sprachen ein, ziehen dann aber keine entscheidenden
	Schlüsse. Untersucht werden interne und externe DSLs. Insgesamt werden
	folgende Technologien oder Sprachen evaluiert:  + Ruby und  Scala
	als Vertreter für interne DSLs + Xtext und Poseidon for DSL als Vertreter
	für externe DSLs.  Hierbei ist noch eine Unterscheidung zwischen
	Xtext als Vertreter textualer DSLs und Poseidon für  grafische DSLs
	zu treffen. Vergleichen wollten die Autoren folgende Kriterien: +
	Lesbarkeit und Verständlichkeit + Integrations- und Wartungsaufwand
	+ Einfachheit (Einarbeitung in die DSL Erstellung) + Skalierbarkeit
	 Diese Kriterien hätten auch in einer Tabelle verglichen werden können
	was leider nicht erfolgte.  Einige Punkte aus dem Fazit seien hier
	erwähnt: + Externe DSLs erlauben eine freie Gestaltung benötigen
	dafür aber einen Generator für die Erzeugung des Zielkodes. + Interne
	DSLs nutzen die Mächtigkeit der Wirtssprache um flexible auf neue
	Anpassungen reagieren zu können. Hier besteht aber stets die Gefahr,
	das Konstrukte der Wirtssprache mit Konstrukten der DSL vermischt
	zum Einsatz kommen. + Textuale DSLs gestatten den Einsatz etabliberter
	Prozesse und Werkzeuge + Grafische DSLs können zur Visualisierung
	komplexer Zusammenhänge sehr nützlich sein.  Das einige Werkzeuge
	oder Technologien wie EMF auch beide Arten von DSLs (Text und Grafik)
	unterstützen und wie man diese am geschicktesten kombiniert erwähnen
	die Autoren leider nicht.},
  groups = {public},
  interhash = {8090720d99bb584263c553446c255b90},
  intrahash = {8c4a265bfb2e8735053fc0aa5dac148b},
  keywords = {dsl, externe*dsl, interne*dsl, poseidon, ruby, scala, xtext},
  owner = {funthomas424242},
  timestamp = {2011-10-08 22:06:27}
}

@ARTICLE{RumpeS2005,
  author = {Rumpe, Dr. Bernhard and Schmid, Dr. Joachim},
  title = {Oberflächen mit MDA: Beschreiben statt Programmieren},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {2},
  pages = {35 - 39},
  __markedentry = {[FunThomas424242:6]},
  abstract = {GUI Framework auf XML Basis ähnlich der Thinlet Technologie - genannt
	Xui. Das Framework wurde initiiert von Beck et al und war damals
	verfügbar unter www.bea.de. Heisst inzwischen gui4j und besitzt jetzt
	eine eigene Homepage: http://www.gui4j.org/},
  groups = {public},
  interhash = {f6ad9843d69599f7a6741e55ebcef3e3},
  intrahash = {eb31c028010aa39fcaae43eb642dea31},
  keywords = {ria, swing, xml, xsl},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:49}
}

@ARTICLE{RuppB2005,
  author = {Rupp, Florian and Brandes, Dr. Christian},
  title = {MDA-Basierte Entwicklung von Banken-Komponenten},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {2},
  pages = {24 -30},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es wird der Modellgetriebene Software Entwicklungsprozess der Firma
	FIDUCIA IT AG am Beispiel neuer Banken Software dargestellt. Die
	Firma FIDUCIA IT AG entwickelt für ca. 900 Banken Software und betreut
	ca. 19500 Server. Die Entwicklung der Software erfolgt mittels MDA
	Ansatz und Inovator (Firma MID) sowie TCL für Generatoren. Über verschiedene
	Module des Innovators werden Design und Implementierung getrennt.
	Der Übergang zwischen den einzelnen Modellen (auch in einer Phase)
	geschieht mittels Generatoren (meist in TCL geschrieben). Es werden
	folgende Modelle benutzt: 1. Geschäftsprozessmodell (PIM) 2. Anwendungsfallmodell
	(PIM) 3. Analyse Klassenmodell (PIM) 4. Design Klassenmodell (PSM)
	5. XML Export (PSM) 6. Java Source (PSM) Das Vorgehen klingt durch
	das benutzte Beispiel recht unplausible. So wird in (1) ein Geschäftsprozess
	"Vertreterregellung prüfen" entworfen welchen der Generator in einen
	Anwendungsfall "Vetreterregelung prüfen" und eine Szenariobeschreibung
	übersetzt. Diese sind jedoch so spezifisch, dass man den Generator
	aus meiner Sicht nur für diesen Fall nutzen kann. Damit strotzt das
	Design nur von Generatoren die mit jeder Entscheidung anzupassen
	sind. Es scheint eine Idealvorstellung der Firma zu sein vom zukünftigen
	Produktionsweg aber keinesfalls eine glaubhafte Beschreibung der
	aktuellen Entwicklungsmethode.},
  groups = {public},
  interhash = {7c04679a136476d627874a41d5c68d10},
  intrahash = {cb45db70785812ac45534a660e88e4e8},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:44}
}

@ARTICLE{Russl2005,
  author = {Russlies, Stephan},
  title = {Vorfahrtregeln - Der "geschäftliche Verkehr" und die Nutzung von
	Domainnamen},
  journal = {c't},
  year = {2005},
  volume = {12},
  pages = {188 - 189},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Domainnamen werden nicht nach dem Prinzip "Wer zuerst kommt mahlt
	zuerst" vergeben sondern nach bestimmten Regeln. Normal hat die geschäftliche
	Nutzung vor der privaten Nutzung Vorrang. Darf ein Geschäft einen
	bestimmten Namen benutzen und benötigt die entsprechende Domain wird
	geprüft ob die Domain bereits geschäftlich genutzt wird. Falls nicht
	wird die Nutzung an den Geschäftsinhaber übertragen. e-mail des Authors:
	russlies@glawe.de},
  groups = {public},
  interhash = {c3375689402fe8fc4919f06c70377013},
  intrahash = {3c1db70bdd35a2a43c7636627d220a79},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:29}
}

@ARTICLE{Ruette2007,
  author = {Rütten, Christiane},
  title = {Signatur auf Lebenszeit - Probleme bei der Ablösung von SHA-1},
  journal = {c't},
  year = {2007},
  volume = {7},
  pages = {204 - 205},
  __markedentry = {[FunThomas424242:6]},
  abstract = {SHA-1 gilt als halbgebrochen SHA-1 wird Standarmäßig für HTTPS und
	ähnliches benutzt. Ablösung wird von SHA-2 erwartet. Problem Ablösung
	geht nur wenn SHA-2 weite Verbreitung erlangt - Zertifizierungsstellen
	bieten jetzt schon an.},
  groups = {public},
  interhash = {e12e95d8aff3b1dc85932d6b2249c840},
  intrahash = {7390695e838963bda92cf0395bdde24c},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:10:10}
}

@ARTICLE{SamsGK2008,
  author = {Sams, Bruce and Gehr, Benjamin and Külzer, Jakob},
  title = {OpenSSO unter der Lupe},
  journal = {Java Magazin},
  year = {2008},
  volume = {6},
  pages = {36 - 40},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Hervorragende Einführung in OpenSSO. Die Architektur beruht auf einen
	Policy Decision Point (PDP) und mehreren Policy Enforcement Points
	(PEP). Als PDP kommt ein Access Manager zum Einsatz welcher über
	alle Nutzer und ihre Berechtigungen bescheid weis. Er wird auf einem
	zentralen Server installiert, z.B. als Webanwendung. Als PEP kommen
	Policy Agenten zum Einsatz. Der Access Manager stellt folgende Services
	bereit: + Authentication Service zur Authentifizierung + Session
	Service zum Herstellen der Beziehung zwischen Nutzer und Anwendungen
	+ Policy Service um Berechtigungsentscheidungen durchführen zu können
	+ SAMLService zur sicheren Kommunikation mit den Agenten Anbindung
	an Datenspeicher in Dateistrukturen, LDAP oder Active Directory werden
	von Hause aus unterstützt. Die Policy Agenten können mit dem Access
	Manager über das SAML (Security Assertion Markup Language) Protokoll.
	Die Agenten lassen sich im WebContainer installieren, ebenso wie
	der Access Manager. Das openSSO Konzept unterstützt auch ein Single
	Logout. Ein Logout kann über folgende Möglichkeiten erreicht werden:
	+ Der Benutzer fordert explizit einen Logout an + Der Administrator
	beendet die Session eines Benutzers + Eine Timout Regel im Access
	Manager logt den Benutzer aus. Die Agenten halten einen lokalen Session
	Cache. Damit die Agenten den Logout des Nutzer vom AccessManager
	mit bekommen, müssen die Informationen zwischen Agent und Manager
	synchronisiert werden. Eine Synchronisation kann über zwei Methoden
	erfolgen: 1) Polling: Der Agent fragt in regelmäßigen Abständen beim
	Manager nach. 2) EventListener: Der Agent ist als EventListener beim
	Manager registriert und wird automatisch informiert. Der Artikel
	beinhaltet auch ein sehr gutes praktisches Beispiel. Die relevanten
	Archive zum Deployment sind agentapp.war (Agent) opensso.war (Manager).},
  groups = {public},
  interhash = {3208f3879936d70601b120b9e093971a},
  intrahash = {b3bed34558a3e23aeabb992333c0f297},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:09:59}
}

@ARTICLE{Sande2007,
  author = {Sanders, Jan},
  title = {Sicher ist sicher! - Methoden aus sicherheitskritischer Software
	für Java},
  journal = {Java Magazin},
  year = {2007},
  volume = {9},
  pages = {20 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel befasst sich mit Möglichkeiten der frühen Fehlererkennung.
	Dabei wird versucht Laufzeitfehler in die statische Analyse des Compilers
	zu Bringen und damit die Fehler noch bei der Entwicklung zu erkennen.
	Die verwendeten Prinzipien hat sich der Author von Programmiersprachen
	für sicherheitskritische Anwendungen abgeschaut. Zu den Sprachen
	gehören: + Ada (sicher durch Einschränkung der Sprachkonstrukte)
	+ SPARK (sicher durch Einschränkung der Sprachkonstrukte + zusätzliche
	Annotationssprache) + Safer-C (sicher durch Einschränkung der Sprachkonstrukte)
	+ MISRA-C Als typische Fehlerklassen, welche kritische Anwendungen
	nicht aufweisen dürfen wurden identifiziert: + nicht initialisierte
	Objekte + Stapelüberläufe durch Endlosschleifen oder Endlosrekursionen
	+ Speicherlecks + Fehler bei der Pointerarithmetik + Array-Index
	Fehler Folgende Techniken werden vorgeschlagen (Aufwand/Nutzen muss
	je nach Projekt entschieden werden ob es sich lohnt oder nicht):
	+ Einfache Magic Numbers z.B. Integer Parameter überführen in Konstantenschreibweise
	+ Konstanten überführen in Enumerations (Enumerations sind einfache
	Datentypen) + Einfache Datentypen überführen in strenge Typisierung
	(x Achse statt eine int Konstante lieber eine XOrdinate Klasse verwenden)
	(obige Massnahmen dienten der statischen Kontrolle des Datenflusses)
	Zur statischen Prüfung der Vollständigkeit wird empfohlen Resourcen
	in Klassen zu überführen: + Resourcedateien -> Resourceklassen Nachteil:
	Die Flexibilität die Resourcen zur Laufzeit zu wechseln (Sprache,
	Konfigurationen) wird eingebüsst. Wo diese Flexibilität nicht notwendig
	ist sollte der Weg beschritten werden.},
  groups = {public},
  interhash = {95a703c64c2aeb2212440c43821b4cfb},
  intrahash = {d5c34ddeed16be9018985088cb3049bf},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:09:52}
}

@ARTICLE{Scheb2000,
  author = {Scheb, Alexander},
  title = {Völker hört die Signale - Anwendungen internationalisieren},
  journal = {Java Magazin},
  year = {2000},
  volume = {3},
  pages = {42-44},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Gute aber knappe Einführung in die Problematik der Internationalisierung
	von Java Anwendungen.},
  groups = {public},
  interhash = {dbbd7d46401c705f1cc7c5162494ca46},
  intrahash = {19fdce2b22ae251f5526c5aa75abe7a6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{schenkel2006,
  author = {Schenkel, Thorsten},
  title = {Teile und Herrsche - Smart Clients Teil 3},
  journal = {Java Magazin},
  year = {2006},
  number = {10},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {7ea9608b59f47034cc350e3f3664a7d8},
  intrahash = {ed09308a2bdb6b25d1a819bcb124ba6e},
  keywords = {client, ria, richclient, smart},
  owner = {funthomas424242},
  timestamp = {2011-03-13 18:57:40},
  url = {http://www.compeople.de/files/java_magazin_-_smart_clients_teil_3.pdf}
}

@ARTICLE{Schill2005,
  author = {Schill, Philipp and Schmauder, Ralf},
  title = {Codegenerierung mit dem "Eclipse Modeling Framework" und JET},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {1},
  pages = {59 - 65},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das Konzept und die Verwendung von EMF und
	JET.},
  groups = {public},
  interhash = {53e103738129a5a35a754c4bb73f2e29},
  intrahash = {88bdb706d0b623e8af397856b3921234},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{SchiDro2010,
  author = {Schindler, Uwe and Drost, Isabel},
  title = {Wo bin ich - Geografische Suche mit Apache Lucene},
  journal = {Java Magazin},
  year = {2010},
  volume = {9},
  pages = {34 - 38},
  note = {Zusätzlich interessante Punkte die im Artikel erwähnt werden:1) Die
	Häufigkeit einzelner Suchanfragen ist meist zipf-verteilt.2) Abstandsberechnung
	bei Geodaten über Haversinus.3) Cartesian Tiers4) Wissenschaftliches
	Infosystem PANGAEA5) KML Regionen Dokumentation von Google6) Geohshes},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Letzter Teil einer 3 teiligen Serie über die Feature of Apache Lucene.
	Es wird die Suche über Geodaten anhand der Suche einer Bar beschrieben.
	Im ersten Verfahren wird das geografische Suchgebiet (hier Berlin)
	in ein Gitter unterteilt. Jedes Segment erhält eine Tier-ID. Wird
	ein Segment wiederum unterteilt, wird die Nummer des Untersegments
	an die Tier-ID angehängt. Damit wird diese immer länger um so genauer
	die Auflösung ist. Die zweite Methode arbeitet mit Bounding Boxen.
	Wobei zunächst eine Vorfilterung über Latitude/Longtitude oder Gauss-Krüger-Koordinaten
	erfolgt. Anschließend wird das Gebiet mittels Bounding Box eingegrenzt
	auf der Grundlage der tatsächlichen Entfernung von den GPS Koordinaten
	des Nutzers.GPS Koordinaten erfolgt.},
  comment = {},
  groups = {public},
  interhash = {4d49fbff1315fc5349c61764c99f5e9c},
  intrahash = {36b91b7461d77e0c7a568859fc9d17a2},
  keywords = {apache, geodaten, location, lucene, regions, suche},
  owner = {funthomas424242},
  timestamp = {2010-11-20 23:09:55}
}

@ARTICLE{SchmeU1997,
  author = {Schmeh, Klaus and Uebelacker, Dr. Hubert},
  title = {Zufallstreffer - Kryptographisch sichere Zufallsgeneratoren},
  journal = {c't},
  year = {1997},
  volume = {14},
  pages = {220 - 223},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {9d74175edbd6bfdfb4caeb46dafd91c8},
  intrahash = {f8d28863e3afaca1769a7ab2c219cf52},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Schmi2007,
  author = {Schmieder, Fabian},
  title = {Schöpfer im Dienst - Kleine Urheberrechtsfibel für Programmierer
	Teil 2},
  journal = {c't},
  year = {2007},
  volume = {2},
  pages = {154 - 159},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Gute, einfach gehaltene Einführung in das Urheberrecht für angestellte
	Programmierer.},
  groups = {public},
  interhash = {f706a9a76edc4a015df10736a08bbed9},
  intrahash = {4ab8f0990369bf184eb102d417cc5993},
  keywords = {recht},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Schmi2007a,
  author = {Schmieder, Fabian},
  title = {Freier Funk für jedermann ?},
  journal = {c't},
  year = {2007},
  volume = {7},
  pages = {208 - 212},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Juristische Probleme beim Internetzugang über freie WLANs. Der Rechner
	welcher als Gateway ins Internet fungiert ist Ansprechpartner für
	Polizei und Justiz bei Illegalen Downloads, Uploads oder ähnlichen
	Aktivitäten. Der Provider verbietet meist den Zugang mit anderen
	zu teilen. Login ist absolut erforderlich, weiterhin ist die Protokollierung
	des Netzwerkverkehrs notwendig. Fon Initiative in England und Freifunkinitiative
	in Deutschland zur Zeit bekannteste Vertreter.},
  groups = {public},
  interhash = {ed7be53a166a20213de484eb8df4a384},
  intrahash = {909786419bd9b52dfe7085b56779387a},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:08:37}
}

@ARTICLE{Schmi2006,
  author = {Schmieder, Fabian},
  title = {Des Codeklopfers Schutzhütte - Urheberrechtsfibel für Programmierer,
	Teil 1},
  journal = {c't},
  year = {2006},
  volume = {23},
  pages = {174 - 181},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in das Urheberrecht bzgl. der Softwareentwicklung.},
  groups = {public},
  interhash = {0566bb925d39a39bf5a52914fcaaba09},
  intrahash = {049a0094abc285707055b0140c7c16cd},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Schne1996,
  title = {Angewandte Kryptographie},
  publisher = {Addison-Wesley},
  year = {1996},
  author = {Schneider, Bruce},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4fdfa1a24428667313ccf57637a5b6c9},
  intrahash = {d2f09ab7dde1691d07248546e0b75c10},
  isbn = {3-89319-854-7},
  keywords = {kryptographie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Schulz2005,
  author = {Schulz, Holger},
  title = {Sicherer Umgang mit Zahlen und Daten},
  journal = {Java Spektrum},
  year = {2005},
  volume = {6},
  pages = {44 - 46},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Details der internen Speicherung und Verarbeitung von numerischen
	Datentypen: float, double, BigDecimal und viele dabei zu findende
	Fallen. Warum ist in Java 3*0.5 gleich 1.5, aber 3*0.4 nicht 1.2?...},
  groups = {public},
  interhash = {51848ea6117af96bfc58bd1a4c158bc4},
  intrahash = {21418285d0019e632fc88229ddc1ad0b},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:08:25}
}

@ARTICLE{SchuSus2010,
  author = {Schulz, Michael and (DL9UNF), Andreas Suske},
  title = {Die Legende lebt - oder 25 Jahre AC1 (1)},
  journal = {Funkamateur},
  year = {2010},
  volume = {9},
  pages = {905 - 907},
  note = {Eine spannende und interessante Geschichte. Denkwürdig in sofern,
	dass es um ein aktuelles Thema kurz vor der Wende geht. Das war aus
	meiner Sicht der technologische Höchststand der DDR. Denn vom Konzept
	her war der Computer bereits leistungsfähiger als die zeitgleich
	von Robotron geplanten Heimcomputer. Letzere waren auch nur sehr
	spärlich auf dem Markt zu horrenten Preisen für Schulen und Betriebe
	erwerbbar.},
  __markedentry = {[FunThomas424242:6]},
  abstract = {1. Teil einer Serie über den ersten Eigenbaucomputer der DDR. Die
	Dezemberausgabe des Jahres 1983 des Funkamateur berichtete wie Funkamateure
	einen eigenen Computer bauten. Kurz darauf bastelte die ganze Republik
	über Jahre. In dieser Zeit sind diverse Exemplare entstanden.},
  comment = {},
  groups = {public},
  interhash = {641708c2461e0e5ae8e110cedd9462a0},
  intrahash = {709dddd58c22c63905d67715dcf3028a},
  keywords = {ac1, eigenbaucomputer, funkamateur},
  owner = {funthomas424242},
  timestamp = {2010-09-18 22:19:31},
  url = {http://www.ac1-info.de}
}

@ARTICLE{SchumK2008,
  author = {Schumacher, Martin and Kamann, Thorsten},
  title = {5 Continuous-Integration-Systeme im Vergleich},
  journal = {Java Magazin},
  year = {2008},
  volume = {10},
  pages = {51 - 57},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Die 5 verglichenen Systeme sind: + CruiseControl + CC Config + Continuum
	+ Hudson + Bamboo (comerzial) + TeamCity (comerzial)},
  groups = {public},
  interhash = {a59db353d4c7baf3e4559ed0ab75809e},
  intrahash = {0b4a8e06bfdc1897d7b71add9f81a7f7},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:08:09}
}

@ARTICLE{Seeberger2008,
  author = {Seeberger, Heiko},
  title = {Erste Schritte mit OSGI},
  journal = {Java Magazin},
  year = {2008},
  volume = {12},
  pages = {32 - 35},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in OSGI - Beginn eines Tutorials (1. Teil) Es wird das
	Konzept und die Historie von OSGI erklärt. Einige Frameworks werden
	genannt: + Apache Felix + Knopflerfish OSGI + Eclipse Equinox Das
	Tutorial wird mit Equinox arbeiten, download unter:},
  comment = {},
  groups = {public},
  interhash = {f57d13a182397cabcb5c7715cfb5234b},
  intrahash = {0fff844800344d06b055a6ee80c68188},
  keywords = {apache-felix, equinox, java, knopflerfish, osgi, tutorial},
  owner = {funthomas424242},
  timestamp = {2010-09-21 21:49:05}
}

@ARTICLE{Seege2005,
  author = {Seeger, Jürgen},
  title = {Paketkommunikation - Dedizierte Endgeräte für Voice over IP},
  journal = {iX},
  year = {2005},
  volume = {9},
  pages = {106 - 108},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in die technischen Probleme der VoIP und deren Lösung.},
  groups = {public},
  interhash = {209bddeb1352a771e2db9ba98fcd1bf9},
  intrahash = {81747de2a377fac192b34a44fe03ea39},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Seemann2009,
  author = {Seemann, Michael},
  title = {Cloud Computing mit Java},
  journal = {Java Magazin},
  year = {2009},
  volume = {7},
  pages = {38 - 45},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel bietet eine sehr gute Einführung in die Benutzung und
	den Einstieg in die Programmierung der Google App Engine. Der Artikel
	enthätlt auch sehr gute Beispiele zur Programmierung.},
  groups = {public},
  interhash = {6271efcdf8f500366eb8281c9b48392a},
  intrahash = {4dd80fa9c0353a1e54c2513471e694c5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Seide2007,
  author = {Seidel, Udo},
  title = {Einschreiben - Browser Zertifikate verwalten},
  journal = {iX},
  year = {2007},
  volume = {06},
  pages = {136 - 137},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Verwaltung von Zertifikaten. Es wird detailliert
	auf die NSS-Suite von Mozilla eingegangen (Aufrufe, Parameter, etc.)
	Folgende Programme sind interessant: + certutil (ersetzt das openssl)},
  groups = {public},
  interhash = {da094b957d30071cc930918f3423cd0a},
  intrahash = {3769785e0c6d36d4227fa11b8e94cd33},
  keywords = {kryptographie, technologie, zertifikate},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:55},
  url = {ftp://ftp.mozilla.org}
}

@ARTICLE{seifert2012hibernate,
  author = {Seifert, Mirko and Wende, Christian and Johannes, Jendrik},
  title = {Eine DSL für Hibernate},
  journal = {Java Magazin},
  year = {2012},
  number = {8},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Im Artikel wird die domain specific language HEDL beschrieben. In
	HEDL kann die Persistenzschicht von Anwendungen modelliert werden.
	Ein Eclipse Builder sorgt nach jeder Speicherung des Modells für
	die erneute Generierung der für das objektrelationale Mapping mit
	Hibernate benötigten Klassen. Der HEDL Builder erstellt Implementierungsklassen
	für Entitäten wie auch für DAOs bereit. Der generierte Programmkode
	ist separiert in 3 Packages: entities, dao und custom. Die Implementierung
	der DAO wird im Package dao abgelegt. Dabei wird das Generation Gap
	Pattern (http://www.research.ibm.com/designpatterns/pubs/gg.html)
	verwendet. Bei diesem werden stets neu generierte Kodeteile in abstrakte
	Klassen (package dao) abgelegt. Manuell veränderbare Kodeteile werden
	in einmal generierten Klassen im Package costum abgelegt. Diese leiten
	von den abstrakten Klassen aus dao ab. Bei der Generierung des Entity-Codes
	wird das Generation Gap Pattern nicht benutzt. Stattdessen ist zukünftig
	ein Inkludieren speziell annotierter Klassen angedacht. },
  comment = {Die Installation von der UpdateSite http://www.emftext.org/update_trunk
	funktionierte nicht zufriedenstellend. Hingegen die Installation
	aus dem Eclipse Marketplace über http://devboost.de/hedl/update ergab
	eine funktionierende Anwendung.Der HEDL Builder erzeugte beim Test
	nur Klassen mit Annotationen. Ob es eine Möglichkeit gibt JPA konforme
	Descriptoren erzeugen zu lassen lies der Artikel offen. },
  groups = {public},
  interhash = {081453e36468439835e4a8def61ab8a6},
  intrahash = {61cfcd8dba2b72dd1f30017e89e01092},
  keywords = {dsl, hedl, hibernate, mdd, orm},
  owner = {funthomas424242},
  privnote = {Warum heißt die Sprache HEDL und nicht EDL? Enthält sie Hibernate
	spezifische Konstrukte? Oder nur weil der Builder nach Hibernate
	generiert? Dann hätte man doch Sprache und Builder Konzeptuell trennen
	können.},
  timestamp = {2012-10-14 12:29:31}
}

@ARTICLE{Sevinc2009,
  author = {Sevinc, Paul E.},
  title = {Auftragsarbeit - OAuth sichere Benutzung von Web-APIs},
  journal = {iX},
  year = {2009},
  volume = {7},
  pages = {118 - 121},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Super Erklärung des Konzeptes von OAuth. Zusätzlich sind noch Beispielimplementationen
	von Doodle angeführt.},
  groups = {public},
  interhash = {5df14a84ce59284ad6af1e89cd16504f},
  intrahash = {e23c9c977ead125db85166e5fc1d997c},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{SharmSN2003,
  title = {J2EE Connector Architecture and Enterprise Application Integration},
  publisher = {Addison Wesley},
  year = {2003},
  editor = {Microsystems, Sun},
  author = {Sharma, Rahul and Stearn, Beth and Ng, Tony},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {0497928e811247bf97509d8f39968045},
  intrahash = {044cab4d1bf68b38f7db90e11ff15377},
  keywords = {J2EE, JavaEE, technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Siebert2010,
  author = {Siebert, Hans Günter},
  title = {Prozessverbesserung in der IT mit SPICE},
  journal = {ObjektSpektrum},
  year = {2010},
  volume = {1},
  pages = {76 - 83},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel befasst sich mit der Einordnung von SPICE und erklärt
	die grundlegenden Konzepte. Nebenbei fallen auch ein paar Definitionen
	mit ab. In Summe nichts genau und doch hat man ein gutes Gefühl verstanden
	zu haben worum es geht und wie es geht. Die Praxis wird dann die
	Differenz aufzeigen. Ein paar Auszüge: Schwerpunkte von SPICE sind:
	+ Prozesse bewerten und verbessern + Ermittlung des Prozessfähigkeitsgrad
	Es gibt folgende Stufen der Fähigkeitsdimension: 0 Unvollständiger
	Prozess - nicht implementiert oder läuft falsch 1 Durchgeführter
	Prozess - Zweck des Prozesses wird erfüllt 2 Gesteuerter Prozess
	- Die Ausführung des Prozesses wird geplant und gesteuert 3 Etablierter
	Prozess - Ein definierter Prozess wird benutzt, der auf eine Standardprozess
	basiert 4 Vorhersagbarer Prozess - Der Prozess wird konsistent ausgeführt
	innerhalb definierter Grenzen 5 Optimierender Prozess - Der Prozess
	wird kontinuierlich verbessert SPICE ist frei von vordefinierten
	Prozessen wie ITIL. Allerdings gibt es für bestimmte Branchen Prozessreferenzmodelle
	die genutzt werden sollten. Zum Beispiel sind IT Prozesse anders
	als die der Schraubeherstellung. Für die IT gilt vermutlich Enterprise
	SPICE. Von Assessoren werden Assesments durchgeführt und die Prozesse
	eines Unternehmens bewertet. Hier machen sich die SPICE Jünger unentbehrlich.
	Ist aber bei CMMI und ITIL nicht anders. Private Anmerkung: Bekanntlich
	soll der Unterschied zwischen Theorie und Praxis ja in der Praxis
	größer sein als in der Theorie ;-)},
  groups = {public},
  interhash = {ac73c9d66f152fd48003cff376322712},
  intrahash = {ddbf15ca3e08b8aaaffcfca739f48dd3},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:52}
}

@MISC{Softw1999,
  author = {Software, Innovative},
  title = {Object Engineering Workbench},
  howpublished = {Internet Link},
  year = {1999},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {023404f207dd4109e6ae005017232ce6},
  intrahash = {57e510739f3c428fa89264d77d084256},
  keywords = {Tools, UML},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://www.isg.de/}
}

@ARTICLE{Stal2008,
  author = {Stal, Michael},
  title = {Eine für Alle: Die Zukunft von Produktlinien},
  journal = {ObjektSpektrum},
  year = {2008},
  volume = {4},
  pages = {22 - 23},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es wird versucht die IT zu industriealisieren. Mit Produktlinien wird
	ein Pedant zur Autoindustrie geschaffen. Dabei sind eine Anzahl von
	definierten und in einer ersten Phase festzulegenden Komponenten.
	In einer zweiten Phase werden durch Zusammensetzen aus diesen Komponenten
	neue Anwendungen geschaffen. Die Anwendungen besitzen alle ähnliche
	Eigenschaften und sind vom gleichen Typ/Anwendungsart. Ihre Unterschiede
	bestehen lediglich in Konfigurationen/Custumizing. Sollte die Zeit
	zeigen, dass ein Major Featur in der Komponentensammlung einer Produktlinie
	fehlt (z.B. weil es erst entdeckt wurde) soll dieses wieder in die
	Design Phase (wie in der ersten Phase) eingebracht werden. Dann werden
	die Komponenten entsprechend, zielgerichtet und planmäßig verändert.
	Hierbei wird beachtet, dass es schon Dutzende Anwendungen gibt welche
	auf diesen Komponenten basieren. In der Regel wird man hier also
	abwärtskompatible bleiben müssen. Was stelle ich mir unter einer
	Produktlinie nun vor? + Sammlung von Komponenten die eine Produktart
	realisieren können, z.B. Portale oder Buchhaltungssoftware, oder
	Literaturrecherchesysteme oder ...},
  groups = {public},
  interhash = {7de6b73303ab8f59037da2c0a7a8fe10},
  intrahash = {e0fbddf32d78e1af3b5cd3e2157d2cf6},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:50}
}

@BOOK{starke2011,
  title = {Software-Architektur kompakt - angemessen und zielorientiert},
  publisher = {Spektrum Akademischer Verlag},
  year = {2011},
  author = {Starke, Gernot and Hruschka, Peter},
  address = {Heidelberg},
  edition = {1},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {bc2db776a2a34b29e818390262240f81},
  intrahash = {8bd3d42ef056f5a12e3897df9e560d5a},
  isbn = {978-3-8274-2093-0},
  keywords = {software-architektur},
  owner = {funthomas424242},
  timestamp = {2011-03-20 19:44:01}
}

@BOOK{starke2009softwarearchitektur,
  title = {Software-Architektur kompakt angemessen und zielorientiert},
  publisher = {Spektrum, Akad. Verl.},
  year = {2009},
  author = {Starke, Gernot and Hruschka, Peter},
  address = {Heidelberg},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Einstieg in die Softwarearchitektur mit Begriffserläuterung, Vermittlung
	von Grundlagen mit durch das Template basierte Vorgehen von arc42.
	 },
  comment = {Sehr guter Einstieg und kompaktes Nachschlagewerk.},
  groups = {public},
  interhash = {5aec59233d58ea09ba94d8dd65f56bf6},
  intrahash = {e2661d73e60a34c6728849c35dc0f9b4},
  isbn = {9783827420930 3827420938},
  keywords = {architecture, software, software-architektur},
  owner = {funthomas424242},
  refid = {428821258},
  timestamp = {2012-10-21 12:17:36},
  url = {http://www.worldcat.org/search?qt=worldcat_org_all&q=9783827420930}
}

@ARTICLE{Staeuble2010,
  author = {Stäuble, Markus},
  title = {Build-Systeme im Vergleich},
  journal = {Java Magazin},
  year = {2010},
  volume = {5},
  pages = {60 - 69},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel ist ein Vergleich der 3 aktuellen Build Systeme: Ant,
	Maven und Gradle.  Im Artikel werden Anforderungen an die Entwicklung
	und den Buildprozess von Enterprise Anwendungen aufgezeigt und ein
	Beispiel konstruiert in dem diese umzusetzen sind. Weiterhin werden
	explizite, zusätzliche Anforderungen definiert. Anschließend wird
	versucht das Beispiel durch jedes Buildsystem so umzusetzen, dass
	alle Anforderungen erfüllt sind.},
  comment = {},
  groups = {public},
  interhash = {43897a76dda965c4bb3dee1617ebe696},
  intrahash = {c595aca69c41cae5a6bdde45dd9ebec8},
  keywords = {imported},
  owner = {funthomas424242},
  review = {Die Strukturierung des Artikels ist super: Zunächst die Anforderungen
	bestimmen, dann ein Beispiel ableiten und dieses mit den zu vergleichenden
	Buildsystemen zu realisieren.  Leider wurde bei der Bestimmung der
	Anforderungen nicht so akribisch vorgegangen wie ich es erwartet
	hätte. Hier hätte der Autor in kurzer Form eine Liste von Anforderungen
	prästentieren können. Anschließend wurde zu jedem Build System eine
	kleine Einführung gegeben - diese war für den Vergleich nicht notwendig.
	Eine tiefere Erläuterung des Konzeptes wäre sinnvoller gewesen. 
	Der Vergleich ist erfolgt leider nur verbal, nicht messbar. So fällt
	die Zusammfassung auch entsprechend dürftig aus.   Ein sehr interessanter
	Artikel aber kein verwertbares Ergebnis.},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Staeub2007,
  author = {Stäuble, Markus},
  title = {Offenes Geheimnis - GNU Crypto Project: Verschlüsselung mit Open
	Source Technologie},
  journal = {Java Magazin},
  year = {2007},
  volume = {6},
  pages = {16},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Basisinformation zur GNU Krypto Library: + Lizens: LGPL + Sprache:
	Java + URL: www.gnu.org/software/gnu-crypto Kleines Beispiellisting
	ist angegeben.},
  groups = {public},
  interhash = {eed0580be03feb552b7dbb64301e2180},
  intrahash = {0ab10c2f2871721304d52980ffcdc63f},
  keywords = {crypto, gnu, java, library},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:34}
}

@ARTICLE{Steppan2009,
  author = {Steppan, Bernhard},
  title = {Polierte Oberflächen - Eclipse GUI Builder für Swing- und SWT-Rich-Clients},
  journal = {iX},
  year = {2009},
  volume = {2},
  pages = {88 - 92},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Übersicht über die bestehenden GUI Editoren für Eclipse. Als
	Resume muss gesagt werden, dass alles was brauchbar ist auch Geld
	kostet. Auf jeden Fall sollte man folgende Anforderungen beachten:
	1) Wenn der Editor zusätzliche Metadaten benötigt ist man von ihm
	abhängig - es gibt auch welche die ihre Voransicht direkt aus dem
	Quellkode erstellen können. 2) Eine Voransicht ohne Programmstart
	ist unverzichtbar um schell entwickeln zu können. 3) Es ist von Vorteil,
	wenn der Editor sowohl Swing wie SWT unterstützt. Leider ist das
	VE Projekt tot.},
  groups = {public},
  interhash = {61bb81f5da9a4cad98fa03217d876eb1},
  intrahash = {3bf2e25610b29f39c163527496d9a8ff},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:48}
}

@ARTICLE{Storm2008,
  author = {Storm, Ingo T.},
  title = {Geschreddert statt gespeichert - Manipulierte USB-Sticks vernichten
	Daten},
  journal = {c't},
  year = {2008},
  volume = {1},
  pages = {24 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Derivate von Marken Sticks kommen auf den Markt wie die früheren Kopien
	von CPUs. Auch die USB Sticks besitzen Fehler wie damals die CPUs.
	Die USB Sticks tuen so als ob die Daten gespeichert werden, tun es
	aber nicht immer. z.B. gibt ein Stick an 2GB Speicher zu haben besitzt
	aber nur 1GB. Die Speicherung gelingt damit ein paar Tausend mal
	und irgendwann werden die Daten nicht mehr gespeichert aber es kommt
	auch kein Fehler. c't bietet ein Testtool "H2testw" für USB Sticks
	unter Softlink 0801024.},
  groups = {public},
  interhash = {46bcbc85bfd18a62fe20c0d71bad565f},
  intrahash = {a4cfe86076de3491d3355f0cab8aba1d},
  keywords = {sticks, storage, usb},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:46}
}

@ARTICLE{Studer2011,
  author = {Studer, Etienne},
  title = {Gradle wird den Build schon schaukeln.},
  journal = {Java Magazin},
  year = {2011},
  pages = {104 - 109},
  number = {2},
  __markedentry = {[FunThomas424242:6]},
  abstract = {In diesem Artikel werden die grundlegende Konzepte von Gradle anhand
	von Beispielen erläutert. Der Artikel lässt sich in folgende Schwerpunkte
	untergliedern:+ Deklaration und Konfiguration von Tasks+ Implementation
	eigener Task-Typen+ Deklaration von Task-Abhängigkeiten+ Intelligentes
	Überspringen von Tasks+ Inkrementelle Builds+ 2 Phasen Build (Konfiguration
	und Ausführung)+ Artefakt Repositories+ Externe Projektabhängigkeiten+
	Domänenmodell+ Kompakt und AusdrucksstarkGradle ist ein Buildsystem
	welches auf einer objektorientierten DSL als Buildskriptsprache aufbaut.
	Diese Sprache ist über Plugins einfach um weitere Sprachelemente
	erweiterbar.Gradle unterteilt einen Build in eine Konfigurations-
	und eine Ausführungsphase. Die Konfigurationsphase ist die erste
	Phase und kann beispielsweise auch zur Abfrage von Zugangsinformationen
	genutzt werden, welche die spätere Ausführungsphase zum Zugriff auf
	Remote Ablagen benötigt. Gradle realisiert tatsächlich inkrementelle
	Builds. Es ist nicht mehr notwendig "zur Sicherheit vorher ein clean"
	auszuführen. Gradle bemerkt Veränderungen in den Quellen genauso
	wie in den gebildeten Artefakten. Gradle unterstützt eine Trennung
	zwischen deklarativen und imperativen Aspekten eines Builds.},
  comment = {},
  groups = {public},
  interhash = {f1b8b2695cde2844153f1b18be3740a7},
  intrahash = {f24c724cb101742854cc9692618047df},
  keywords = {build, deployment, gradle, tools},
  owner = {funthomas424242},
  privnote = {Ein paar Zitate aus dem Artikeln (unbearbeitet:Im Zentrum von Gradle
	stehen die Tasks. Sie führen die eigentlichen  Build -Aktionen wie
	Quelltet kompilieren, Dokumentation generieren, Artefakte bauen etc.
	aus. Wir können im Build-Skript sowohl eigene Tasks deklarieren als
	auch von Plug-ins und Skripts zur Verfügung gestellte Tasks übernehmen
	und unseren Anforderungen entsprechend konfigureieren.Jeder Task
	ist immer von einem bestimmten Task-Typ. Der Task-Typ steuert die
	benötigte Funktionalität bei.Ein Konzept von Gradle ist es, Build
	Funktionalität in Task Typen zu kapseln und auf diese Weise beliebigen
	Tasks zur Verfügung zu stellen. Man muss die Task-Instanzen dann
	nur noch den Anforderungen entsprechend konfigureieren. Es führt
	zudem zu einer sehr schönen Trennung der imperativen (wie) und deklarativen
	(was) Aspekte.Von den Plugins werden oft noch wetere Task-Typen angeboten.
	Wenn die in einem Task benötigte Funktionalität nicht vo einem bereits
	vorhandenen Task-Typ zur Verfügung gestellt wird, so kann man die
	fehlende Funktionalität in einem eigenen Task-Typ implementieren.
	Zwischen den Tasks bestehen typischerweise Abhängigkeiten..... Solche
	Task-Abhängigkeiten lassen sich in Gradle einfach abbilden. Beispiel:
	check.dependsOn checkDirSize.Beim Ausführen eines Skripts baut Gradle
	zuerst die Abhängigkeitsstruktur des Tasks als gerichteten, zyklenfreien
	Graphen auf (DAG). Der Graph hat als einstiegspunkte die auf der
	Kommandozeile angegebenen Tasks. Diese Wurzel Task Knoten haben Kanten
	zu ihren abhängigen Task-Knoten und diese wiederum zu ihren Abhängigkeiten
	usw. Innerhalb des Graphen ist jeder Task nur einmal enthalten und
	wird auch nur einmal ausgeführt - selbst dann, wenn mehrere andere
	(Wurzel) Tasks von diesem Task abhängen. Gradle traversiert den berechneten
	DAG und führt die Tasks in deterministischer Reihenfolge aus.Da Gradle
	alle Task-Abhängigkeiten des Projektes kennt, sind fortgeschrittene
	Operationen wie Build-Parallelisierung (noch nicht implementiert)
	und intelligentes Überspringen von Tasks generisch möglich; sowohl
	für von Plugins bereitgestellte Tasks als auch für selbst deklarierte
	Tasks.Gradle bietet eine generelle Lösung für inkrementelle Builds.
	Die funktioniert so, dass jeweils nrue jene Komponenten neu gebaut
	werden, bei denen sich entweder am Eingangszustand tatsächlich etwas
	geändert hat oder bei denen die zu bauende Komponente nicht mehr
	im ursprünglich generierten Zustand vorliegt. Ansonsten wird der
	Task, der die Komponente generiert, bei der Ausführung übersprungen.
	Gradle führt über diese Zustände intern Buch.Das einfache Konzept
	von Eingangs- und Ausgangszuständen ist sehr mächtig. Jeder Task-Typ,
	der die entsprechenden Annotationen auf seinen Feldern deklariert,
	nimmt automatisch an inkrementellen Builds teil. Die Auftrennung
	der Build -Laufzeit in zwei Phasen ist ein einzigartiges Merkmal
	von Gradle und bietet extreme Flexibilität bei der dynamischen Konigration
	der Tasks vor der eigentlichen Ausführungsphase. Gradle ermöglicht
	es auch, eigene Konfigurationsobjekte zu definieren und diese in
	Tasks zu verwenden. Damit erreicht man eine konsistente Trennung
	zwischen der Konfiguration von Abängigkeiten und der Verwenung von
	Abhängigkeiten in Tasks. Dies entspricht ganz dem deklarativen Ansatz
	von Gradle. Gradle bietet ein sehr reiches Domänenmodell zur Beschreibung
	des Builds. Projekte, Tasks, abhängigkeiten, Repositories, Konfigurationen
	uww. werden alle als Objekte modelliert. Die Objekte kann man traversieren,
	abfragen und während der Konfigurationsphase in vielen Fällen auch
	verändern. Tasks sind Objekte, und wir können in einem Task auf die
	Eigenschaften eines anderen Tasks zugreifen.Wiederverwendung, ÄVererbung,
	Abstraktion und Trennung der Verantwortlichkeiten sind alles zentrale
	Konzepte von Gradle, die wer bereits al OO-Entwickler schätzen gelernt
	haben und nun dendlich auch im Build-Umfeld wiederfinden.},
  timestamp = {2011-07-02 22:00:52}
}

@ARTICLE{Sturm2005,
  author = {Sturm, Thorsten},
  title = {Kaffeesahne - UML2 die Änderungen aus Sicht eines Softwareentwicklers,
	Teil 3},
  journal = {Java Magazin},
  year = {2005},
  volume = {3},
  pages = {66 - 70},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {e4356c2b2bf624f8a8170eea8d5e9b8a},
  intrahash = {cc03544bfdb0dbab07c66c9e9ee2197c},
  keywords = {UML},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Supp2006,
  author = {Supp, Mathias},
  title = {Dokumentenmaschine - Openoffice-API UNO mit Java nutzen},
  journal = {iX},
  year = {2006},
  volume = {3},
  pages = {130 - 133},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in UNO mit Beispielen zum ausprobieren.},
  groups = {public},
  interhash = {bbd808161d37b5e793307337ee368e9f},
  intrahash = {23a5556f7939279f095aaf6f2b238adb},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@MISC{BEA2008,
  author = {Systems, Inc. BEA},
  title = {e-docs zum BEA Webserver Plugin},
  howpublished = {Internet Link},
  year = {2008},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {fa5bf4d01618c63a7df52cc74a7b7c47},
  intrahash = {d062c3a40395ae9d3237505ed19ea463},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://e-docs.bea.com/wls/docs81/plugins/}
}

@MISC{BEA2008a,
  author = {Systems, Inc. BEA},
  title = {Load Balancing for Servlets and JSPs},
  howpublished = {Internet Link},
  year = {2008},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {64f9451baf6ec9ce7e389262af2ead44},
  intrahash = {bd5fbd8a42b9d541ca567069d0c61317},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41},
  url = {http://edocs.bea.com/wls/docs81/cluster/load_balancing.html#1026940}
}

@ARTICLE{Szyma2005,
  author = {Szymanski, Oliver},
  title = {AGB für Knigge - über den Java Knigge und wie man ihn (miss)verstehen
	kann},
  journal = {Java Magazin},
  year = {2005},
  volume = {8},
  pages = {37 - 38},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Resume zur Kritik an den Artikeln zum Java Knigge.},
  comment = {},
  groups = {public},
  interhash = {e952a5c24eb46513167cbe08de654bf0},
  intrahash = {16ac46121ba4323a95e55c327cc7f16e},
  keywords = {JavaKnigge},
  owner = {funthomas424242},
  timestamp = {2010-09-12 16:45:12}
}

@ARTICLE{Tamm2005,
  author = {Tamm, Michael},
  title = {Alles geregelt - Automatisiertes Code-Review},
  journal = {iX},
  year = {2005},
  volume = {1},
  pages = {76 - 80},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung in die automatisierte Softwaretestung. Es werden
	kurz Checkstyle und FindBugs vorgestellt.},
  groups = {public},
  interhash = {5d5af01c7e18d3fa9cb384e7c59c739e},
  intrahash = {87c06fd55f06b275abf49243da0d6f03},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Tamm1997,
  author = {Tamm, Michael},
  title = {Blitzfindig - Texte schnell durchsuchen mit T-Search},
  journal = {c't},
  year = {1997},
  volume = {8},
  pages = {292 - 297},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {620401068a6340c7572bd87da97330fc},
  intrahash = {c1c4b68a3fe4df10eede812895f8b937},
  keywords = {algorithmus},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Tanen2003,
  title = {Computer Networks},
  publisher = {PH PTR},
  year = {2003},
  author = {Tanenbaum, Andrew S.},
  edition = {4},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {1c58f78cc53c9da0fac7a43a56606d97},
  intrahash = {59576ce5dc07f270a4cb4d6657ee10dc},
  isbn = {0-13-038488-7},
  keywords = {technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Tengi2000,
  author = {Tengicki, Andreas},
  title = {Mantel der SQL-Geschichte - Eine JDBC Wrapper Klasse für kompatibles
	SQL},
  journal = {Java Magazin},
  year = {2000},
  volume = {11},
  pages = {26 - 35},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {fe7fe3b9b91ed1a0a3d17bb745e2848e},
  intrahash = {5fbd3c8734e83e96110498bbcfb97293},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Thoma2005,
  author = {Thomas, Alexander},
  title = {Einsatz von massgeschneiderten Codegeneratoren auf Basis des "Java
	Metadata Interface"},
  journal = {ObjektSpektrum},
  year = {2005},
  volume = {2},
  pages = {18 - 23},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Vorstellung des JMI (Java Metadata Interface) JSR040 an einem sehr
	guten und sehr detaillierten Beispiel. Aus dem Artikel lässt sich
	ableiten, dass MDA und UML Tools dieses API unterstützen sollten
	damit: + fehlende Kodegeneratoren selbst entwickelt werden können
	+ verschiedene Tools untereinander kommunizieren können (bei MDA
	wichtig durch mehrere Schichten) Im Beispiel wird erklärt, wie aus
	der XMI einer UML Version über das JMI API eine Menge von Implementationsklassen
	erzeugt werden kann. Diese Repräsentieren wie beim DOM das Dokument
	als Modell und über die Klassen kann dann sämtliche Information aus
	konkreten Modellinstanzen herausgelesen bzw. auch eingefügt werden.
	Prinzip scheint genau wie beim DOM Baum zu sein (parsen und iterieren
	bzw. neu aufbauen und eiinfügen). Der Author entwickelt eine Idee
	zum generieren von Quellkodes ähnlich der von JSP Seiten für Java
	Servlets. Dazu wird eine Laufzeitumgebung benötigt. Der Quellkode
	dieser Umgebung umfasst ca. 500 Zeilen Kode und kann vom Author zur
	Verfügung gestellt werden. Der Author sieht grosse Vorteile in MDA.
	Bestehende Projekte sollten in MDA überführt werden, indem vor allem
	redundanz erzeugende Aspekte herausgezogen und über Modelle beschrieben
	und generiert werden. Redundanz erzeugende Aspekte sind z.B. Eingabefelder.
	Das Feld hat einen Namen auf der JSP, im DTO, im Command, in der
	Entity Bean und auf der Datenbanktabelle evtl. auch noch im DAO.
	Damit ist das Feld redundant in jeder Schicht der Anwendung vertreten
	- ergo könnte es aus einem Modell generiert werden. Mehr zum Thema:
	jcp.org/aboutJava/communityprocess/final/jsr040/index.html DTD für
	UML1.4 ist erhältlich auf: www.omg.org/cgi-bin/doc?formal/04-07-02},
  groups = {public},
  interhash = {ef9a0f7ee4d4ebd4ba029aee7d47c49a},
  intrahash = {0fe9f5db1b4a1d473102d26d60cf98f0},
  keywords = {codegeneratoren, java, jsr040},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:27}
}

@ARTICLE{Tilko2008,
  author = {Tilkov, Stefan},
  title = {REST: Die Architektur des WEB},
  journal = {ObjektSpektrum},
  year = {2008},
  volume = {4},
  pages = {24 - 25},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Rede für REST und gegen SOAP mit dem Hinweis, dass auch SOAP
	RESTkonform verwendet werden kann. REST sind ein paar Regeln wie
	man Webanwendungen am besten entwirft um HTTP voll auszunutzen. Ein
	paar komische Dinge kommen im Artikel vor: + HTTP sei kein reines
	transfer Protokoll sondern ein Applikationprotokoll -> meiner Meinung
	nach stimmt Transfer und es wird als Anwendungsprotokoll mit Zustand
	missbraucht. Letzlich ist HTTP zustandslos auch wenn sich eine Session
	mitgeben lässt.},
  groups = {public},
  interhash = {5967c42dd1a2703de65f8b5597e3cef4},
  intrahash = {5ef96af1bad0fcf0799e5a5a5a5f60bf},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:26}
}

@ARTICLE{Treme2008,
  author = {Tremel, G.},
  title = {Handwerkerleistungen - Voraussetzung der Steuerermäßigung},
  journal = {Vita - Das Stadtmagazin},
  year = {2008},
  pages = {17},
  month = {April / Mai},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Handwerkerleistungen sind steuerlich absetzbar. Vorraussetzung ist,
	dass die Materialkosten gesondert ausgewiesen werden.},
  groups = {public},
  interhash = {b6ef9cf75990fd1eafc2efe6dd4a14d7},
  intrahash = {a79d73be2aa23239f23cb1b9f1c46a53},
  keywords = {Steuer},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Tschi1988,
  title = {Erfreuliche Drucksachen durch gute Typographie - eine Fibel für jedermann},
  publisher = {Maro Verlag Augsburg},
  year = {1988},
  author = {Tschichold, Jan},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {9d08eb369f9a943ba55b804c7f41cb30},
  intrahash = {4fb2dd50ce4b6a2547ae0e997366b5f1},
  isbn = {3-87512-413-8},
  keywords = {typographie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Tschi1932,
  title = {Typographische Entwurfstechnik},
  year = {1932},
  author = {Tschichold, Jan},
  address = {Stuttgart},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {da06cd136f53c6796ee2e8992a302936},
  intrahash = {de5eff5a81ceb86f280dc5d511b347bb},
  keywords = {typographie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{Tschi1928,
  title = {Die neue Typographie},
  year = {1928},
  author = {Tschichold, Jan},
  address = {Berlin},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4a79bff75447348082125e00426a5c02},
  intrahash = {fd112f4dc4adc499e6dda9db3de32db1},
  keywords = {typographie},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@MISC{Tuffs2005,
  author = {Tuffs, P. Simon},
  title = {Simplify Your Application Delivery with One-JAR},
  howpublished = {Internet Link},
  month = {04},
  year = {2005},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Tutorial zum Bau eines JarClassLoaders welcher Klassen aus Library-JARs
	lädt, wobei die JARs in einem JAR mit deployed wurden. Projekt auf
	Sourceforge: http://one-jar.sourceforge.net/},
  groups = {public},
  interhash = {1a80dc98ecebdcc62de86206734b1d5b},
  intrahash = {d951bf88a68914801ba8a41dc42c3ba6},
  keywords = {java, one-jar},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:22},
  url = {http://www.developertutorials.com/tutorials/java/simplify-application-delivery-one-jar-050422/page4.html}
}

@ARTICLE{Ulbri2000,
  author = {Ulbricht, Frank},
  title = {Nichts als die Wahrheit - Swing im JDK 1.3: Die Input Verification-Klasse},
  journal = {Java Magazin},
  year = {2000},
  volume = {11},
  pages = {58 - 59},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es wird auf Probleme der Eingabenvalidierung eingegangen. Eine sehr
	gute Einführung. Gleichzeitig hat sich der Author weitergehend mit
	dem Thema befasst und ein kleines Framework erstellt. Diese kann
	von der Heft CD kopiert werden. Die Klasse JComponent verfügt über
	eine Methode setInputVerifier(..). Mittels dieser kann man einen
	selbstgeschriebenen Validator zuweisen. Folgende grundsätzlichen
	Probleme müssen bei der InputValidierung beachtet werden. 1) Beim
	Cancel sollten keine Überprüfungen anstehen damit muss per setVerifyInputWhenFocusTarget
	= false die Validation ausgeschalten werden 2) Im Swing Dialog wird
	nur das Feld überprüft welches gerade den Focus hatte und diesen
	wechseln will. Das Framework verfolgt folgende Ziele: + Bei einer
	ungültigen Eingabe nicht einfach den Focus sperren (sonst tauscht
	der Anwender noch die Tastatur aus...) sondern eine Meldung anzeigen,
	die den Anwender auf seinen Fehler hinweist -> MessageInputVerifier
	+ In der Meldung sollte auch der Name der Komponente enthalten sein
	- diese steckt meist im Label und muss beim Erstellen des Dialogs
	der Komponente übergeben werden. (putClientProperty) + Auswahlboxen
	und alle anderen Felder benötigen eine Prüfung ob eine Auswahl (gültiger)
	vorgenommen wurde. + Zusammenbau der Validation durch Verkettung
	mehrerer Validatoren -> Compound InputVerifier. z.B. Zuerst testen
	ob eine Eingabe vorgenommen wurde (z.B. StringInputVerifier) und
	dann ob es ein gültiges Datum ist (DateInputVerifier). + Utility
	Klasse mit allgemeinen Funktionen wie verifyChildren()},
  groups = {public},
  interhash = {4a118ff17534142b08cc2ae474447325},
  intrahash = {abb5c7da4a496c5dcc49bba9540d1b2d},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:20}
}

@ARTICLE{Ulbri2000a,
  author = {Ulbricht, Frank},
  title = {Can you imagine - Professionelle Bildbearbeitung mit dem Java 2D
	API},
  journal = {Java Magazin},
  year = {2000},
  volume = {5},
  pages = {20 - 22},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {c4810ec1b26708da5b432864c641a7e3},
  intrahash = {011bd7cb83431d9206d724bee268efc1},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Ulbri2000b,
  author = {Ulbricht, Frank},
  title = {Modelle, Ansichten und Kontrolleure},
  journal = {Java Magazin},
  year = {2000},
  volume = {2},
  pages = {18 - 21},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Grundlagen von Swing anhand des MVC Konzeptes.
	Als Beispiel für die Implementierung wird die Darstellung einer Liste
	verwendet.},
  groups = {public},
  interhash = {0774c735918c8c8356b081622cbbfae4},
  intrahash = {04112dccf15eeec595f543de16e0c9c8},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:16}
}

@ARTICLE{Vahld2007,
  author = {Vahldiek, Axel},
  title = {Ersthelfer - Microsofts Reparatur- und Rettungs-CD},
  journal = {c't},
  year = {2007},
  volume = {20},
  pages = {206 - 207},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Detaillierte Erläuterungen zur Anwendung von DaRT. Nicht für Windows-Vista
	benutzen! Softlink 0720206 auf heise.de},
  groups = {public},
  interhash = {a68c00786afc3af7e8d82a2f90e081ad},
  intrahash = {c48e043881ba3c70bc71aca70bf38b44},
  keywords = {dart, recovery, windows},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:14}
}

@ARTICLE{Vogl1998,
  author = {Vogl, Wunibald},
  title = {Auf Nummer Sicher - Java und "Secure Socket Layer"},
  journal = {Java Spektrum},
  year = {1998},
  volume = {5},
  pages = {40 - 44},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Beschrieben wird das Konzept des SSL (Secure Socket Layer) am Beispiel
	einer openUTM Anwendung welche verteilte Transaktionen unterstützt
	(openUTM = Buchungssystem von Simens Nixdorf). Grundlage für SSL
	bildet der Austausch der Sessionkeys sowie die Client/Server Authentifizierung.
	Es wird auch auf folgende Attacken kurz eingegangen: + "Know Plaintext"
	Attacke + "Replay" Attacke + "Man in the middle" Attacke Die Verhinderung
	der "Man in the middle" Attacke wird nicht schlüssig erklärt. Es
	heisst sie wird verhindert, weil der Server ein Zertifikat mitgibt
	und der Client dieses überprüft. Was passiert aber auf einem Proxy?
	Kann nicht irgendein Proxy im Internet der Man in der Mitte sein
	der alles mitliest weil dort die Verschlüsselung endet und für die
	Gegenseite neu aufgebaut wird - oder endet die Verschlüsselung dort
	nicht? Signierte Applets werden vom IE und vom Nescape Navigator
	nur überprüft wenn sie mehr Rechte fordern als unsignierte. Somit
	kann nicht in jedem Fall sichergestellt werden, das es sich um die
	korrekte Software handelt.},
  groups = {public},
  interhash = {2f02d4c3c5e7dcddac561efbf9b47dcf},
  intrahash = {29d074e41a926edf8351cb6286195ce5},
  keywords = {technologie},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:08}
}

@ARTICLE{Voelte2000,
  author = {Völter, Markus},
  title = {Aktionen nach Fahrplan - Einen Scheduler auf Basis von Commands und
	Strategien entwickeln},
  journal = {Java Magazin},
  year = {2000},
  volume = {11},
  pages = {22 - 25},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {59e8a43f57ecbc453037ccd9d723d655},
  intrahash = {5c1258e0e052cab638489dcf533c2711},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@INPROCEEDINGS{WW2005KMLb,
  author = {W{\"{a}}llnitz, Elke and Weise, Thomas},
  title = {{Platform-independent KML Editor for Creating E-Learning Modules
	based on XML}},
  booktitle = {Proceedings of World Conference on Educational Multimedia, Hypermedia
	and Telecommunications (EDMEDIA'05)},
  year = {2005},
  editor = {Kommers, Piet and Richards, Griff},
  pages = {4700--4704},
  publisher = {{Association for the Advancement of Computing in Education (AACE):
	{Chesapeake, VA, USA}}},
  __markedentry = {[FunThomas424242:6]},
  comment = {},
  groups = {public},
  interhash = {a9c3d57c937df0d57147403e2164bb18},
  intrahash = {0e592642622afaad3a7577c553ef91c1},
  keywords = {WYSIWYG, editor, geodaten, google-earth, kml},
  location = {Le Centre Sheraton Hotel Montr\'e},
  owner = {funthomas424242},
  timestamp = {2011-05-08 21:41:22},
  url = {http://www.it-weise.de/documents/files/WW2005KMLb.pdf}
}

@ARTICLE{Wahn2000,
  author = {Wahn, Michael},
  title = {Baumschule - Directory Viewer im Eigenbau},
  journal = {Java Magazin},
  year = {2000},
  volume = {3},
  pages = {30 -32},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in die Programmierung mit Swing unter Benutzung der Klasse
	JTree aus Swing um einen Verzeichnisexplorer zu bauen. Sehr gutes
	Beispiel - evtl. aber veraltet.},
  groups = {public},
  interhash = {945444f762745191c77b98f6c1cb091c},
  intrahash = {967907d52c5c332e3f4db0abed3c02e7},
  keywords = {java, swing},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:16:06}
}

@ARTICLE{Wahn1998,
  author = {Wahn, Michael},
  title = {Natur pur ?! - Verzahnung von Java-Code mit Native-Code mit dem JNI
	(Java Native Interface)},
  journal = {Java Magazin},
  year = {1998},
  volume = {1},
  pages = {44 - 47},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in JNI am Beispiel eines Java Zugriffes auf eine DLL.},
  groups = {public},
  interhash = {a49494ea3068e4f1d038329d4f551b9f},
  intrahash = {e633bc2c4d323340423facd3692e5320},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wang2005,
  author = {Wang, Dapeng},
  title = {Mr. 007 - Einführung in Apache James},
  journal = {Java Magazin},
  year = {2005},
  volume = {2},
  pages = {37 -},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in Apache James (nur eine Seite gelesen da der Rest nicht
	kopiert wurde) Apache James scheint ein Avalon basiertes Framework
	zum Aufbau eines Mailservers zu sein. Es bietet zusätzlich eine Mailet
	API - was auch immer das ist.},
  groups = {public},
  interhash = {c852e05836b3c07bb2dd18f6d5c3d7ff},
  intrahash = {454c2bc9206580ad22161c6417521944},
  keywords = {apache, james, mail},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:59}
}

@ARTICLE{Wartala2005,
  author = {Wartala, Ramon},
  title = {Apache Jarkata-Basisbibliothek Commons - Die gemeinsame Feder},
  journal = {iX},
  year = {2005},
  volume = {1},
  pages = {70 - 74},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr guter Überblick über die Apache Commons Bibliotheken.},
  groups = {public},
  interhash = {1674fca8777c9866a3faedb658419a5e},
  intrahash = {bf056fcb6779dd00b81da6059630ebc0},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Weber2010,
  author = {Weber, Bernd},
  title = {Bündelung},
  journal = {Java Magazin},
  year = {2010},
  volume = {2},
  pages = {38 - 44},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine sehr gute Einführung in das Tool bnd. Es wird anhand von Beispielen
	erklärt wie existierende, als JAR File ausgelieferte Anwendungen
	OSGI nachträglich OSGI konform mit Metainformationen angereichert
	werden können. Zusätzlich wird erläutert wie dies möglich ist, ohne
	den Build und Deploymentprozess anpassen zu müssen.},
  comment = {},
  groups = {public},
  interhash = {ac6b7f3c32e4c43367e8e3d8855bd002},
  intrahash = {63adcf9625fb2f5ba41d42ce52be8c7a},
  keywords = {bundle, bündel, osgi},
  owner = {funthomas424242},
  privnote = {Das Tool bnd wird als JAR Datei ausgeliefert. Es kann sowohl als Maven
	wie auch als Eclipse Plugin genutzt werden. Zusätzlich ist das Tool
	ebenfalls von der Kommandozeile als als Standalone Application genutzt
	werden. bnd bildet außerdem die Basis für das maven-bundle-plugin.
	Mit diesem können auf sehr einfachen Weg OSGI Bündel erstellt werden.OSGI
	Konformität wird durch Hinzufügen von diversen MANIFEST Informationen
	erreicht. Beispielsweise:+ Bundle-SymbolicName(logischeer Bundle
	Name in Punktnotation)+ Bundle-Version (in der Form x.y.z[qualifier])+
	Export-Package (definiert die von außen sicht- und verwendbare Menge
	eigener Java Packages)+ Import-Package (definiert die für das Funktionieren
	des Bundles benötigten externen Packages)},
  timestamp = {2010-09-18 19:54:13}
}

@ARTICLE{WF2009,
  author = {Weisbecker, Anette and Falkner, Jürgen},
  title = {Chancen in der Wolke: Für wen sich Cloud-Computing lohnt},
  journal = {ObjektSpektrum},
  year = {2009},
  volume = {6},
  pages = {16 - 20},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Betrachtung des Cloud Computing. Es wird behandelt wer es
	realistisch nutzen kann, wofür es sich eignet wo die aktuellen Probleme
	liegen (Datensicherheit, Server in den USA, komplizierte Bedienung
	nebst komplexer Public Key Infrastruktur). Es werden auch Auswege
	aufgezeigt wie das Angebot Zimory (www.zimory.com), mit denen Rechenzentren
	ihre Leistungen an eine Cloud abgeben können und bei Eigenbedarf
	wieder zurücknehmen. Vorteil ist die eigene Infrastruktur welche
	die Datensicherheit garantiert und die Finanzierung der Anlagen in
	brach liegenden Zeiten.},
  groups = {public},
  interhash = {835c72a0bc17974cfff61a84d9f44582},
  intrahash = {48ba36ed74b2f29de30787fa535d00e1},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Welle2005,
  author = {Weller, Jens},
  title = {Das Überallnetz - Wimax die letzte Meile wird drahtlos},
  journal = {iX},
  year = {2005},
  volume = {2},
  pages = {82 - 85},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Artikel über die Alternative zur Telekom auf der letzten Meile.
	Geeignet zur Anbindung von Dörfern an DSL.},
  groups = {public},
  interhash = {715c952e31f5c2f58f1d666b45c76921},
  intrahash = {3671d175be862e271d9ff66516c4c17b},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wenz2010,
  author = {Wenzlaff, Thomas},
  title = {Das AVR-Net-IO-Board},
  journal = {Java Magazin},
  year = {2010},
  volume = {9},
  pages = {43 - 45},
  note = {An den Default Port einer Netzwerkkarte scheint sich ohne Probleme
	ein Client Socket binden zu lassen. Scheinbar realisieren Netzwerkkarten
	auf dem Default Port das Server Socket. Laut Autor ist das zumindest
	bei dem AVR-NET-IO-Board so. Die Vermutung liegt aber nahe, dass
	alle Karten so funktionieren.},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Socketprogrammierung am Beispiel einer
	konkreten Netzwerkkarte. Im Artikel wird der Default Port der Netzwerkkarte
	benutzt um ein Socket daran zu binden. Über dieses Socket werden
	Befehle gesendet um die Karte zu konfigurieren bzw. zu testen.},
  comment = {},
  groups = {public},
  interhash = {4f6090d93306e765a1a1dc1266857130},
  intrahash = {4b2e4982fd0cb8384ab369e933343ec9},
  keywords = {avr-net-io-board, java, socket},
  owner = {funthomas424242},
  timestamp = {2010-09-25 12:19:12}
}

@ARTICLE{Wesse2007,
  author = {Wessendorf, Matthias},
  title = {XML oder @annotations?},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {89},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Artikel ohne Aussage. Einzig das Framework Apache Shale ist mir aufgefallen
	weil erwähnt wurde, dass dies zur Navigation eine Art StateMachine
	verwendet.},
  groups = {public},
  interhash = {a5a1c5db2ba73565b7f565fe9428e44a},
  intrahash = {5f9a98a3d4955c0acad075acfc2819dc},
  keywords = {annotations, apache, shale, xml},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:51}
}

@ARTICLE{westphal2012clean,
  author = {Westphal, Ralf},
  title = {Clean Code Developer: Korrektheit als Wert},
  journal = {OBJEKTspektrum},
  year = {2012},
  number = {5},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Zusammenfassung der wichtigsten Dinge um bei der täglichen
	Arbeit in hoher Geschwindigkeit und Qualität voranzukommen.Es werden
	viele nützliche Praktiken aufgezählt und ihr Nutzen dargestellt.Code
	überprüfbar machen:- Single Level of Abstraction (SLA)- Single Responsibility
	Principle (SRP)- Separation of Concerns (SoC)- Dependency Inversion
	Principle (DIP)- Komponentenorientierungweiter Bausteine aus CCD:-
	You Ain't Gonna Need It (YAGNI)- Don't repeat yourself (DRY)- Keep
	It Simple, Stupid (KISS)- Open Close Principle (OCP)- Law of Demeter
	(LoD)- Liskov Substitution Principle (LSP)- Interface Segregation
	Principle (ISP)- Quellkode-KonventionenWeitere Techniken:- Automatisierte
	Integrationstests (beispielsweise Oberflächentests)- Automatisierte
	JUnit Tests (genaue Lokalisierung von Fehlern)- TDD (Testdriven Development)
	bzw. Test first empfohlen aber kein Dogma- Code Reviews im Team und
	im Pair-Stil (analog zum Daily StandUp)- Continuous Integration-
	Auswertung von Prüfmetriken und Kodeabdeckung- Auswertung der Anzahl
	beim Support gemeldeter Fehler und einfache Trendermittlung-},
  comment = {},
  groups = {public},
  interhash = {08cf235a8c05367cbf83078cc1e1c58f},
  intrahash = {9df0194c7dd201ee6a00acd4f18845d8},
  keywords = {CCD},
  owner = {funthomas424242},
  timestamp = {2012-10-08 22:52:40}
}

@ARTICLE{Wiede2005,
  author = {Wiedeking, Michael},
  title = {Darf's ein bisschen mehr sein? - Wie man mit scheinbar mehr Aufwand
	eine bessere Performanz erzielt},
  journal = {Java Magazin},
  year = {2005},
  volume = {2},
  pages = {28 - 29},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {3def6fff1a09328074b7844d0fb81ed7},
  intrahash = {642a326c2b80181f41131b399317dc58},
  keywords = {JavaKnigge},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wiede2005a,
  author = {Wiedeking, Michael},
  title = {Don't!!!},
  journal = {Java Magazin},
  year = {2005},
  volume = {3},
  pages = {24 - 29},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Es geht um das Singleton Pattern.},
  groups = {public},
  interhash = {3d578a0addbb4f0b1c81ab843c28de32},
  intrahash = {0c33818a5d629b8f3fd9d4382334219f},
  keywords = {JavaKnigge},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wiede2005b,
  author = {Wiedeking, Michael},
  title = {Sondermüll - Wie man darüber erfährt, wann Speicher freigegeben wird},
  journal = {Java Magazin},
  year = {2005},
  volume = {4},
  pages = {23 - 24},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {5dfa8a63594d57d145ef5497a1e80eec},
  intrahash = {21bfea5bb6e1b49c1a969889721eb350},
  keywords = {JavaKnigge},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wiega2006,
  author = {Wiegand, Dorothee},
  title = {Gut zitiert ist halb geschrieben},
  journal = {c't},
  year = {2006},
  volume = {7},
  pages = {160 - 165},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Vergleich folgender Bibliografieprogramme: + Bibliographix 5.1 + Citation9
	+ Citavi 2.0 + EndNote 9 + Reference Manager 11 + Visual Composer
	.NET 2.0 Der Vergleich berücksichtigt alle praktischen Dinge die
	bei der Erstellung wissenschaftlicher Arbeiten zu beachten sind.
	Es wird auch auf die Einhaltung der DIN 1505 (Zitate, Literaturlisten)
	und der Richtlinie KZfSS sowie dem Abfrageprotokoll Z39.50 verglichen.},
  groups = {public},
  interhash = {04847eaf3d7d16730fa1b6394e74ebd6},
  intrahash = {21d06dcb66183cbfb6396b36c4dc7e91},
  keywords = {ReferenceManager, VisualComposer, bibliographi, bibliographix, citation,
	citavi, endnote},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:25}
}

@ARTICLE{Wieske2010,
  author = {Wieske, Lothar},
  title = {Amazon Web Services: Flaggschiff des Cloud Computings},
  journal = {Java Magazin},
  year = {2010},
  volume = {3},
  pages = {16 - 23},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Super Einführung in das Cloud Computing am Beispiel von Amazon Webservices.
	Der Artikel enthält eine Schritt für Schritt Anleitung zum Anlegen
	einer statischen Website im Amazon Cloud. Die Kosten bleiben unter
	einem Euro.},
  groups = {public},
  interhash = {23865e4451dbd11f8d3d03ae3ea05774},
  intrahash = {7afdab95ea20aad74e65be07f1981ab5},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:21}
}

@MISC{JavaWikipedia2012,
  author = {Wikipedia},
  title = {Java (Technik)},
  howpublished = {Internet},
  month = {Oct},
  year = {2012},
  booktitle = {Java (Technik) },
  editor = {Org., Wikipedia},
  groups = {public},
  interhash = {5e4a5f4d1d3056a27d56e5f58ef30dfb},
  intrahash = {4c6543371890478f85c9b458a86a0819},
  keywords = {programming, begriff, java, technik, language},
  owner = {funthomas424242},
  timestamp = {2012-10-23 21:13:37},
  url = {http://bit.ly/TRglRo}
}

@BOOK{WilheM1992,
  title = {Übersetzerbau: Theorie, Konstruktion, Generierung},
  publisher = {Springer Verlag},
  year = {1992},
  author = {Wilhelm, R. and Maurer, D.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {c9146e525b1bd97b814261a54c5c015c},
  intrahash = {220aeb2b16a7ba1b93e7710f3fa6be42},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Winte2007,
  author = {Winterberg, Torsten},
  title = {BPEL wird erwachsen ... - Eine Prozess Orchestrierungsschicht hält
	Einzug in moderne IT Architekturen},
  journal = {Java Magazin},
  year = {2007},
  volume = {7},
  pages = {22 - 29},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurzer Einblick was BPEL ist und wozu man es braucht. Mein Eindruck
	ist es ist ein Nice to Have Feature für SOA aber nicht wirklich essential.
	In den Rahmen modellgetriebener Softwareentwicklung scheint es schon
	besser zu passen, da es von der Abstraktionsebene her zwischen der
	Modellierung der Geschäftsprozesse und der Modellierung der technischen
	Services anzusiedeln ist. BPEL ist eine Sprache in der sich die Verknüpfung
	von Services beschreiben lässt. Services sind dabei allgemein zu
	sehen und nicht auf Webservices beschränkt - allerdings erwartet
	BPEL eine Beschreibung der einzelnen Services welche momentan nur
	über WDSL läuft. Mit BPEL kann man diverse angebotene Services verknüpfen
	und zu technischen Abläufen (technische Prozesse) zusammenfassen.
	Die entstandenen technischen Prozesse könnten sich dann zukünftig
	mit weiteren Sprachen auf höherer Ebene zu Geschäftsprozessen (fachlichen
	Prozessen) zusammengesetzt werden. Vom Paradigma lässt sich BPEL
	damit in die Kategorie der Prozessorientieren Sprachen einordnen.
	Probleme mit BPEL: Fehlerbehandlung und Rollback sind schwierig zu
	beschreiben bzw. zu lösen da alles über Kompensation (Undo Prozesse)
	gelöst werden muss. Aus meiner Sicht ist dies in der Praxis oft nicht
	möglich und man wird früher oder später wieder auf das gute alte
	2 Face Commit zurückgreifen. Die Qualität des Beitrag ist prinzipiell
	gut und für ein aktuelles Hype Thema fast schon lobenswert. Aber
	die üblichen Widersprüche sind dennoch enthalten: 1) BPEL geht von
	einer Orchestrierung von Services aus die keine Webservices sein
	müssen <-> Zur Beschreibung der Services wird aber die WebServiceDescriptionLanguage
	benutzt und nicht wie ich erwartet hätte eine GeneralServiceDescriptionLanguage.
	2) BPEL benutzt nur Schnittmengen von Hochsprachen (einfache Konstrukte
	wie Verzweigung und Schleifen) <-> andererseits bietet die Spache
	Variablen um den Input und Output von Prozessen zu speichern. Eigentlich
	sollte doch klar sein, dass früher oder später komplexere Statements
	benötigt werden um wie das in der Vergangenheit auch bei Hochsprachen
	der Fall war.},
  groups = {public},
  interhash = {e3bd997c6495f4a3d88c385f52e32691},
  intrahash = {99640cb2ee1f4deb8e8f53b59d867427},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:17}
}

@BOOK{Wirth1986,
  title = {Compilerbau: Eine Einführung},
  year = {1986},
  editor = {Teubner, B.G.},
  author = {Wirth, Niclaus},
  address = {Stuttgart},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4d6599dad51b537c8760907140aa7a0a},
  intrahash = {401f4e4ce90e6edf03da762581bde4bb},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{WivalT2005,
  author = {Wivall, Oscar and Team, World},
  title = {Entwanzen auf dem Handy - On-Device Debugging von J2ME-Anwendungen},
  journal = {Java Magazin},
  year = {2005},
  volume = {4},
  pages = {78 - 88},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {d1816a0cfec49e3f76296c73a29c845e},
  intrahash = {20cbcc373eab849c2f7d762392b55ea1},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wloka2007,
  author = {Wloka, Nils},
  title = {Ein Gedächtnis, das man nicht sieht - Deklaratives Caching mit Spring
	Modules},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {36 - 39},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {4f38f69dca024b39703d27a51fdbb698},
  intrahash = {9b859c53577ecf9204f95a3db0acfcdf},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wobst2003,
  author = {Wobst, Reinhard},
  title = {Harte Nüsse},
  journal = {c't},
  year = {2003},
  volume = {17},
  pages = {200 - 2003},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die Grundlagen diverser Algorithmen.},
  groups = {public},
  interhash = {e26148561381605703e93e6b94b61ce5},
  intrahash = {8b5e64aa7c2b26fd7ba1f7cb66acfd3c},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wolf2009,
  author = {Wolf, Henning and Roock, Arne},
  title = {Ja, ja, Chef - wird erledigt!},
  journal = {Java Magazin},
  year = {2009},
  volume = {8},
  pages = {104 - 105},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kernaussage nur so viel Aufgaben übernehmen wie man schafft, die anderen
	ablehnen. Folgende Beispiele zum Ablehnen: Qualifiziertes Nein: "Ich
	möchte diese Aufgabe nicht übernehmen, weil ich so etwas noch nie
	gemacht habe und deshalb sicherlich viele Fehler produzieren würde.
	Dafür benötige ich zuerst eine Fortbildung." Kuhandel: "Ja, ich kann
	die Aufgabe übernehmen - aber nur, wenn im Gegenzug jemand anders
	für den Rest der Woche meine Aufgaben im Entwicklerteam übernimmt.
	Beides ist leider nicht zu schaffen." Bedingungen stellen: "Ja, ich
	erarbeite die Aufstellung, aber ich kann mir dafür nur einen halben
	Tag Zeit nehmen. Es kann also sein, dass die Aufstellung nicht ganz
	so detailliert sein wird wie beim letzten Mal." Weitere Informationen
	erbitten: "Was genau soll da getan werden, und wer könnte diese Aufgabe
	noch übernehmen?" Zeit gewinnen: "Ich muss mich darüber erst mit
	meinem Team abstimmen und gebe Ihnen morgen Bescheid." Delegieren:
	"Ich werde das an den neuen Kollegen weitergeben." (wichtig mit voller
	Verantwortung, nicht ständig prüfen sonst spart es keine Zeit) Hilfe
	zur Selbsthilfe: "Ich mache das gemeinsam mit unserem Produktmanager
	- dann kann er es beim nächsten Mal allein. Aber dabei muss ich Überstunden
	machen, die ich im Juli abbummeln möchte."},
  groups = {public},
  interhash = {6578dbdc7ebf4a33d507a9fa8d39ad79},
  intrahash = {12c9738f782ec6a6b2aad93fd242c75f},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:12}
}

@ARTICLE{Wolff2008,
  author = {Wolff, Eberhard},
  title = {Mit Spring skalieren},
  journal = {Java Magazin},
  year = {2008},
  volume = {6},
  pages = {29 - 32},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Kurze Einführung in Grundbegriffe zur Skalierbarkeit von Anwendungen.
	Bezüglich Spring bleibt der Artikel recht flach. Folgende Zusammenfassung
	der Grundaussagen: + Skalierbarkeit hängt von der Plattform ab +
	Spring ist ein Framework welches der Skalierbarkeit keine Steine
	in den Weg legt + Spring ist plattformunabhängig wodurch es möglich
	ist zu jeder Anwendung die Plattform auszuwählen auf welcher sie
	am besten skaliert Grundbegriffe: Performance: ~ bezeichnet die Eigenschaft
	einer Anwendung, Funktionalitäten schnell abarbeiten zu können. Umgangsprachlich:
	"Wow, ist das schnell!" Man kan Performance nach der Latenz, die
	bis zur Erledigung einer Aufgabe benötigt wird, und dem Durchsatz,
	also wie viele Aktionen einer bestimmten Art pro Zeiteinheit erfolgen
	können, aufschlüsseln. Skalierbarkeit: ~ bezeichnet die Eigenschaft
	einer Anwendung, bei mehr Resourcen auch mehr Performance zu erbringen.
	... In der Praxis erreicht man irgendwann an eine Skalierungsgrenze.
	http://java.sun.com/docs/hotspot/HotSpotFAQ.html},
  groups = {public},
  interhash = {e5cd3ec5d98de8f115db2766d1d8f934},
  intrahash = {f2b5231fdaf8207bed7ed5087e1d9c66},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:10}
}

@ARTICLE{Wolff2007,
  author = {Wolff, Eberhard},
  title = {Frühlingsgefühle jetzt \& hier - Spring \& Architekturen: Wie sehen
	Architekturen für das Spring Framework aus?},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {29 - 34},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr ausführliche Einleitung.},
  groups = {public},
  interhash = {d13631a6201fed16ef7a99afbd8ae4d8},
  intrahash = {dcd10ec7876b1705232b88ff9f6e056f},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Wolff2004,
  author = {Wolff, Eberhard},
  title = {Der dritte Versuch - EJB 3.0: ein erster Überblick über die neuen
	Features},
  journal = {Java Magazin},
  year = {2004},
  volume = {9},
  pages = {49 - 52},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Vorschau auf die zukünftige EJB3.0 Spezifikation. Alles noch sehr
	ungenau beschrieben aber die wichtigste Änderung bereits herausgestellt:
	Inversion of Control (Umkehrung des Steuerflusses). Nicht die Komponente
	ruft die Services welche sie benötigt, sondern ihre Umgebung erzeugt
	die Komponente und übergibt ihr dann die benötigten Services. Ein
	weiteres Hauptfeature sind die neuen Entity Beans (neue Persistenz)
	welche nun als POJOs auch mit new erzeugt und anstatt des ValueObjects
	direkt an den Client weitergegeben werden können. Die EJB-QL wurde
	ebenfalls massiv erweitert, so dass fast der komplette SQL Standard
	abgebildet werden kann. Da die Persistenz nun eine eigene Spezifikation
	ist und prinzipiell komplett unabhängig von den Session Beans arbeitet
	besteht laut Autor auch die Möglichkeit diese in zukünftigen Versionen
	durch komplett andere Frameworks zu ersetzen. Da mit der EJB3.0 Spezifikation
	eine künstliche Konkurenz zum JDO erzeugt wurde könnte dies ein Ansatz
	sein, die Kluft zukünftig wieder zu überbrücken.},
  groups = {public},
  interhash = {c74a67485765a33ea43a5f89fdfb3ec3},
  intrahash = {675d93c8170db15fff61459e9adc3c80},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:15:07}
}

@BOOK{Wunde2006,
  title = {Java Rules Engines - Entwicklung von regelbasierten Systemen},
  publisher = {entwickler.press - Software \& Support Verlag GmbH},
  year = {2006},
  author = {Wunderlich, Lars},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Eine super Einführung in die regelbasierte Programmierung mit Java
	als Programmiersprache.  Zunächst ein paar Grundlagen zur Wissensverarbeitung.
	 Dann grundlegende Erklärungen zum Konzept der Regelmaschine.  Benutzung
	und Programmierung am Beispiel von drools.  Erläuterung des JSR-94
	APIs.  Vergleich drools mit anderen JRules.  Weitere Erläuterungen
	zu Expertensystemen, Lernenden Systemen, Autonomie und Intelligenz.},
  groups = {public},
  interhash = {f8603c44a2d6f8c1c5bd6d07f1f2f0cb},
  intrahash = {408e5f75cba23e068a27e7462cc9775e},
  isbn = {3-935042-75-2},
  keywords = {agentensysteme, expertensystem, fuzzy, jsr, logic, neuronalenetze,
	rules, rulesengine, technologie},
  owner = {funthomas424242},
  privnote = {JSR94},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Zeitn2007,
  author = {Zeitner, Alfred},
  title = {Der Weg zum Prototypen - Erstellung einer Java EE Anwendung auf Basis
	eines Prozessmodels},
  journal = {Java Magazin},
  year = {2007},
  volume = {5},
  pages = {20 - 28},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ausführliches Tutorial.},
  groups = {public},
  interhash = {117a7c803853665255a9010f3663760c},
  intrahash = {d6825783541e94e485d843b083178ebb},
  keywords = {imported},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Zerbe1999,
  author = {Zerbe, Klaus},
  title = {Bauplan für Objekte},
  journal = {c't},
  year = {1999},
  volume = {21},
  pages = {338 - 355},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr gute Einführung in die UML. Der Artikel orientiert sich am damaligen
	Hype um die UML. Der Artikel räumt mit diversen Wirren und Verwechslungen
	der damaligen Zeit auf und vermittelt einen klaren Eindruck darüber,
	wie nach Meinung des Authors die UML verwendet werden sollte. Es
	werden grunlegende Prinzipien empfohlen z.B.: + Identifizieren von
	Klassen über Subjekte der Anforderungsbeschreibung + Anlegen von
	CRC-cards um Klassen, ihre Aktivitäten und die dabei benutzten Klassen
	zu identifizieren + Anlegen eines Fachwörterbuches + Durchführen
	von Meetings, Anlegen von Protokollen + Anschliessend Identifizieren
	der Use Cases + Sätze in Anwendungsfallbeschreibungen sollten im
	Idealfall kurz sein, so dass jeder Satz eine Aktivität, das verantwortliche
	Subjekt oder Objekt und die sonst noch an der Aktivität beteiligten
	Objekte enthält - also gut in CRC-Karten übertragbar ist. + CRC (Class,
	Responsibilities, Collaborators) Der Author empfiehlt als Vorgensmodell
	zunächst eine funktionale Analyse und dann erst eine datenzentrierte
	gemäß objektorientierter Erfahrungen. Er empfiehlt die Object Engineering
	Workbench (OWE) als Werkzeug Er schwört auf die Vorteile des Roundtrip
	Engineerings - welches damals kein Tool unterstützte. Im Vordergrund
	der Entwicklung sollten Modifizierte beziehungsweise von der Anwendung
	zusätzlich benötigte Aktivitäten stehen. Der damalige Stand der UML
	1.0: UML hilft ungeschickte Spezialisierungen zu vermeiden, denn
	die Angabe eines so genannten Diskriminators zwingt, über Unterscheidungsmerkmale
	zur Oberklasse nachzudenken. Für Exemplare wird der Klassenname unterstrichen.
	Benutzung des Kompositum Pattern.},
  groups = {public},
  interhash = {ac7a81ca80b45b06c480342abd8b03cc},
  intrahash = {cea5aec7cd1484660b789645676b64c9},
  keywords = {UML},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:57}
}

@ARTICLE{Ziegl2003,
  author = {Ziegler, Carsten},
  title = {Die Nebel von Avalon - Avalon: Komponenten-Framework von Apache},
  journal = {Java Magazin},
  year = {2003},
  volume = {1},
  pages = {44 - 50},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel führt in das Framework Avalon ein. Bei Avalon werden je
	nach Verhalten einer Komponente spezielle Interfaces implementiert.
	Folgende Standard-Interfaces werden im Artikel beschrieben: + LogEnabled
	für Komponenten die Logausgaben schreiben wollen + Contextualizable
	für Komponenten denen ein Kontext übergeben werden kann + Composable
	für Komponenten mit Zugriff auf andere Komponenten + Configurable
	für konfigurierbare Komponenten + Parameterizable für Komponenten
	welche über Schlüssel/Wert Paare konfiguriert werden + Initializable
	für Komponenten welche eine Initialisierungsphase benötigen + Disposable
	für Komponenten welche eine Aufräumphase benötigen + ThreadSafe für
	Komponenten welche ThreadSafe programmiert sind + SingleThreaded
	für zustandsbehaftete Komponenten welche nicht parallel von mehreren
	Threads durchlaufen werden dürfen + Poolable für Komponenten welche
	in einem Pool verwaltet werden können + Recyclable für ? Unklar blieb
	ob selbstdefinierte Markerinterfaces möglich sind und wie deren Semantik
	beschrieben wird.},
  groups = {public},
  interhash = {7b9ad9687132eb25f6bc7fdc56c30304},
  intrahash = {b767ab1eb71a011b475b1f50c3e1d028},
  keywords = {apache, avalon, framework},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:54}
}

@BOOK{Zirna1989,
  title = {Compilerbau 1: Analyse},
  publisher = {BI Wissenschaftsverlag},
  year = {1989},
  author = {Zirna, H.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {530b55e1368640ed98aabd39e486a874},
  intrahash = {2fb0b739712bbfa06ea822044e7fce31},
  keywords = {compilerbau},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{zorner2012softwarearchitekturen,
  title = {Softwarearchitekturen dokumentieren und kommunizieren : Entwürfe,
	Entscheidungen und Lösungen nachvollziehbar und wirkungsvoll festhalten},
  publisher = {Hanser},
  year = {2012},
  author = {Zörner, Stefan},
  address = {München},
  note = {Das eBook gab es bei Hanser kostenlos dazu.},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Einführung in die Dokumentation und Kommunikation von Softwarearchitekturen
	am praktischen Beispiel DokChess. Weiterhin gibt es viele praktische
	Übungen. Die Lösungen können an den Autor gesendet werden und im
	Tausch dazu erhält der Leser dessen Lösungsvorschläge. },
  comment = {DokChess dient als übergreifendes Beispiel welches der Autor auch
	in anderen Publikationen benutzt. Dadurch kann der Leser noch mehr
	Nutzen aus Beispiel und Lektüre ziehen. DokChess besitzt unter http://www.dokchess.de/
	eine Homepage im Internet. Stefan Zörner empfielt die Erstellung
	der Architekturdokumentation begleitend zur eigentlichen Arbeit.
	So können Entscheidungen sofort dokumentiert werden. Außerdem werden
	sich nicht irgendwelche Entscheidungen bei der Nachdoku aus den Finger
	gesogen sondern nur relevante Dinge dokumentiert.Aus meiner Sicht
	sehr gelungen - auch wenn ich noch nicht ganz durch bin mit lesen.
	Allerdings hatte ich das Glück einige Vorträge vom Autor zu hören
	bei denen ebenfalls auf DokChess zurückgegriffen wurde.},
  groups = {public},
  interhash = {917eff240f7d2b574060430b8da14402},
  intrahash = {6ddba87b36ae9254140ceca627f7161c},
  isbn = {3446429247 9783446429246},
  keywords = {Architektur, architecture, software, software-architektur},
  owner = {funthomas424242},
  refid = {795519397},
  timestamp = {2012-10-21 12:39:48},
  url = {http://www.worldcat.org/search?qt=worldcat_org_all&q=9783446429246}
}

@ARTICLE{Zoerne2008,
  author = {Zörner, Stefan},
  title = {Zukunftsentwürfe - Applikationsdesign im Zeitalter von OSGi},
  journal = {Java Magazin},
  year = {2008},
  volume = {8},
  pages = {52 - 56},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Sehr guter Artikel welcher die Fragen beantwortet die man sich stellt,
	wenn man seine eigene Applikation OSGi konform aufsetzen möchte.
	Es werden Hinweise gegeben, was man tun soll und was nicht. Erfahrungsberichte
	zu den Hinweisen können noch nicht umfassend geliefert werden, da
	Erfahrungen im Applikationsserverumfeld erst beginnen. Die bisherigen
	Erfahrungen beruhen auf Projekten wie Eclipse, Appache OSGi konforme
	Projekte wie http://felix.apache.org/site/index.html und andere.
	Grundaussage des Artikels ist: Baue alles wie bisher, erstelle ein
	sehr gutes Design und entscheide im Rahmen von OSGi welche öffentlichen
	Methoden published werden und welche nicht. Die Grunlagen guter Softwareentwicklung
	sollen auf keinen Fall weggeworfen werden und erst nach deren Sicherstellung
	soll OSGi ins Spiel kommen. Bei OSGi geht es vor allem darum Bundles
	als Strukturierung oberhalb von Packages zu nutzen und nach dem Design
	diese Bundles für das Deployment zu schneiden. Für verschiedene Umgebungen
	kann es durchaus erforderlich sein Bundels verschieden zu schneiden.
	Bundle = Komponente -> nein -> sonst wird eine zu enge Kopplung erzeugt
	Bundles sind auch JAR Files OSGi spezifische Klassen (Aktivatoren,
	...) in extra Packages auslagern Einfach bauen wie bisher und dann
	die JARs mit zusätzlichen OSGi Infos bestücken. OSGi hat zwei Grundkonzepte:
	1) Service -> Implementierung eines Interfaces (Services) und Bereitstellung
	des Services im Bundle Vorteil: Service kann von anderen Bundles
	dynamisch zur Laufzeit genutzt werden (per Registrierung) Nachteil:
	Service wird immer gestartet unabhängig ob ihn ein Bundle nutzt oder
	nicht 2) Extension Points -> Mechanismus selbst implementieren oder
	aus anderen Projekten (Equinox) nachnutzen. Vorteil: Bundle Aktivierung
	erfolgt nur bei Bedarf Nachteil: komplexer zu implementieren, mehr
	Abhängigkeiten Fazit: OSGi erweitert Java um Ausdrucksmittel für
	gewollte und unerwünschte Abhängigkeiten und die Erweiterbarkeit
	zur Laufzeit. Der Entwurf einer anwendung unter Verwendung von OSGi
	zwingt Sie, bei der Umsetzung Dinge explizit zu machen (z.B. das
	Bilden von Modulen, das Deklarieren von Abhängigkeiten), die für
	ein gutes Design ohnehin nerlässlich sind.},
  groups = {public},
  interhash = {7f3e3677ee664cdf2b6315c714ca11ab},
  intrahash = {dfa7f94742aa11e6dab11e68b634b2b9},
  keywords = {architecture, design, osgi, zörner},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:42}
}

@BOOK{Zoerne2005,
  title = {LDAP für Java Entwickler - Eine praxisorientierte Einführung},
  publisher = {entwickler.press},
  year = {2005},
  author = {Zörner, Stefan},
  edition = {2},
  month = {November},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {d2a69a7029b790a2fef0ccf26e0e8af1},
  intrahash = {4297a47cb1d226383edb5760b662216e},
  isbn = {3-935042-72-8},
  keywords = {java, ldap, technologie, zörner},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Zoerne2005a,
  author = {Zörner, Stefan},
  title = {Kennwort vergessen? - Zugriff auf Benutzerdaten im Active Directory
	mit JNDI, Teil 2},
  journal = {Java Magazin},
  year = {2005},
  volume = {2},
  pages = {66 - 71},
  __markedentry = {[FunThomas424242:6]},
  abstract = {2. Teil der Einführung zum JNDI Zugriff auf Active Directory - diesmal
	schreibend.},
  groups = {public},
  interhash = {b210e3f982b08cad9038c083ea9cb63b},
  intrahash = {2e28e799d974952cb1f26a3ef2d32d75},
  keywords = {active*directory, jndi, kennwort, zörner},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@ARTICLE{Zota2008,
  author = {Zota, Dr. Volker},
  title = {Blitz \& Donnervogel},
  journal = {Java Magazin},
  year = {2008},
  volume = {13},
  pages = {212 - 215},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Der Artikel beschreibt Lösungsvorschläge zur Termin, Aufgaben und
	Mail Synchronisation zwischen Firma und heimischen Rechner über Thunderbird
	und Lightning. Weitere Tools: + Google Calendar + SyncMab + GCalcDaemon
	+ Funambol},
  groups = {public},
  interhash = {be508f31700569b57c6d3ecd63eb1a9c},
  intrahash = {f11d173e776e98b0a229275a7af26379},
  keywords = {Office, Sync},
  owner = {funthomas424242},
  timestamp = {2010-09-12 20:03:37}
}

@ARTICLE{Zyl2010,
  author = {van Zyl, Jason},
  title = {Maven 3 ist die Zukunft von Maven},
  journal = {Java Magazin},
  year = {2010},
  volume = {5},
  pages = {70 - 72},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Ein Interview welches das Java Magazin mit dem Gründer von Sonatype
	zum bevorstehenden GoLive von Maven 3 führte. Neues: Interna komplett
	neu Guice statt Plexus DSL zusätzlich zur pom.xml (Polyglot) Gestärkte
	Rolle des Repository Managers (Nexus) im Gegensatz zur Nutzung der
	settings.xml Ablösung der settings.xml über Security Manager geplant
	POM Mixins - Firmenweite Standardkonfigurationen nicht mehr über
	Vererbung in pom.xml sonder durch includes. Schwerpunkt gilt der
	Entwicklung von Enterprise Anwendungen in Firmen},
  groups = {public},
  interhash = {5d9bf7cc21d126e2d0f47b41cf028f80},
  intrahash = {33f7acb5a8a59274843342319a217163},
  keywords = {interview, maven, maven3, sonatype},
  owner = {funthomas424242},
  timestamp = {2010-09-12 18:14:45}
}

@BOOK{CopliS1995,
  title = {Pattern Languages of Program Design},
  publisher = {Addison Wesley},
  year = {1995},
  editor = {Coplien, James O. and Schmidt, Douglas C.},
  __markedentry = {[FunThomas424242:6]},
  groups = {public},
  interhash = {8b5f67c89b2a5808d3ed6de5fbabf36e},
  intrahash = {50515f161da905abf78e95df3d33da92},
  isbn = {0-201-60734-4},
  keywords = {designpattern},
  owner = {funthomas424242},
  timestamp = {2010-09-07 21:25:41}
}

@BOOK{CorIsekToete2001,
  title = {Die Mundorgel},
  year = {2001},
  editor = {Corbach, Dieter and Corbach, Irene and Iseke, Ulrich and Toetemeyer,
	Hans-Günther},
  note = {Nettes Buch zum Erhalt des Liedgutes.},
  __markedentry = {[FunThomas424242:6]},
  abstract = {Das Buch enthält verschiedene Liederarten. Beispielsweise:+ geistliche
	Lieder+ Protestlieder+ Bewegungslieder+ deutsche Fassungen zu fremdsprachigen
	Liedern},
  comment = {},
  groups = {public},
  interhash = {5a2d01afab0a0f3432bddbb7458aef38},
  intrahash = {8a7e4b6172d9a52c62bc1d9aa13f1a2e},
  keywords = {gitarre, noten, texte, volkslieder},
  owner = {funthomas424242},
  timestamp = {2010-09-19 18:27:57}
}

@comment{jabref-meta: selector_review:}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:myown;web;analysis;management;
software;semantic;learning;language;information;data;user;time;search;
physics;design;2012;retrieval;research;quality;processing;of;nlp;scien
ce;social;structure;study;svm;test;type;university;wikipedia;natural;m
odels;3d;application;architecture;assessment;clustering;communication;
computer;dblp;experiment;model;kdd;java;ir;internet;hierarchy;extracti
on;example;events;evaluation;environment;enterprise;engineering;elearn
ing;education;display;deutschland;deutsch;feature;feedback;home;group;
graph;geschichte;generalization;fuzzy;function;frankfurt;framework;for
mal;flow;image;detector;and;alpha;algorithm;agent;adaptation;2011;2010
;2008;2006;2004;2003;book;building;detection;delay;dbpedia;context-fre
e;computation;comparison;community;classification;change;case;canon;2.
0;3d;6.0;ADSL;Architektur;Betriebsysteme;C++;CCD;CORBA;Connector;Corba
;Datumsberechnung;EMF;EPKfix;Eclipse;Encoding;FEST;FXML;GEF;GUI;Griffo
n;Groupware;Groupware,;Historie;IDEA;ISO14443;J2EE;JAAS;JTS;JavaBeans;
JavaEE;JavaFx;JavaKnigge;JavaMagazin;JavaMail;Konfiguration;König;Linu
x;Mustang;NSIS;Office;Plugin;Portale;Probleme;Provider;Radeln;Radwande
rn;ReferenceManager;SDK6.0;SOA;SQS;Saale;SceneBuilder;Security;Steuer;
Sync;Teamwork;Tools;UML;Unicode;Verbraucherschutz;VisualComposer;WYSIW
YG;Weiterbildung;Weltweit;XML;XRadar;XSL;ac1;active*directory;adempier
e;agentensysteme;agile;akzeptanztest;algorithmus;analyse;annotations;a
ntlr;apache;apache-felix;apacheOFBiz;api;architecture;avalon;avr-net-i
o-board;balzert;bayern;begriff;beispiel;bibliografie;bibliographi;bibl
iographix;bibliothek;borland;build;bundle;bündel;check;citation;citavi
;client;3d;6.0;ADSL;Architektur;Betriebsysteme;C++;CCD;CORBA;Connector
;Corba;Datumsberechnung;EMF;EPKfix;Eclipse;Encoding;FEST;FXML;GEF;GUI;
Griffon;Groupware;Groupware,;Historie;IDEA;ISO14443;J2EE;JAAS;JTS;Java
Beans;JavaEE;JavaFx;JavaKnigge;JavaMagazin;JavaMail;Konfiguration;Köni
g;Linux;Mustang;NSIS;Office;Plugin;Portale;Probleme;Provider;Radeln;Ra
dwandern;ReferenceManager;SDK6.0;SOA;SQS;Saale;SceneBuilder;Security;S
teuer;Sync;Teamwork;Tools;UML;Unicode;Verbraucherschutz;VisualComposer
;WYSIWYG;Weiterbildung;Weltweit;XML;XRadar;XSL;ac1;active*directory;ad
empiere;agentensysteme;agile;akzeptanztest;algorithmus;analyse;annotat
ions;antlr;apache;apache-felix;apacheOFBiz;api;architecture;avalon;avr
-net-io-board;balzert;bayern;begriff;beispiel;bibliografie;bibliograph
i;bibliographix;bibliothek;borland;build;bundle;bündel;check;citation;
citavi;client;}

